
TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b0  0800a0b0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b8  0800a0b8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0bc  0800a0bc  0001a0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a0c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000007f4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000870  20000870  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b2d0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057bb  00000000  00000000  0004b37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d0  00000000  00000000  00050b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020b0  00000000  00000000  00052e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b680  00000000  00000000  00054eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028dac  00000000  00000000  00080538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6fc2  00000000  00000000  000a92e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a02a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e14  00000000  00000000  001a02f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b5c 	.word	0x08009b5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08009b5c 	.word	0x08009b5c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80006ee:	f000 fc31 	bl	8000f54 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <ConsoleInit+0x48>)
 80006f4:	f000 fc60 	bl	8000fb8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <ConsoleInit+0x4c>)
 80006fa:	f000 fc5d 	bl	8000fb8 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 8000700:	f000 fc5a 	bl	8000fb8 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <ConsoleInit+0x54>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e007      	b.n	8000720 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <ConsoleInit+0x58>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d9f4      	bls.n	8000710 <ConsoleInit+0x28>
	}

}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08009b74 	.word	0x08009b74
 8000734:	08009bbc 	.word	0x08009bbc
 8000738:	08009bc0 	.word	0x08009bc0
 800073c:	20000198 	.word	0x20000198
 8000740:	20000098 	.word	0x20000098

08000744 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074a:	4b54      	ldr	r3, [pc, #336]	; (800089c <ConsoleProcess+0x158>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a54      	ldr	r2, [pc, #336]	; (80008a0 <ConsoleProcess+0x15c>)
 8000750:	1898      	adds	r0, r3, r2
 8000752:	4b52      	ldr	r3, [pc, #328]	; (800089c <ConsoleProcess+0x158>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075a:	463a      	mov	r2, r7
 800075c:	4619      	mov	r1, r3
 800075e:	f000 fc01 	bl	8000f64 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <ConsoleProcess+0x2e>
 8000768:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <ConsoleProcess+0x160>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 8091 	beq.w	8000894 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000772:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <ConsoleProcess+0x160>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000778:	4b48      	ldr	r3, [pc, #288]	; (800089c <ConsoleProcess+0x158>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a46      	ldr	r2, [pc, #280]	; (800089c <ConsoleProcess+0x158>)
 8000782:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000784:	4b45      	ldr	r3, [pc, #276]	; (800089c <ConsoleProcess+0x158>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	4845      	ldr	r0, [pc, #276]	; (80008a0 <ConsoleProcess+0x15c>)
 800078c:	f7ff ff81 	bl	8000692 <ConsoleCommandEndline>
 8000790:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db7d      	blt.n	8000894 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000798:	f000 fbd2 	bl	8000f40 <ConsoleCommandsGetTable>
 800079c:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a6:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007a8:	e03d      	b.n	8000826 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4613      	mov	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	461a      	mov	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4938      	ldr	r1, [pc, #224]	; (80008a0 <ConsoleProcess+0x15c>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fee8 	bl	8000594 <ConsoleCommandMatch>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d02a      	beq.n	8000820 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4613      	mov	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	461a      	mov	r2, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	4413      	add	r3, r2
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <ConsoleProcess+0x15c>)
 80007de:	4798      	blx	r3
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d017      	beq.n	800081a <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ea:	482f      	ldr	r0, [pc, #188]	; (80008a8 <ConsoleProcess+0x164>)
 80007ec:	f000 fbe4 	bl	8000fb8 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f0:	482b      	ldr	r0, [pc, #172]	; (80008a0 <ConsoleProcess+0x15c>)
 80007f2:	f000 fbe1 	bl	8000fb8 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007f6:	482d      	ldr	r0, [pc, #180]	; (80008ac <ConsoleProcess+0x168>)
 80007f8:	f000 fbde 	bl	8000fb8 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	4613      	mov	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	4413      	add	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	461a      	mov	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	3308      	adds	r3, #8
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fbd2 	bl	8000fb8 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <ConsoleProcess+0x16c>)
 8000816:	f000 fbcf 	bl	8000fb8 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	e002      	b.n	8000826 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4613      	mov	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	461a      	mov	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <ConsoleProcess+0x100>
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000842:	d0b2      	beq.n	80007aa <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00d      	beq.n	8000866 <ConsoleProcess+0x122>
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000850:	d109      	bne.n	8000866 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <ConsoleProcess+0x158>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d905      	bls.n	8000866 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <ConsoleProcess+0x170>)
 800085c:	f000 fbac 	bl	8000fb8 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <ConsoleProcess+0x16c>)
 8000862:	f000 fba9 	bl	8000fb8 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <ConsoleProcess+0x158>)
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	461a      	mov	r2, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <ConsoleProcess+0x15c>)
 8000872:	f7ff fedc 	bl	800062e <ConsoleResetBuffer>
 8000876:	4603      	mov	r3, r0
 8000878:	4a08      	ldr	r2, [pc, #32]	; (800089c <ConsoleProcess+0x158>)
 800087a:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <ConsoleProcess+0x158>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <ConsoleProcess+0x160>)
 800088c:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <ConsoleProcess+0x174>)
 8000890:	f000 fb92 	bl	8000fb8 <ConsoleIoSendString>
		}
	}
}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000198 	.word	0x20000198
 80008a0:	20000098 	.word	0x20000098
 80008a4:	2000019c 	.word	0x2000019c
 80008a8:	08009bc4 	.word	0x08009bc4
 80008ac:	08009bcc 	.word	0x08009bcc
 80008b0:	08009bbc 	.word	0x08009bbc
 80008b4:	08009bd4 	.word	0x08009bd4
 80008b8:	08009bc0 	.word	0x08009bc0

080008bc <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	460b      	mov	r3, r1
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d2:	2300      	movs	r3, #0
 80008d4:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008d6:	e00b      	b.n	80008f0 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b20      	cmp	r3, #32
 80008e2:	d102      	bne.n	80008ea <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	3301      	adds	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3301      	adds	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d002      	beq.n	80008fe <ConsoleParamFindN+0x42>
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	2bff      	cmp	r3, #255	; 0xff
 80008fc:	d9ec      	bls.n	80008d8 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000904:	d102      	bne.n	800090c <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000906:	2310      	movs	r3, #16
 8000908:	75fb      	strb	r3, [r7, #23]
 800090a:	e002      	b.n	8000912 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3724      	adds	r7, #36	; 0x24
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	460b      	mov	r3, r1
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000932:	f107 021c 	add.w	r2, r7, #28
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	4619      	mov	r1, r3
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f7ff ffbe 	bl	80008bc <ConsoleParamFindN>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	4413      	add	r3, r2
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095a:	e011      	b.n	8000980 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800095c:	f107 0214 	add.w	r2, r7, #20
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	4413      	add	r3, r2
 8000964:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000968:	701a      	strb	r2, [r3, #0]
		i++;
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	3301      	adds	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	4413      	add	r3, r2
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000984:	2b0a      	cmp	r3, #10
 8000986:	d00a      	beq.n	800099e <ConsoleReceiveParamInt16+0x7e>
 8000988:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800098c:	2b0d      	cmp	r3, #13
 800098e:	d006      	beq.n	800099e <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000990:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000994:	2b20      	cmp	r3, #32
 8000996:	d002      	beq.n	800099e <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	2b07      	cmp	r3, #7
 800099c:	d9de      	bls.n	800095c <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d102      	bne.n	80009aa <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a4:	2310      	movs	r3, #16
 80009a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10e      	bne.n	80009d0 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b2:	f107 0214 	add.w	r2, r7, #20
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	4413      	add	r3, r2
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4618      	mov	r0, r3
 80009c4:	f007 fe02 	bl	80085cc <atoi>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	460b      	mov	r3, r1
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f2:	f107 0218 	add.w	r2, r7, #24
 80009f6:	7afb      	ldrb	r3, [r7, #11]
 80009f8:	4619      	mov	r1, r3
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f7ff ff5e 	bl	80008bc <ConsoleParamFindN>
 8000a00:	4603      	mov	r3, r0
 8000a02:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a04:	7ffb      	ldrb	r3, [r7, #31]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d12c      	bne.n	8000a64 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
 8000a0e:	e01e      	b.n	8000a4e <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a10:	7ffb      	ldrb	r3, [r7, #31]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10d      	bne.n	8000a32 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	f107 0217 	add.w	r2, r7, #23
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8c5 	bl	8000bb8 <ConsoleUtilHexCharToInt>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a3e:	7dfb      	ldrb	r3, [r7, #23]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a44:	4413      	add	r3, r2
 8000a46:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d9dd      	bls.n	8000a10 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
 8000a56:	2b11      	cmp	r3, #17
 8000a58:	d101      	bne.n	8000a5e <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a62:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e01b      	b.n	8000aba <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a82:	7cfb      	ldrb	r3, [r7, #19]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d115      	bne.n	8000ab4 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a88:	88fa      	ldrh	r2, [r7, #6]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f1c3 0303 	rsb	r3, r3, #3
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa42 f303 	asr.w	r3, r2, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a9e:	f107 020c 	add.w	r2, r7, #12
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f8c5 	bl	8000c3a <ConsoleUtilsIntToHexChar>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d9e0      	bls.n	8000a82 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac0:	f107 020c 	add.w	r2, r7, #12
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fa71 	bl	8000fb8 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000aec:	2300      	movs	r3, #0
 8000aee:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da07      	bge.n	8000b0a <smallItoa+0x2a>
		isNegative = true;
 8000afa:	2301      	movs	r3, #1
 8000afc:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	425b      	negs	r3, r3
 8000b02:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	3301      	adds	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b0e:	e007      	b.n	8000b20 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b18:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f1      	bne.n	8000b10 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	4413      	add	r3, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	fb01 f202 	mul.w	r2, r1, r2
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	440b      	add	r3, r1
 8000b58:	3230      	adds	r2, #48	; 0x30
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b66:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	617a      	str	r2, [r7, #20]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1e6      	bne.n	8000b40 <smallItoa+0x60>

	if (isNegative) {
 8000b72:	7ffb      	ldrb	r3, [r7, #31]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	222d      	movs	r2, #45	; 0x2d
 8000b7c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b98:	f107 0108 	add.w	r1, r7, #8
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff9e 	bl	8000ae0 <smallItoa>
	ConsoleIoSendString(out);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fa05 	bl	8000fb8 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b2f      	cmp	r3, #47	; 0x2f
 8000bcc:	d908      	bls.n	8000be0 <ConsoleUtilHexCharToInt+0x28>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b39      	cmp	r3, #57	; 0x39
 8000bd2:	d805      	bhi.n	8000be0 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3b30      	subs	r3, #48	; 0x30
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e025      	b.n	8000c2c <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b40      	cmp	r3, #64	; 0x40
 8000be4:	d908      	bls.n	8000bf8 <ConsoleUtilHexCharToInt+0x40>
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b46      	cmp	r3, #70	; 0x46
 8000bea:	d805      	bhi.n	8000bf8 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	3b37      	subs	r3, #55	; 0x37
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e019      	b.n	8000c2c <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b60      	cmp	r3, #96	; 0x60
 8000bfc:	d908      	bls.n	8000c10 <ConsoleUtilHexCharToInt+0x58>
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b66      	cmp	r3, #102	; 0x66
 8000c02:	d805      	bhi.n	8000c10 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	3b57      	subs	r3, #87	; 0x57
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e00d      	b.n	8000c2c <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b0a      	cmp	r3, #10
 8000c14:	d105      	bne.n	8000c22 <ConsoleUtilHexCharToInt+0x6a>
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b0d      	cmp	r3, #13
 8000c1a:	d102      	bne.n	8000c22 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b20      	cmp	r3, #32
 8000c20:	d102      	bne.n	8000c28 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c22:	2311      	movs	r3, #17
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e001      	b.n	8000c2c <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b085      	sub	sp, #20
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	6039      	str	r1, [r7, #0]
 8000c44:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d805      	bhi.n	8000c5c <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	3330      	adds	r3, #48	; 0x30
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e00d      	b.n	8000c78 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	d908      	bls.n	8000c74 <ConsoleUtilsIntToHexChar+0x3a>
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d805      	bhi.n	8000c74 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3337      	adds	r3, #55	; 0x37
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e001      	b.n	8000c78 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c74:	2310      	movs	r3, #16
 8000c76:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000ca8:	2309      	movs	r3, #9
 8000caa:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e01e      	b.n	8000cf0 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb2:	4914      	ldr	r1, [pc, #80]	; (8000d04 <ConsoleCommandHelp+0x68>)
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f978 	bl	8000fb8 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <ConsoleCommandHelp+0x6c>)
 8000cca:	f000 f975 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	3308      	adds	r3, #8
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <ConsoleCommandHelp+0x68>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f96a 	bl	8000fb8 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <ConsoleCommandHelp+0x70>)
 8000ce6:	f000 f967 	bl	8000fb8 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3db      	bcc.n	8000cb2 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	08009c70 	.word	0x08009c70
 8000d08:	08009c20 	.word	0x08009c20
 8000d0c:	08009c24 	.word	0x08009c24

08000d10 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2101      	movs	r1, #1
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fdfd 	bl	8000920 <ConsoleReceiveParamInt16>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d116      	bne.n	8000d5e <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <ConsoleCommandParamExampleInt16+0x58>)
 8000d32:	f000 f941 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff25 	bl	8000b8a <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <ConsoleCommandParamExampleInt16+0x5c>)
 8000d42:	f000 f939 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe8e 	bl	8000a6e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <ConsoleCommandParamExampleInt16+0x60>)
 8000d54:	f000 f930 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <ConsoleCommandParamExampleInt16+0x64>)
 8000d5a:	f000 f92d 	bl	8000fb8 <ConsoleIoSendString>
	}
	return result;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	08009c28 	.word	0x08009c28
 8000d6c:	08009c38 	.word	0x08009c38
 8000d70:	08009c40 	.word	0x08009c40
 8000d74:	08009c24 	.word	0x08009c24

08000d78 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	461a      	mov	r2, r3
 8000d86:	2101      	movs	r1, #1
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fe27 	bl	80009dc <ConsoleReceiveParamHexUint16>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000d9a:	f000 f90d 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000d9e:	89bb      	ldrh	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe64 	bl	8000a6e <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <ConsoleCommandParamExampleHexUint16+0x44>)
 8000da8:	f000 f906 	bl	8000fb8 <ConsoleIoSendString>
	}
	return result;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08009c44 	.word	0x08009c44
 8000dbc:	08009c24 	.word	0x08009c24

08000dc0 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <ConsoleCommandVer+0x24>)
 8000dce:	f000 f8f3 	bl	8000fb8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <ConsoleCommandVer+0x28>)
 8000dd4:	f000 f8f0 	bl	8000fb8 <ConsoleIoSendString>
	return result;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08009c54 	.word	0x08009c54
 8000de8:	08009c24 	.word	0x08009c24

08000dec <ConsoleCommandLedDelay>:


static eCommandResult_T ConsoleCommandLedDelay(const char buffer[])
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	extern int led_delay;
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fd8f 	bl	8000920 <ConsoleReceiveParamInt16>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d113      	bne.n	8000e34 <ConsoleCommandLedDelay+0x48>
	{
		ConsoleIoSendString("Parameter is ");
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <ConsoleCommandLedDelay+0x54>)
 8000e0e:	f000 f8d3 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000e12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff feb7 	bl	8000b8a <ConsoleSendParamInt16>
		if (parameterInt > 0) led_delay = parameterInt;
 8000e1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd04      	ble.n	8000e2e <ConsoleCommandLedDelay+0x42>
 8000e24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <ConsoleCommandLedDelay+0x58>)
 8000e2c:	601a      	str	r2, [r3, #0]
		ConsoleIoSendString(STR_ENDLINE);
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <ConsoleCommandLedDelay+0x5c>)
 8000e30:	f000 f8c2 	bl	8000fb8 <ConsoleIoSendString>
	}
	return result;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08009c28 	.word	0x08009c28
 8000e44:	20000004 	.word	0x20000004
 8000e48:	08009c24 	.word	0x08009c24

08000e4c <ConsoleCommandLedSelect>:

static eCommandResult_T ConsoleCommandLedSelect(const char buffer[])
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	extern const int green_led_pin;
	extern int led_pin;

	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	461a      	mov	r2, r3
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fd5f 	bl	8000920 <ConsoleReceiveParamInt16>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d115      	bne.n	8000e98 <ConsoleCommandLedSelect+0x4c>
	{
		ConsoleIoSendString("Parameter is ");
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <ConsoleCommandLedSelect+0x58>)
 8000e6e:	f000 f8a3 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000e72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe87 	bl	8000b8a <ConsoleSendParamInt16>
		led_pin = parameterInt > 0 ? green_led_pin : red_led_pin;
 8000e7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dd02      	ble.n	8000e8a <ConsoleCommandLedSelect+0x3e>
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <ConsoleCommandLedSelect+0x5c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	e001      	b.n	8000e8e <ConsoleCommandLedSelect+0x42>
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <ConsoleCommandLedSelect+0x60>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <ConsoleCommandLedSelect+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]
		ConsoleIoSendString(STR_ENDLINE);
 8000e92:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <ConsoleCommandLedSelect+0x68>)
 8000e94:	f000 f890 	bl	8000fb8 <ConsoleIoSendString>
	}
	return result;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08009c28 	.word	0x08009c28
 8000ea8:	08009efc 	.word	0x08009efc
 8000eac:	08009ef8 	.word	0x08009ef8
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	08009c24 	.word	0x08009c24

08000eb8 <ConsoleCommandLedSet>:

static eCommandResult_T ConsoleCommandLedSet(const char buffer[])
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	extern const int green_led_pin;
	extern int led_pin;

	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fd29 	bl	8000920 <ConsoleReceiveParamInt16>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d122      	bne.n	8000f1e <ConsoleCommandLedSet+0x66>
	{
		ConsoleIoSendString("Parameter is ");
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <ConsoleCommandLedSet+0x70>)
 8000eda:	f000 f86d 	bl	8000fb8 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000ede:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fe51 	bl	8000b8a <ConsoleSendParamInt16>
		HAL_GPIO_WritePin(GPIOG,
						(led_pin == red_led_pin ? green_led_pin : red_led_pin),
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <ConsoleCommandLedSet+0x74>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <ConsoleCommandLedSet+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
		HAL_GPIO_WritePin(GPIOG,
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d103      	bne.n	8000efc <ConsoleCommandLedSet+0x44>
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <ConsoleCommandLedSet+0x7c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	e002      	b.n	8000f02 <ConsoleCommandLedSet+0x4a>
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <ConsoleCommandLedSet+0x78>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	bfcc      	ite	gt
 8000f0a:	2201      	movgt	r2, #1
 8000f0c:	2200      	movle	r2, #0
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <ConsoleCommandLedSet+0x80>)
 8000f14:	f001 ff20 	bl	8002d58 <HAL_GPIO_WritePin>
						(parameterInt > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET));
		ConsoleIoSendString(STR_ENDLINE);
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <ConsoleCommandLedSet+0x84>)
 8000f1a:	f000 f84d 	bl	8000fb8 <ConsoleIoSendString>
	}
	return result;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08009c28 	.word	0x08009c28
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	08009ef8 	.word	0x08009ef8
 8000f34:	08009efc 	.word	0x08009efc
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	08009c24 	.word	0x08009c24

08000f40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <ConsoleCommandsGetTable+0x10>)
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	08009c70 	.word	0x08009c70

08000f54 <ConsoleIoInit>:

extern UART_HandleTypeDef huart1;


eConsoleError ConsoleIoInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine 
// but that's partially because the serial terminal sends all of the 
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
	char ch;

	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 8000f74:	e00f      	b.n	8000f96 <ConsoleIoReceive+0x32>
  	ch = getchar();
 8000f76:	f007 fc45 	bl	8008804 <getchar>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	74fb      	strb	r3, [r7, #19]
  	putchar(ch); // echo
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 fd8b 	bl	8008a9c <putchar>
		buffer[i] = (uint8_t) ch;
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	7cfa      	ldrb	r2, [r7, #19]
 8000f8e:	701a      	strb	r2, [r3, #0]
		i++;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
	while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <ConsoleIoReceive+0x50>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d0e8      	beq.n	8000f76 <ConsoleIoReceive+0x12>
	}

	*readLength = i;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000384 	.word	0x20000384

08000fb8 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <ConsoleIoSendString+0x1c>)
 8000fc4:	f007 fd52 	bl	8008a6c <iprintf>
	return CONSOLE_SUCCESS;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08009c6c 	.word	0x08009c6c

08000fd8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    return (HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF) == HAL_OK ? ch : EOF);
 8000ff8:	1d39      	adds	r1, r7, #4
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	2201      	movs	r2, #1
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <__io_putchar+0x2c>)
 8001002:	f005 f944 	bl	800628e <HAL_UART_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <__io_putchar+0x20>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	e001      	b.n	8001014 <__io_putchar+0x24>
 8001010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000384 	.word	0x20000384

08001020 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	uint8_t ch;
	return (HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 0xFFFF) == HAL_OK ? ch : EOF);
 8001026:	1df9      	adds	r1, r7, #7
 8001028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102c:	2201      	movs	r2, #1
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <__io_getchar+0x2c>)
 8001030:	f005 f9bf 	bl	80063b2 <HAL_UART_Receive>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <__io_getchar+0x1e>
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	e001      	b.n	8001042 <__io_getchar+0x22>
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000384 	.word	0x20000384

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f001 f983 	bl	8002360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f84b 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 fab9 	bl	80015d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8001062:	f000 f8b1 	bl	80011c8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001066:	f000 f8c3 	bl	80011f0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800106a:	f000 fa63 	bl	8001534 <MX_FMC_Init>
  MX_I2C3_Init();
 800106e:	f000 f8f1 	bl	8001254 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001072:	f000 f92f 	bl	80012d4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001076:	f000 f9ad 	bl	80013d4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800107a:	f000 f9e1 	bl	8001440 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800107e:	f000 fa2f 	bl	80014e0 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  // https://embedded.fm/blog/2017/1/19/discovery-uart-input
  // Disable buffering of serial ports
  setvbuf(stdin, NULL, _IONBF, 0);
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <main+0x94>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6858      	ldr	r0, [r3, #4]
 8001088:	2300      	movs	r3, #0
 800108a:	2202      	movs	r2, #2
 800108c:	2100      	movs	r1, #0
 800108e:	f007 fd2b 	bl	8008ae8 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <main+0x94>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6898      	ldr	r0, [r3, #8]
 8001098:	2300      	movs	r3, #0
 800109a:	2202      	movs	r2, #2
 800109c:	2100      	movs	r1, #0
 800109e:	f007 fd23 	bl	8008ae8 <setvbuf>

  // Initialize command console
  ConsoleInit();
 80010a2:	f7ff fb21 	bl	80006e8 <ConsoleInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

#if 1
  // For now run without a thread
  int i = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  while (1) {
	  ConsoleProcess();
 80010aa:	f7ff fb4b 	bl	8000744 <ConsoleProcess>
	  HAL_Delay(console_delay);
 80010ae:	2302      	movs	r3, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f997 	bl	80023e4 <HAL_Delay>
	  if (i++ % (led_delay/console_delay) == 0) {
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	61fa      	str	r2, [r7, #28]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <main+0x98>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	2102      	movs	r1, #2
 80010c2:	fb92 f2f1 	sdiv	r2, r2, r1
 80010c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80010ca:	fb01 f202 	mul.w	r2, r1, r2
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1ea      	bne.n	80010aa <main+0x5a>
		  HAL_GPIO_TogglePin(GPIOG, led_pin);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <main+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <main+0xa0>)
 80010de:	f001 fe54 	bl	8002d8a <HAL_GPIO_TogglePin>
	  ConsoleProcess();
 80010e2:	e7e2      	b.n	80010aa <main+0x5a>
 80010e4:	20000018 	.word	0x20000018
 80010e8:	20000004 	.word	0x20000004
 80010ec:	20000000 	.word	0x20000000
 80010f0:	40021800 	.word	0x40021800

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 fbca 	bl	800889c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <SystemClock_Config+0xcc>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <SystemClock_Config+0xcc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001140:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <SystemClock_Config+0xd0>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800116c:	2348      	movs	r3, #72	; 0x48
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001174:	2303      	movs	r3, #3
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fc71 	bl	8004a64 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001188:	f000 fb46 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fed3 	bl	8004f54 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b4:	f000 fb30 	bl	8001818 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_CRC_Init+0x20>)
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <MX_CRC_Init+0x24>)
 80011d0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_CRC_Init+0x20>)
 80011d4:	f001 fa0c 	bl	80025f0 <HAL_CRC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011de:	f000 fb1b 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001a0 	.word	0x200001a0
 80011ec:	40023000 	.word	0x40023000

080011f0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_DMA2D_Init+0x5c>)
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <MX_DMA2D_Init+0x60>)
 80011f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_DMA2D_Init+0x5c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_DMA2D_Init+0x5c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_DMA2D_Init+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_DMA2D_Init+0x5c>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_DMA2D_Init+0x5c>)
 8001214:	2200      	movs	r2, #0
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA2D_Init+0x5c>)
 800121a:	2200      	movs	r2, #0
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_DMA2D_Init+0x5c>)
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <MX_DMA2D_Init+0x5c>)
 8001226:	f001 f9ff 	bl	8002628 <HAL_DMA2D_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001230:	f000 faf2 	bl	8001818 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001234:	2101      	movs	r1, #1
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_DMA2D_Init+0x5c>)
 8001238:	f001 fb50 	bl	80028dc <HAL_DMA2D_ConfigLayer>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001242:	f000 fae9 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001a8 	.word	0x200001a8
 8001250:	4002b000 	.word	0x4002b000

08001254 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_I2C3_Init+0x74>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <MX_I2C3_Init+0x78>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_I2C3_Init+0x74>)
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <MX_I2C3_Init+0x7c>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_I2C3_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_I2C3_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_I2C3_Init+0x74>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_I2C3_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_I2C3_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_I2C3_Init+0x74>)
 8001292:	f002 febf 	bl	8004014 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 fabc 	bl	8001818 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <MX_I2C3_Init+0x74>)
 80012a4:	f002 fffa 	bl	800429c <HAL_I2CEx_ConfigAnalogFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80012ae:	f000 fab3 	bl	8001818 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C3_Init+0x74>)
 80012b6:	f003 f82d 	bl	8004314 <HAL_I2CEx_ConfigDigitalFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 faaa 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001e8 	.word	0x200001e8
 80012cc:	40005c00 	.word	0x40005c00
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2234      	movs	r2, #52	; 0x34
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f007 fadb 	bl	800889c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <MX_LTDC_Init+0xf8>)
 80012e8:	4a39      	ldr	r2, [pc, #228]	; (80013d0 <MX_LTDC_Init+0xfc>)
 80012ea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <MX_LTDC_Init+0xf8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <MX_LTDC_Init+0xf8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <MX_LTDC_Init+0xf8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001306:	2209      	movs	r2, #9
 8001308:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <MX_LTDC_Init+0xf8>)
 800130c:	2201      	movs	r2, #1
 800130e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001312:	221d      	movs	r2, #29
 8001314:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001318:	2203      	movs	r2, #3
 800131a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_LTDC_Init+0xf8>)
 800131e:	f240 120d 	movw	r2, #269	; 0x10d
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001326:	f240 1243 	movw	r2, #323	; 0x143
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_LTDC_Init+0xf8>)
 800132e:	f240 1217 	movw	r2, #279	; 0x117
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001336:	f240 1247 	movw	r2, #327	; 0x147
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_LTDC_Init+0xf8>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_LTDC_Init+0xf8>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001354:	481d      	ldr	r0, [pc, #116]	; (80013cc <MX_LTDC_Init+0xf8>)
 8001356:	f003 f81d 	bl	8004394 <HAL_LTDC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 fa5a 	bl	8001818 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001368:	23f0      	movs	r3, #240	; 0xf0
 800136a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001370:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001374:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001376:	2302      	movs	r3, #2
 8001378:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800137a:	23ff      	movs	r3, #255	; 0xff
 800137c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001382:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001386:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001388:	2307      	movs	r3, #7
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800138c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001392:	23f0      	movs	r3, #240	; 0xf0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001396:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_LTDC_Init+0xf8>)
 80013b6:	f003 f97f 	bl	80046b8 <HAL_LTDC_ConfigLayer>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80013c0:	f000 fa2a 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3738      	adds	r7, #56	; 0x38
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000023c 	.word	0x2000023c
 80013d0:	40016800 	.word	0x40016800

080013d4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_SPI5_Init+0x64>)
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <MX_SPI5_Init+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_SPI5_Init+0x64>)
 80013e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_SPI5_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_SPI5_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_SPI5_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_SPI5_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_SPI5_Init+0x64>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_SPI5_Init+0x64>)
 8001408:	2218      	movs	r2, #24
 800140a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_SPI5_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_SPI5_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_SPI5_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_SPI5_Init+0x64>)
 8001420:	220a      	movs	r2, #10
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_SPI5_Init+0x64>)
 8001426:	f004 f9db 	bl	80057e0 <HAL_SPI_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001430:	f000 f9f2 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200002e4 	.word	0x200002e4
 800143c:	40015000 	.word	0x40015000

08001440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_TIM1_Init+0x98>)
 800145e:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <MX_TIM1_Init+0x9c>)
 8001460:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM1_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM1_Init+0x98>)
 8001470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_TIM1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_TIM1_Init+0x98>)
 800148a:	f004 fa32 	bl	80058f2 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001494:	f000 f9c0 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM1_Init+0x98>)
 80014a6:	f004 fbeb 	bl	8005c80 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014b0:	f000 f9b2 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM1_Init+0x98>)
 80014c2:	f004 fe07 	bl	80060d4 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014cc:	f000 f9a4 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000033c 	.word	0x2000033c
 80014dc:	40010000 	.word	0x40010000

080014e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_USART1_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001518:	f004 fe6c 	bl	80061f4 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 f979 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000384 	.word	0x20000384
 8001530:	40011000 	.word	0x40011000

08001534 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_FMC_Init+0x98>)
 800154e:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <MX_FMC_Init+0x9c>)
 8001550:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_FMC_Init+0x98>)
 8001554:	2201      	movs	r2, #1
 8001556:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_FMC_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_FMC_Init+0x98>)
 8001560:	2204      	movs	r2, #4
 8001562:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_FMC_Init+0x98>)
 8001566:	2210      	movs	r2, #16
 8001568:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_FMC_Init+0x98>)
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_FMC_Init+0x98>)
 8001572:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001576:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_FMC_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_FMC_Init+0x98>)
 8001580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001584:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_FMC_Init+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_FMC_Init+0x98>)
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001598:	2307      	movs	r3, #7
 800159a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80015a0:	2307      	movs	r3, #7
 80015a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80015a4:	2303      	movs	r3, #3
 80015a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_FMC_Init+0x98>)
 80015b6:	f004 f8df 	bl	8005778 <HAL_SDRAM_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80015c0:	f000 f92a 	bl	8001818 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200003c8 	.word	0x200003c8
 80015d0:	a0000140 	.word	0xa0000140

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <MX_GPIO_Init+0x208>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <MX_GPIO_Init+0x208>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b78      	ldr	r3, [pc, #480]	; (80017dc <MX_GPIO_Init+0x208>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	4b74      	ldr	r3, [pc, #464]	; (80017dc <MX_GPIO_Init+0x208>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a73      	ldr	r2, [pc, #460]	; (80017dc <MX_GPIO_Init+0x208>)
 8001610:	f043 0320 	orr.w	r3, r3, #32
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b71      	ldr	r3, [pc, #452]	; (80017dc <MX_GPIO_Init+0x208>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <MX_GPIO_Init+0x208>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <MX_GPIO_Init+0x208>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <MX_GPIO_Init+0x208>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b66      	ldr	r3, [pc, #408]	; (80017dc <MX_GPIO_Init+0x208>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a65      	ldr	r2, [pc, #404]	; (80017dc <MX_GPIO_Init+0x208>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b63      	ldr	r3, [pc, #396]	; (80017dc <MX_GPIO_Init+0x208>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <MX_GPIO_Init+0x208>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a5e      	ldr	r2, [pc, #376]	; (80017dc <MX_GPIO_Init+0x208>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <MX_GPIO_Init+0x208>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b58      	ldr	r3, [pc, #352]	; (80017dc <MX_GPIO_Init+0x208>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a57      	ldr	r2, [pc, #348]	; (80017dc <MX_GPIO_Init+0x208>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b55      	ldr	r3, [pc, #340]	; (80017dc <MX_GPIO_Init+0x208>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <MX_GPIO_Init+0x208>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a50      	ldr	r2, [pc, #320]	; (80017dc <MX_GPIO_Init+0x208>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <MX_GPIO_Init+0x208>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <MX_GPIO_Init+0x208>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a49      	ldr	r2, [pc, #292]	; (80017dc <MX_GPIO_Init+0x208>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <MX_GPIO_Init+0x208>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2116      	movs	r1, #22
 80016ce:	4844      	ldr	r0, [pc, #272]	; (80017e0 <MX_GPIO_Init+0x20c>)
 80016d0:	f001 fb42 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	4842      	ldr	r0, [pc, #264]	; (80017e4 <MX_GPIO_Init+0x210>)
 80016da:	f001 fb3d 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80016e4:	4840      	ldr	r0, [pc, #256]	; (80017e8 <MX_GPIO_Init+0x214>)
 80016e6:	f001 fb37 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80016f0:	483e      	ldr	r0, [pc, #248]	; (80017ec <MX_GPIO_Init+0x218>)
 80016f2:	f001 fb31 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80016f6:	2316      	movs	r3, #22
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	4834      	ldr	r0, [pc, #208]	; (80017e0 <MX_GPIO_Init+0x20c>)
 800170e:	f001 f977 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001712:	f248 0307 	movw	r3, #32775	; 0x8007
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001718:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	482e      	ldr	r0, [pc, #184]	; (80017e4 <MX_GPIO_Init+0x210>)
 800172a:	f001 f969 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4827      	ldr	r0, [pc, #156]	; (80017e4 <MX_GPIO_Init+0x210>)
 8001746:	f001 f95b 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800174a:	2320      	movs	r3, #32
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800174e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4820      	ldr	r0, [pc, #128]	; (80017e0 <MX_GPIO_Init+0x20c>)
 8001760:	f001 f94e 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001764:	2304      	movs	r3, #4
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <MX_GPIO_Init+0x21c>)
 8001778:	f001 f942 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4815      	ldr	r0, [pc, #84]	; (80017e8 <MX_GPIO_Init+0x214>)
 8001792:	f001 f935 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001796:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <MX_GPIO_Init+0x214>)
 80017b0:	f001 f926 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80017b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <MX_GPIO_Init+0x218>)
 80017ce:	f001 f917 	bl	8002a00 <HAL_GPIO_Init>

}
 80017d2:	bf00      	nop
 80017d4:	3738      	adds	r7, #56	; 0x38
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40020400 	.word	0x40020400

080017f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001806:	f000 fdcd 	bl	80023a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40001000 	.word	0x40001000

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_MspInit+0x54>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_MspInit+0x54>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x54>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_MspInit+0x54>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_MspInit+0x54>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_MspInit+0x54>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	210f      	movs	r1, #15
 8001866:	f06f 0001 	mvn.w	r0, #1
 800186a:	f000 fe97 	bl	800259c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_CRC_MspInit+0x3c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10d      	bne.n	80018aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_CRC_MspInit+0x40>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_CRC_MspInit+0x40>)
 8001898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_CRC_MspInit+0x40>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023000 	.word	0x40023000
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_DMA2D_MspInit+0x48>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d115      	bne.n	80018fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_DMA2D_MspInit+0x4c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_DMA2D_MspInit+0x4c>)
 80018dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_DMA2D_MspInit+0x4c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2105      	movs	r1, #5
 80018f2:	205a      	movs	r0, #90	; 0x5a
 80018f4:	f000 fe52 	bl	800259c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80018f8:	205a      	movs	r0, #90	; 0x5a
 80018fa:	f000 fe6b 	bl	80025d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	4002b000 	.word	0x4002b000
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a29      	ldr	r2, [pc, #164]	; (80019d4 <HAL_I2C_MspInit+0xc4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d14b      	bne.n	80019ca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800196a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800197c:	2304      	movs	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <HAL_I2C_MspInit+0xcc>)
 8001988:	f001 f83a 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001992:	2312      	movs	r3, #18
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001996:	2301      	movs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800199e:	2304      	movs	r3, #4
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <HAL_I2C_MspInit+0xd0>)
 80019aa:	f001 f829 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 80019b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_I2C_MspInit+0xc8>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40005c00 	.word	0x40005c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b09a      	sub	sp, #104	; 0x68
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	2230      	movs	r2, #48	; 0x30
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 ff49 	bl	800889c <memset>
  if(hltdc->Instance==LTDC)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a85      	ldr	r2, [pc, #532]	; (8001c24 <HAL_LTDC_MspInit+0x240>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f040 8102 	bne.w	8001c1a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a16:	2308      	movs	r3, #8
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001a1a:	2332      	movs	r3, #50	; 0x32
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fce4 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001a36:	f7ff feef 	bl	8001818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b77      	ldr	r3, [pc, #476]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a72      	ldr	r2, [pc, #456]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a6b      	ldr	r2, [pc, #428]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a64      	ldr	r2, [pc, #400]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_LTDC_MspInit+0x244>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b10:	230e      	movs	r3, #14
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4844      	ldr	r0, [pc, #272]	; (8001c2c <HAL_LTDC_MspInit+0x248>)
 8001b1c:	f000 ff70 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001b20:	f641 0358 	movw	r3, #6232	; 0x1858
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b32:	230e      	movs	r3, #14
 8001b34:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	483c      	ldr	r0, [pc, #240]	; (8001c30 <HAL_LTDC_MspInit+0x24c>)
 8001b3e:	f000 ff5f 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b42:	2303      	movs	r3, #3
 8001b44:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b52:	2309      	movs	r3, #9
 8001b54:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4835      	ldr	r0, [pc, #212]	; (8001c34 <HAL_LTDC_MspInit+0x250>)
 8001b5e:	f000 ff4f 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b62:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b74:	230e      	movs	r3, #14
 8001b76:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482d      	ldr	r0, [pc, #180]	; (8001c34 <HAL_LTDC_MspInit+0x250>)
 8001b80:	f000 ff3e 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b84:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001b88:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b96:	230e      	movs	r3, #14
 8001b98:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4825      	ldr	r0, [pc, #148]	; (8001c38 <HAL_LTDC_MspInit+0x254>)
 8001ba2:	f000 ff2d 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001ba6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001baa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bb8:	230e      	movs	r3, #14
 8001bba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481e      	ldr	r0, [pc, #120]	; (8001c3c <HAL_LTDC_MspInit+0x258>)
 8001bc4:	f000 ff1c 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001bc8:	2348      	movs	r3, #72	; 0x48
 8001bca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bd8:	230e      	movs	r3, #14
 8001bda:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001be0:	4619      	mov	r1, r3
 8001be2:	4817      	ldr	r0, [pc, #92]	; (8001c40 <HAL_LTDC_MspInit+0x25c>)
 8001be4:	f000 ff0c 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001be8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bfa:	2309      	movs	r3, #9
 8001bfc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c02:	4619      	mov	r1, r3
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <HAL_LTDC_MspInit+0x254>)
 8001c06:	f000 fefb 	bl	8002a00 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	2058      	movs	r0, #88	; 0x58
 8001c10:	f000 fcc4 	bl	800259c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c14:	2058      	movs	r0, #88	; 0x58
 8001c16:	f000 fcdd 	bl	80025d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3768      	adds	r7, #104	; 0x68
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40016800 	.word	0x40016800
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40021800 	.word	0x40021800
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020c00 	.word	0x40020c00

08001c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_SPI_MspInit+0x84>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d12c      	bne.n	8001cc0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_SPI_MspInit+0x8c>)
 8001cbc:	f000 fea0 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40015000 	.word	0x40015000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40021400 	.word	0x40021400

08001cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d10d      	bne.n	8001d02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_TIM_Base_MspInit+0x40>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_TIM_Base_MspInit+0x40>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_TIM_Base_MspInit+0x40>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_UART_MspInit+0x84>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12c      	bne.n	8001d94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_UART_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d84:	2307      	movs	r3, #7
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <HAL_UART_MspInit+0x8c>)
 8001d90:	f000 fe36 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020000 	.word	0x40020000

08001da8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_FMC_MspInit+0x104>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d16f      	bne.n	8001ea4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_FMC_MspInit+0x104>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_FMC_MspInit+0x108>)
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <HAL_FMC_MspInit+0x108>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_FMC_MspInit+0x108>)
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001de6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001dea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	482c      	ldr	r0, [pc, #176]	; (8001eb4 <HAL_FMC_MspInit+0x10c>)
 8001e02:	f000 fdfd 	bl	8002a00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e06:	2301      	movs	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e16:	230c      	movs	r3, #12
 8001e18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4826      	ldr	r0, [pc, #152]	; (8001eb8 <HAL_FMC_MspInit+0x110>)
 8001e20:	f000 fdee 	bl	8002a00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001e24:	f248 1333 	movw	r3, #33075	; 0x8133
 8001e28:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e36:	230c      	movs	r3, #12
 8001e38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481f      	ldr	r0, [pc, #124]	; (8001ebc <HAL_FMC_MspInit+0x114>)
 8001e40:	f000 fdde 	bl	8002a00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001e44:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e48:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e56:	230c      	movs	r3, #12
 8001e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <HAL_FMC_MspInit+0x118>)
 8001e60:	f000 fdce 	bl	8002a00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001e64:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e68:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e76:	230c      	movs	r3, #12
 8001e78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <HAL_FMC_MspInit+0x11c>)
 8001e80:	f000 fdbe 	bl	8002a00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001e84:	2360      	movs	r3, #96	; 0x60
 8001e86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e94:	230c      	movs	r3, #12
 8001e96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <HAL_FMC_MspInit+0x120>)
 8001e9e:	f000 fdaf 	bl	8002a00 <HAL_GPIO_Init>
 8001ea2:	e000      	b.n	8001ea6 <HAL_FMC_MspInit+0xfe>
    return;
 8001ea4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200003fc 	.word	0x200003fc
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ed4:	f7ff ff68 	bl	8001da8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	2036      	movs	r0, #54	; 0x36
 8001ef6:	f000 fb51 	bl	800259c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001efa:	2036      	movs	r0, #54	; 0x36
 8001efc:	f000 fb6a 	bl	80025d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f0a:	f043 0310 	orr.w	r3, r3, #16
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fa34 	bl	8005394 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f2c:	f003 fa0a 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_InitTick+0xa8>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	3b01      	subs	r3, #1
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_InitTick+0xac>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_InitTick+0xb0>)
 8001f48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_InitTick+0xac>)
 8001f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_InitTick+0xac>)
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_InitTick+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_InitTick+0xac>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f64:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_InitTick+0xac>)
 8001f66:	f003 fcc4 	bl	80058f2 <HAL_TIM_Base_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d104      	bne.n	8001f7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <HAL_InitTick+0xac>)
 8001f72:	f003 fd0d 	bl	8005990 <HAL_TIM_Base_Start_IT>
 8001f76:	4603      	mov	r3, r0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	431bde83 	.word	0x431bde83
 8001f8c:	20000400 	.word	0x20000400
 8001f90:	40001000 	.word	0x40001000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM6_DAC_IRQHandler+0x10>)
 8001fc6:	f003 fd53 	bl	8005a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000400 	.word	0x20000400

08001fd4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <OTG_HS_IRQHandler+0x10>)
 8001fda:	f000 fef0 	bl	8002dbe <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000560 	.word	0x20000560

08001fe8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <LTDC_IRQHandler+0x10>)
 8001fee:	f002 faa1 	bl	8004534 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000023c 	.word	0x2000023c

08001ffc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA2D_IRQHandler+0x10>)
 8002002:	f000 fb5a 	bl	80026ba <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200001a8 	.word	0x200001a8

08002010 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002022:	f7fe fffd 	bl	8001020 <__io_getchar>
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
	}

return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffc3 	bl	8000ff0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
	}
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f006 fa5a 	bl	80085d4 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20030000 	.word	0x20030000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000448 	.word	0x20000448
 8002154:	20000870 	.word	0x20000870

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002198:	4c0b      	ldr	r4, [pc, #44]	; (80021c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a6:	f7ff ffd7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f006 fb3d 	bl	8008828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7fe ff4f 	bl	8001050 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021c0:	0800a0c0 	.word	0x0800a0c0
  ldr r2, =_sbss
 80021c4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80021c8:	20000870 	.word	0x20000870

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>

080021ce <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
 80021e0:	f7ff fb1a 	bl	8001818 <Error_Handler>
 80021e4:	e7fe      	b.n	80021e4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e007      	b.n	80021fc <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	2100      	movs	r1, #0
 80021f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3301      	adds	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d9f4      	bls.n	80021ec <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	721a      	strb	r2, [r3, #8]
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800221e:	b672      	cpsid	i
}
 8002220:	bf00      	nop
 8002222:	f7ff faf9 	bl	8001818 <Error_Handler>
 8002226:	e7fe      	b.n	8002226 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7a1b      	ldrb	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d904      	bls.n	800223a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
}
 8002232:	bf00      	nop
 8002234:	f7ff faf0 	bl	8001818 <Error_Handler>
 8002238:	e7fe      	b.n	8002238 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7a1b      	ldrb	r3, [r3, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	b2d1      	uxtb	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7211      	strb	r1, [r2, #8]
 8002246:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002248:	f3ef 8211 	mrs	r2, BASEPRI
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	60fa      	str	r2, [r7, #12]
 800225e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800227e:	b672      	cpsid	i
}
 8002280:	bf00      	nop
 8002282:	f7ff fac9 	bl	8001818 <Error_Handler>
 8002286:	e7fe      	b.n	8002286 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7a1b      	ldrb	r3, [r3, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7a1b      	ldrb	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d904      	bls.n	80022a6 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
 80022a0:	f7ff faba 	bl	8001818 <Error_Handler>
 80022a4:	e7fe      	b.n	80022a4 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022ba:	bf00      	nop
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80022d2:	f006 f97f 	bl	80085d4 <__errno>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2216      	movs	r2, #22
 80022da:	601a      	str	r2, [r3, #0]
    return;
 80022dc:	e015      	b.n	800230a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80022de:	200c      	movs	r0, #12
 80022e0:	f006 fac6 	bl	8008870 <malloc>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff68 	bl	80021ce <stm32_lock_init>
    return;
 80022fe:	e004      	b.n	800230a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002304:	f7ff fa88 	bl	8001818 <Error_Handler>
 8002308:	e7fe      	b.n	8002308 <__retarget_lock_init_recursive+0x44>
}
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800231e:	b672      	cpsid	i
}
 8002320:	bf00      	nop
 8002322:	f7ff fa79 	bl	8001818 <Error_Handler>
 8002326:	e7fe      	b.n	8002326 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff70 	bl	8002210 <stm32_lock_acquire>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d104      	bne.n	8002350 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002346:	b672      	cpsid	i
}
 8002348:	bf00      	nop
 800234a:	f7ff fa65 	bl	8001818 <Error_Handler>
 800234e:	e7fe      	b.n	800234e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff8c 	bl	8002270 <stm32_lock_release>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <HAL_Init+0x40>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_Init+0x40>)
 8002376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_Init+0x40>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 f8fc 	bl	8002586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff fda6 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fa46 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x20>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_IncTick+0x24>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_IncTick+0x24>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000010 	.word	0x20000010
 80023c8:	20000470 	.word	0x20000470

080023cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_GetTick+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000470 	.word	0x20000470

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff ffee 	bl	80023cc <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fc:	d005      	beq.n	800240a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_Delay+0x44>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240a:	bf00      	nop
 800240c:	f7ff ffde 	bl	80023cc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8f7      	bhi.n	800240c <HAL_Delay+0x28>
  {
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000010 	.word	0x20000010

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff4c 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ae:	f7ff ff61 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f7ff ffb1 	bl	8002520 <NVIC_EncodePriority>
 80025be:	4602      	mov	r2, r0
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff80 	bl	80024cc <__NVIC_SetPriority>
}
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff54 	bl	8002490 <__NVIC_EnableIRQ>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00e      	b.n	8002620 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	795b      	ldrb	r3, [r3, #5]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff f932 	bl	800187c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e03b      	b.n	80026b2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff f936 	bl	80018c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	f023 0107 	bic.w	r1, r3, #7
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002692:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d1      	ldr	r1, [r2, #12]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	430b      	orrs	r3, r1
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d026      	beq.n	800272a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d021      	beq.n	800272a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d026      	beq.n	8002782 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d021      	beq.n	8002782 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800274c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d026      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	2b00      	cmp	r3, #0
 8002794:	d021      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2208      	movs	r2, #8
 80027ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2204      	movs	r2, #4
 8002804:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f853 	bl	80028b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d024      	beq.n	8002860 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2202      	movs	r2, #2
 8002836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01f      	beq.n	80028aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01a      	beq.n	80028aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002882:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2210      	movs	r2, #16
 800288a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f80e 	bl	80028c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_DMA2D_ConfigLayer+0x20>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e079      	b.n	80029f0 <HAL_DMA2D_ConfigLayer+0x114>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	3318      	adds	r3, #24
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002926:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_DMA2D_ConfigLayer+0x120>)
 8002928:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b0a      	cmp	r3, #10
 8002930:	d003      	beq.n	800293a <HAL_DMA2D_ConfigLayer+0x5e>
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b09      	cmp	r3, #9
 8002938:	d107      	bne.n	800294a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e005      	b.n	8002956 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d120      	bne.n	800299e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	ea02 0103 	and.w	r1, r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	430a      	orrs	r2, r1
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b0a      	cmp	r3, #10
 8002984:	d003      	beq.n	800298e <HAL_DMA2D_ConfigLayer+0xb2>
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b09      	cmp	r3, #9
 800298c:	d127      	bne.n	80029de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
 800299c:	e01f      	b.n	80029de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	ea02 0103 	and.w	r1, r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b0a      	cmp	r3, #10
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d106      	bne.n	80029de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80029dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	ff03000f 	.word	0xff03000f

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e177      	b.n	8002d0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8166 	bne.w	8002d06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80c0 	beq.w	8002d06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_GPIO_Init+0x32c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d037      	beq.n	8002c3e <HAL_GPIO_Init+0x23e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <HAL_GPIO_Init+0x23a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x334>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <HAL_GPIO_Init+0x236>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <HAL_GPIO_Init+0x338>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d025      	beq.n	8002c32 <HAL_GPIO_Init+0x232>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x33c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <HAL_GPIO_Init+0x22e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a53      	ldr	r2, [pc, #332]	; (8002d40 <HAL_GPIO_Init+0x340>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x22a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x344>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_GPIO_Init+0x348>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x34c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x350>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x21a>
 8002c16:	2309      	movs	r3, #9
 8002c18:	e012      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	e010      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c22:	2307      	movs	r3, #7
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae84 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40022400 	.word	0x40022400
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d9c:	887a      	ldrh	r2, [r7, #2]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 f828 	bl	8006e2a <USB_GetMode>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 80f6 	bne.w	8002fce <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 f80c 	bl	8006e04 <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80ec 	beq.w	8002fcc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 f803 	bl	8006e04 <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e08:	d104      	bne.n	8002e14 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e12:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fff3 	bl	8006e04 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e28:	d104      	bne.n	8002e34 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e32:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 ffe3 	bl	8006e04 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e48:	d104      	bne.n	8002e54 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e52:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 ffd3 	bl	8006e04 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d103      	bne.n	8002e70 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 ffc5 	bl	8006e04 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e84:	d11c      	bne.n	8002ec0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e8e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	6938      	ldr	r0, [r7, #16]
 8002ea4:	f003 fef2 	bl	8006c8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ea8:	6938      	ldr	r0, [r7, #16]
 8002eaa:	f003 ff23 	bl	8006cf4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 ffc6 	bl	8006e46 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f005 fb02 	bl	80084c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 ff9d 	bl	8006e04 <USB_ReadInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed4:	d102      	bne.n	8002edc <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f001 f829 	bl	8003f2e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 ff8f 	bl	8006e04 <USB_ReadInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d106      	bne.n	8002efe <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f005 facb 	bl	800848c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2208      	movs	r2, #8
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 ff7e 	bl	8006e04 <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d101      	bne.n	8002f16 <HAL_HCD_IRQHandler+0x158>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_HCD_IRQHandler+0x15a>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d012      	beq.n	8002f42 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 ff2c 	bl	8003d8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0210 	orr.w	r2, r2, #16
 8002f40:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 ff5c 	bl	8006e04 <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f56:	d13a      	bne.n	8002fce <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 ffac 	bl	8006eba <USB_HC_ReadInterrupt>
 8002f62:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e025      	b.n	8002fb6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d018      	beq.n	8002fb0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f94:	d106      	bne.n	8002fa4 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f836 	bl	800300e <HCD_HC_IN_IRQHandler>
 8002fa2:	e005      	b.n	8002fb0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb84 	bl	80036b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3d4      	bcc.n	8002f6a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc8:	615a      	str	r2, [r3, #20]
 8002fca:	e000      	b.n	8002fce <HAL_HCD_IRQHandler+0x210>
      return;
 8002fcc:	bf00      	nop
    }
  }
}
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_HCD_Stop+0x16>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e00d      	b.n	8003006 <HAL_HCD_Stop+0x32>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 f86c 	bl	80070d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d11a      	bne.n	8003074 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2304      	movs	r3, #4
 800304e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3361      	adds	r3, #97	; 0x61
 800305e:	2206      	movs	r2, #6
 8003060:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f003 ff35 	bl	8006edc <USB_HC_Halt>
 8003072:	e0af      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d11b      	bne.n	80030c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3361      	adds	r3, #97	; 0x61
 80030ae:	2207      	movs	r2, #7
 80030b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 ff0d 	bl	8006edc <USB_HC_Halt>
 80030c2:	e087      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d109      	bne.n	80030ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2320      	movs	r3, #32
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e072      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b08      	cmp	r3, #8
 8003102:	d11a      	bne.n	800313a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2308      	movs	r3, #8
 8003114:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3361      	adds	r3, #97	; 0x61
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fed2 	bl	8006edc <USB_HC_Halt>
 8003138:	e04c      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	d11b      	bne.n	800318a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	461a      	mov	r2, r3
 8003160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003164:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	3361      	adds	r3, #97	; 0x61
 8003174:	2208      	movs	r2, #8
 8003176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f003 feaa 	bl	8006edc <USB_HC_Halt>
 8003188:	e024      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b80      	cmp	r3, #128	; 0x80
 800319e:	d119      	bne.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	461a      	mov	r2, r3
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	3361      	adds	r3, #97	; 0x61
 80031c0:	2206      	movs	r2, #6
 80031c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fe84 	bl	8006edc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ea:	d112      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fe70 	bl	8006edc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003210:	e24e      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 80df 	bne.w	80033e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d019      	beq.n	8003266 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3348      	adds	r3, #72	; 0x48
 8003240:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	0159      	lsls	r1, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	440b      	add	r3, r1
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	202c      	movs	r0, #44	; 0x2c
 800325c:	fb00 f303 	mul.w	r3, r0, r3
 8003260:	440b      	add	r3, r1
 8003262:	3350      	adds	r3, #80	; 0x50
 8003264:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3361      	adds	r3, #97	; 0x61
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	333f      	adds	r3, #63	; 0x3f
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d009      	beq.n	80032c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	333f      	adds	r3, #63	; 0x3f
 80032be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d111      	bne.n	80032e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fe04 	bl	8006edc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	461a      	mov	r2, r3
 80032e2:	2310      	movs	r3, #16
 80032e4:	6093      	str	r3, [r2, #8]
 80032e6:	e03a      	b.n	800335e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	333f      	adds	r3, #63	; 0x3f
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d009      	beq.n	8003310 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	333f      	adds	r3, #63	; 0x3f
 800330a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800330c:	2b01      	cmp	r3, #1
 800330e:	d126      	bne.n	800335e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800332e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3360      	adds	r3, #96	; 0x60
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	b2d9      	uxtb	r1, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f303 	mul.w	r3, r0, r3
 8003350:	4413      	add	r3, r2
 8003352:	3360      	adds	r3, #96	; 0x60
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f005 f8c1 	bl	80084e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d12b      	bne.n	80033be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3348      	adds	r3, #72	; 0x48
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	202c      	movs	r0, #44	; 0x2c
 800337c:	fb00 f202 	mul.w	r2, r0, r2
 8003380:	440a      	add	r2, r1
 8003382:	3240      	adds	r2, #64	; 0x40
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	fbb3 f3f2 	udiv	r3, r3, r2
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 818e 	beq.w	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3354      	adds	r3, #84	; 0x54
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2d8      	uxtb	r0, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3354      	adds	r3, #84	; 0x54
 80033b8:	4602      	mov	r2, r0
 80033ba:	701a      	strb	r2, [r3, #0]
}
 80033bc:	e178      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	3354      	adds	r3, #84	; 0x54
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3354      	adds	r3, #84	; 0x54
 80033e2:	4602      	mov	r2, r0
 80033e4:	701a      	strb	r2, [r3, #0]
}
 80033e6:	e163      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f040 80f6 	bne.w	80035ec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3361      	adds	r3, #97	; 0x61
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d109      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3360      	adds	r3, #96	; 0x60
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e0c9      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3361      	adds	r3, #97	; 0x61
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d109      	bne.n	8003450 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3360      	adds	r3, #96	; 0x60
 800344a:	2205      	movs	r2, #5
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e0b5      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3361      	adds	r3, #97	; 0x61
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d009      	beq.n	8003478 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003474:	2b08      	cmp	r3, #8
 8003476:	d150      	bne.n	800351a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	335c      	adds	r3, #92	; 0x5c
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	202c      	movs	r0, #44	; 0x2c
 8003490:	fb00 f303 	mul.w	r3, r0, r3
 8003494:	440b      	add	r3, r1
 8003496:	335c      	adds	r3, #92	; 0x5c
 8003498:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	335c      	adds	r3, #92	; 0x5c
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d912      	bls.n	80034d4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	335c      	adds	r3, #92	; 0x5c
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034d2:	e073      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3360      	adds	r3, #96	; 0x60
 80034e2:	2202      	movs	r2, #2
 80034e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003504:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003518:	e050      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3361      	adds	r3, #97	; 0x61
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d122      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3360      	adds	r3, #96	; 0x60
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003556:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e023      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3361      	adds	r3, #97	; 0x61
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b07      	cmp	r3, #7
 8003586:	d119      	bne.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	335c      	adds	r3, #92	; 0x5c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	202c      	movs	r0, #44	; 0x2c
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	335c      	adds	r3, #92	; 0x5c
 80035a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3360      	adds	r3, #96	; 0x60
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	461a      	mov	r2, r3
 80035ca:	2302      	movs	r3, #2
 80035cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	b2d9      	uxtb	r1, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	202c      	movs	r0, #44	; 0x2c
 80035d8:	fb00 f303 	mul.w	r3, r0, r3
 80035dc:	4413      	add	r3, r2
 80035de:	3360      	adds	r3, #96	; 0x60
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f004 ff7b 	bl	80084e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ea:	e061      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d156      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d111      	bne.n	800363a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 fc52 	bl	8006edc <USB_HC_Halt>
 8003638:	e031      	b.n	800369e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	333f      	adds	r3, #63	; 0x3f
 800365c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11d      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	335c      	adds	r3, #92	; 0x5c
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d110      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3361      	adds	r3, #97	; 0x61
 800368a:	2203      	movs	r2, #3
 800368c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f003 fc1f 	bl	8006edc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	2310      	movs	r3, #16
 80036ae:	6093      	str	r3, [r2, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11a      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2304      	movs	r3, #4
 80036f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3361      	adds	r3, #97	; 0x61
 8003708:	2206      	movs	r2, #6
 800370a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f003 fbe0 	bl	8006edc <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800371c:	e331      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b20      	cmp	r3, #32
 8003732:	d12e      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	2320      	movs	r3, #32
 8003744:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	333d      	adds	r3, #61	; 0x3d
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	f040 8313 	bne.w	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	333d      	adds	r3, #61	; 0x3d
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3360      	adds	r3, #96	; 0x60
 800377c:	2202      	movs	r2, #2
 800377e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f003 fba6 	bl	8006edc <USB_HC_Halt>
}
 8003790:	e2f7      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a8:	d112      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fb87 	bl	8006edc <USB_HC_Halt>
}
 80037ce:	e2d8      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d140      	bne.n	8003868 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d111      	bne.n	8003832 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	333d      	adds	r3, #61	; 0x3d
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	2340      	movs	r3, #64	; 0x40
 8003830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	461a      	mov	r2, r3
 8003840:	2301      	movs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3361      	adds	r3, #97	; 0x61
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fb3b 	bl	8006edc <USB_HC_Halt>
}
 8003866:	e28c      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d12c      	bne.n	80038d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3361      	adds	r3, #97	; 0x61
 800388c:	2204      	movs	r2, #4
 800388e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	333d      	adds	r3, #61	; 0x3d
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	335c      	adds	r3, #92	; 0x5c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 fb0c 	bl	8006edc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2340      	movs	r3, #64	; 0x40
 80038d4:	6093      	str	r3, [r2, #8]
}
 80038d6:	e254      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11a      	bne.n	8003924 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	2308      	movs	r3, #8
 80038fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3361      	adds	r3, #97	; 0x61
 800390e:	2205      	movs	r2, #5
 8003910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f003 fadd 	bl	8006edc <USB_HC_Halt>
}
 8003922:	e22e      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d140      	bne.n	80039bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	335c      	adds	r3, #92	; 0x5c
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3361      	adds	r3, #97	; 0x61
 800395a:	2203      	movs	r2, #3
 800395c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	333d      	adds	r3, #61	; 0x3d
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d112      	bne.n	8003998 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333c      	adds	r3, #60	; 0x3c
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	333d      	adds	r3, #61	; 0x3d
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 fa9a 	bl	8006edc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b4:	461a      	mov	r2, r3
 80039b6:	2310      	movs	r3, #16
 80039b8:	6093      	str	r3, [r2, #8]
}
 80039ba:	e1e2      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d164      	bne.n	8003a9c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d111      	bne.n	80039fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3361      	adds	r3, #97	; 0x61
 80039e8:	2206      	movs	r2, #6
 80039ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fa70 	bl	8006edc <USB_HC_Halt>
 80039fc:	e044      	b.n	8003a88 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	335c      	adds	r3, #92	; 0x5c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	202c      	movs	r0, #44	; 0x2c
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	335c      	adds	r3, #92	; 0x5c
 8003a1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	335c      	adds	r3, #92	; 0x5c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d920      	bls.n	8003a76 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	335c      	adds	r3, #92	; 0x5c
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	b2d9      	uxtb	r1, r3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	202c      	movs	r0, #44	; 0x2c
 8003a62:	fb00 f303 	mul.w	r3, r0, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3360      	adds	r3, #96	; 0x60
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f004 fd36 	bl	80084e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a74:	e008      	b.n	8003a88 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3360      	adds	r3, #96	; 0x60
 8003a84:	2202      	movs	r2, #2
 8003a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	461a      	mov	r2, r3
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	6093      	str	r3, [r2, #8]
}
 8003a9a:	e172      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d11b      	bne.n	8003aec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3361      	adds	r3, #97	; 0x61
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fa03 	bl	8006edc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae8:	6093      	str	r3, [r2, #8]
}
 8003aea:	e14a      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	f040 813f 	bne.w	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d17d      	bne.n	8003c14 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2201      	movs	r2, #1
 8003b28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	333f      	adds	r3, #63	; 0x3f
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d00a      	beq.n	8003b54 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	333f      	adds	r3, #63	; 0x3f
 8003b4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	f040 8100 	bne.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	3355      	adds	r3, #85	; 0x55
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f083 0301 	eor.w	r3, r3, #1
 8003b70:	b2d8      	uxtb	r0, r3
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3355      	adds	r3, #85	; 0x55
 8003b80:	4602      	mov	r2, r0
 8003b82:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 80e3 	bne.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	334c      	adds	r3, #76	; 0x4c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80d8 	beq.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	334c      	adds	r3, #76	; 0x4c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	202c      	movs	r0, #44	; 0x2c
 8003bba:	fb00 f202 	mul.w	r2, r0, r2
 8003bbe:	440a      	add	r2, r1
 8003bc0:	3240      	adds	r2, #64	; 0x40
 8003bc2:	8812      	ldrh	r2, [r2, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	202c      	movs	r0, #44	; 0x2c
 8003bce:	fb00 f202 	mul.w	r2, r0, r2
 8003bd2:	440a      	add	r2, r1
 8003bd4:	3240      	adds	r2, #64	; 0x40
 8003bd6:	8812      	ldrh	r2, [r2, #0]
 8003bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80b5 	beq.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3355      	adds	r3, #85	; 0x55
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	f083 0301 	eor.w	r3, r3, #1
 8003bfe:	b2d8      	uxtb	r0, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3355      	adds	r3, #85	; 0x55
 8003c0e:	4602      	mov	r2, r0
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e09f      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3361      	adds	r3, #97	; 0x61
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d109      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3360      	adds	r3, #96	; 0x60
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e08b      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3361      	adds	r3, #97	; 0x61
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d109      	bne.n	8003c64 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	2202      	movs	r2, #2
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e077      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3361      	adds	r3, #97	; 0x61
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d109      	bne.n	8003c8c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	2205      	movs	r2, #5
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e063      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3361      	adds	r3, #97	; 0x61
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d009      	beq.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3361      	adds	r3, #97	; 0x61
 8003cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d14f      	bne.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f303 	mul.w	r3, r0, r3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335c      	adds	r3, #92	; 0x5c
 8003cd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d912      	bls.n	8003d10 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3360      	adds	r3, #96	; 0x60
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e021      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3360      	adds	r3, #96	; 0x60
 8003d1e:	2202      	movs	r2, #2
 8003d20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	461a      	mov	r2, r3
 8003d62:	2302      	movs	r3, #2
 8003d64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	b2d9      	uxtb	r1, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	202c      	movs	r0, #44	; 0x2c
 8003d70:	fb00 f303 	mul.w	r3, r0, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3360      	adds	r3, #96	; 0x60
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f004 fbaf 	bl	80084e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d82:	bf00      	nop
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08a      	sub	sp, #40	; 0x28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	0c5b      	lsrs	r3, r3, #17
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d004      	beq.n	8003dd0 <HCD_RXQLVL_IRQHandler+0x46>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	f000 80a9 	beq.w	8003f20 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dce:	e0aa      	b.n	8003f26 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a6 	beq.w	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	212c      	movs	r1, #44	; 0x2c
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	3344      	adds	r3, #68	; 0x44
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 809b 	beq.w	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3350      	adds	r3, #80	; 0x50
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	441a      	add	r2, r3
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	202c      	movs	r0, #44	; 0x2c
 8003e08:	fb00 f303 	mul.w	r3, r0, r3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	334c      	adds	r3, #76	; 0x4c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d87a      	bhi.n	8003f0c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	212c      	movs	r1, #44	; 0x2c
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	3344      	adds	r3, #68	; 0x44
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f002 ff90 	bl	8006d54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3344      	adds	r3, #68	; 0x44
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	441a      	add	r2, r3
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	202c      	movs	r0, #44	; 0x2c
 8003e4e:	fb00 f303 	mul.w	r3, r0, r3
 8003e52:	440b      	add	r3, r1
 8003e54:	3344      	adds	r3, #68	; 0x44
 8003e56:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3350      	adds	r3, #80	; 0x50
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	202c      	movs	r0, #44	; 0x2c
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	440b      	add	r3, r1
 8003e78:	3350      	adds	r3, #80	; 0x50
 8003e7a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	0cdb      	lsrs	r3, r3, #19
 8003e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e90:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3340      	adds	r3, #64	; 0x40
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d13c      	bne.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d039      	beq.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ec6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ece:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3354      	adds	r3, #84	; 0x54
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f083 0301 	eor.w	r3, r3, #1
 8003ef6:	b2d8      	uxtb	r0, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3354      	adds	r3, #84	; 0x54
 8003f06:	4602      	mov	r2, r0
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e00b      	b.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3360      	adds	r3, #96	; 0x60
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	701a      	strb	r2, [r3, #0]
      break;
 8003f1e:	e001      	b.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f24:	bf00      	nop
  }
}
 8003f26:	bf00      	nop
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f5a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d10b      	bne.n	8003f7e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d102      	bne.n	8003f76 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f004 fa99 	bl	80084a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d132      	bne.n	8003fee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d126      	bne.n	8003fe8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d113      	bne.n	8003fca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fac:	d106      	bne.n	8003fbc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 ff46 	bl	8006e46 <USB_InitFSLSPClkSel>
 8003fba:	e011      	b.n	8003fe0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 ff3f 	bl	8006e46 <USB_InitFSLSPClkSel>
 8003fc8:	e00a      	b.n	8003fe0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d106      	bne.n	8003fe0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fde:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f004 fa8f 	bl	8008504 <HAL_HCD_PortEnabled_Callback>
 8003fe6:	e002      	b.n	8003fee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f004 fa99 	bl	8008520 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d103      	bne.n	8004000 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f043 0320 	orr.w	r3, r3, #32
 8003ffe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e12b      	b.n	800427e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fc68 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	; 0x24
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004078:	f001 f964 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800407c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a81      	ldr	r2, [pc, #516]	; (8004288 <HAL_I2C_Init+0x274>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d807      	bhi.n	8004098 <HAL_I2C_Init+0x84>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a80      	ldr	r2, [pc, #512]	; (800428c <HAL_I2C_Init+0x278>)
 800408c:	4293      	cmp	r3, r2
 800408e:	bf94      	ite	ls
 8004090:	2301      	movls	r3, #1
 8004092:	2300      	movhi	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e006      	b.n	80040a6 <HAL_I2C_Init+0x92>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a7d      	ldr	r2, [pc, #500]	; (8004290 <HAL_I2C_Init+0x27c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0e7      	b.n	800427e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a78      	ldr	r2, [pc, #480]	; (8004294 <HAL_I2C_Init+0x280>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0c9b      	lsrs	r3, r3, #18
 80040b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a6a      	ldr	r2, [pc, #424]	; (8004288 <HAL_I2C_Init+0x274>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d802      	bhi.n	80040e8 <HAL_I2C_Init+0xd4>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3301      	adds	r3, #1
 80040e6:	e009      	b.n	80040fc <HAL_I2C_Init+0xe8>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	4a69      	ldr	r2, [pc, #420]	; (8004298 <HAL_I2C_Init+0x284>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	099b      	lsrs	r3, r3, #6
 80040fa:	3301      	adds	r3, #1
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	430b      	orrs	r3, r1
 8004102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800410e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	495c      	ldr	r1, [pc, #368]	; (8004288 <HAL_I2C_Init+0x274>)
 8004118:	428b      	cmp	r3, r1
 800411a:	d819      	bhi.n	8004150 <HAL_I2C_Init+0x13c>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1e59      	subs	r1, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fbb1 f3f3 	udiv	r3, r1, r3
 800412a:	1c59      	adds	r1, r3, #1
 800412c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004130:	400b      	ands	r3, r1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_I2C_Init+0x138>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e59      	subs	r1, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fbb1 f3f3 	udiv	r3, r1, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414a:	e051      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 800414c:	2304      	movs	r3, #4
 800414e:	e04f      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d111      	bne.n	800417c <HAL_I2C_Init+0x168>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1e58      	subs	r0, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	440b      	add	r3, r1
 8004166:	fbb0 f3f3 	udiv	r3, r0, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e012      	b.n	80041a2 <HAL_I2C_Init+0x18e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1e58      	subs	r0, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	0099      	lsls	r1, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_Init+0x196>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e022      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <HAL_I2C_Init+0x1bc>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1e58      	subs	r0, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	440b      	add	r3, r1
 80041c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ce:	e00f      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1e58      	subs	r0, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	0099      	lsls	r1, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e6:	3301      	adds	r3, #1
 80041e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	6809      	ldr	r1, [r1, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800421e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6911      	ldr	r1, [r2, #16]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68d2      	ldr	r2, [r2, #12]
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	430b      	orrs	r3, r1
 8004232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	000186a0 	.word	0x000186a0
 800428c:	001e847f 	.word	0x001e847f
 8004290:	003d08ff 	.word	0x003d08ff
 8004294:	431bde83 	.word	0x431bde83
 8004298:	10624dd3 	.word	0x10624dd3

0800429c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d129      	bne.n	8004306 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2224      	movs	r2, #36	; 0x24
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0210 	bic.w	r2, r2, #16
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e000      	b.n	8004308 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004306:	2302      	movs	r3, #2
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	d12a      	bne.n	8004384 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	; 0x24
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800434e:	89fb      	ldrh	r3, [r7, #14]
 8004350:	f023 030f 	bic.w	r3, r3, #15
 8004354:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	b29a      	uxth	r2, r3
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	4313      	orrs	r3, r2
 800435e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	89fa      	ldrh	r2, [r7, #14]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0bf      	b.n	8004526 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd fb12 	bl	80019e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80043d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6999      	ldr	r1, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6899      	ldr	r1, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_LTDC_Init+0x19c>)
 8004408:	400b      	ands	r3, r1
 800440a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68d9      	ldr	r1, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <HAL_LTDC_Init+0x19c>)
 8004436:	400b      	ands	r3, r1
 8004438:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68d9      	ldr	r1, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6919      	ldr	r1, [r3, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b33      	ldr	r3, [pc, #204]	; (8004530 <HAL_LTDC_Init+0x19c>)
 8004464:	400b      	ands	r3, r1
 8004466:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6959      	ldr	r1, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <HAL_LTDC_Init+0x19c>)
 8004492:	400b      	ands	r3, r1
 8004494:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6959      	ldr	r1, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0206 	orr.w	r2, r2, #6
 8004502:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	f000f800 	.word	0xf000f800

08004534 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d023      	beq.n	800459e <HAL_LTDC_IRQHandler+0x6a>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01e      	beq.n	800459e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0204 	bic.w	r2, r2, #4
 800456e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2204      	movs	r2, #4
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2204      	movs	r2, #4
 800458c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f86f 	bl	800467c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d023      	beq.n	80045f0 <HAL_LTDC_IRQHandler+0xbc>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01e      	beq.n	80045f0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0202 	bic.w	r2, r2, #2
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2202      	movs	r2, #2
 80045c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045d0:	f043 0202 	orr.w	r2, r3, #2
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f846 	bl	800467c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01b      	beq.n	8004632 <HAL_LTDC_IRQHandler+0xfe>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d016      	beq.n	8004632 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f82f 	bl	8004690 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01b      	beq.n	8004674 <HAL_LTDC_IRQHandler+0x140>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0208 	bic.w	r2, r2, #8
 8004654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f818 	bl	80046a4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046b8:	b5b0      	push	{r4, r5, r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_LTDC_ConfigLayer+0x1a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e02c      	b.n	800472c <HAL_LTDC_ConfigLayer+0x74>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2134      	movs	r1, #52	; 0x34
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4614      	mov	r4, r2
 80046f6:	461d      	mov	r5, r3
 80046f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f811 	bl	8004734 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bdb0      	pop	{r4, r5, r7, pc}

08004734 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004750:	4413      	add	r3, r2
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	01db      	lsls	r3, r3, #7
 8004760:	4413      	add	r3, r2
 8004762:	3384      	adds	r3, #132	; 0x84
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	4611      	mov	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	01d2      	lsls	r2, r2, #7
 8004770:	440a      	add	r2, r1
 8004772:	3284      	adds	r2, #132	; 0x84
 8004774:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004778:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800478a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800478c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	01db      	lsls	r3, r3, #7
 8004798:	440b      	add	r3, r1
 800479a:	3384      	adds	r3, #132	; 0x84
 800479c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b2:	4413      	add	r3, r2
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	01db      	lsls	r3, r3, #7
 80047c2:	4413      	add	r3, r2
 80047c4:	3384      	adds	r3, #132	; 0x84
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	4611      	mov	r1, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	01d2      	lsls	r2, r2, #7
 80047d2:	440a      	add	r2, r1
 80047d4:	3284      	adds	r2, #132	; 0x84
 80047d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80047da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ea:	4413      	add	r3, r2
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	01db      	lsls	r3, r3, #7
 80047f8:	440b      	add	r3, r1
 80047fa:	3384      	adds	r3, #132	; 0x84
 80047fc:	4619      	mov	r1, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4313      	orrs	r3, r2
 8004802:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	01db      	lsls	r3, r3, #7
 800480e:	4413      	add	r3, r2
 8004810:	3384      	adds	r3, #132	; 0x84
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	4611      	mov	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	01d2      	lsls	r2, r2, #7
 800481e:	440a      	add	r2, r1
 8004820:	3284      	adds	r2, #132	; 0x84
 8004822:	f023 0307 	bic.w	r3, r3, #7
 8004826:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	01db      	lsls	r3, r3, #7
 8004832:	4413      	add	r3, r2
 8004834:	3384      	adds	r3, #132	; 0x84
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	4413      	add	r3, r2
 8004866:	3384      	adds	r3, #132	; 0x84
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	4413      	add	r3, r2
 8004876:	3384      	adds	r3, #132	; 0x84
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004884:	461a      	mov	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	431a      	orrs	r2, r3
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	01db      	lsls	r3, r3, #7
 8004898:	440b      	add	r3, r1
 800489a:	3384      	adds	r3, #132	; 0x84
 800489c:	4619      	mov	r1, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	01db      	lsls	r3, r3, #7
 80048ae:	4413      	add	r3, r2
 80048b0:	3384      	adds	r3, #132	; 0x84
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4611      	mov	r1, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	01d2      	lsls	r2, r2, #7
 80048be:	440a      	add	r2, r1
 80048c0:	3284      	adds	r2, #132	; 0x84
 80048c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	01db      	lsls	r3, r3, #7
 80048d2:	4413      	add	r3, r2
 80048d4:	3384      	adds	r3, #132	; 0x84
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	01db      	lsls	r3, r3, #7
 80048e8:	4413      	add	r3, r2
 80048ea:	3384      	adds	r3, #132	; 0x84
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	4611      	mov	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	01d2      	lsls	r2, r2, #7
 80048f8:	440a      	add	r2, r1
 80048fa:	3284      	adds	r2, #132	; 0x84
 80048fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004900:	f023 0307 	bic.w	r3, r3, #7
 8004904:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	6809      	ldr	r1, [r1, #0]
 8004912:	4608      	mov	r0, r1
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	01c9      	lsls	r1, r1, #7
 8004918:	4401      	add	r1, r0
 800491a:	3184      	adds	r1, #132	; 0x84
 800491c:	4313      	orrs	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	4413      	add	r3, r2
 800492c:	3384      	adds	r3, #132	; 0x84
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	01db      	lsls	r3, r3, #7
 800493a:	4413      	add	r3, r2
 800493c:	3384      	adds	r3, #132	; 0x84
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	01db      	lsls	r3, r3, #7
 800494e:	4413      	add	r3, r2
 8004950:	3384      	adds	r3, #132	; 0x84
 8004952:	461a      	mov	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004962:	2304      	movs	r3, #4
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e01b      	b.n	80049a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004970:	2303      	movs	r3, #3
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e014      	b.n	80049a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d00b      	beq.n	8004996 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004982:	2b02      	cmp	r3, #2
 8004984:	d007      	beq.n	8004996 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800498a:	2b03      	cmp	r3, #3
 800498c:	d003      	beq.n	8004996 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004992:	2b07      	cmp	r3, #7
 8004994:	d102      	bne.n	800499c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004996:	2302      	movs	r3, #2
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e001      	b.n	80049a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800499c:	2301      	movs	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	01db      	lsls	r3, r3, #7
 80049aa:	4413      	add	r3, r2
 80049ac:	3384      	adds	r3, #132	; 0x84
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	4611      	mov	r1, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	01d2      	lsls	r2, r2, #7
 80049ba:	440a      	add	r2, r1
 80049bc:	3284      	adds	r2, #132	; 0x84
 80049be:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80049c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1acb      	subs	r3, r1, r3
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	6809      	ldr	r1, [r1, #0]
 80049e6:	4608      	mov	r0, r1
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	01c9      	lsls	r1, r1, #7
 80049ec:	4401      	add	r1, r0
 80049ee:	3184      	adds	r1, #132	; 0x84
 80049f0:	4313      	orrs	r3, r2
 80049f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	01db      	lsls	r3, r3, #7
 80049fe:	4413      	add	r3, r2
 8004a00:	3384      	adds	r3, #132	; 0x84
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	01d2      	lsls	r2, r2, #7
 8004a0e:	440a      	add	r2, r1
 8004a10:	3284      	adds	r2, #132	; 0x84
 8004a12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	01db      	lsls	r3, r3, #7
 8004a26:	4413      	add	r3, r2
 8004a28:	3384      	adds	r3, #132	; 0x84
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3384      	adds	r3, #132	; 0x84
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	4611      	mov	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	01d2      	lsls	r2, r2, #7
 8004a4c:	440a      	add	r2, r1
 8004a4e:	3284      	adds	r2, #132	; 0x84
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6013      	str	r3, [r2, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e267      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d075      	beq.n	8004b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a82:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d00c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8e:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d112      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9a:	4b82      	ldr	r3, [pc, #520]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa6:	d10b      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	4b7e      	ldr	r3, [pc, #504]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d05b      	beq.n	8004b6c <HAL_RCC_OscConfig+0x108>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d157      	bne.n	8004b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e242      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac8:	d106      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x74>
 8004aca:	4b76      	ldr	r3, [pc, #472]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a75      	ldr	r2, [pc, #468]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e01d      	b.n	8004b14 <HAL_RCC_OscConfig+0xb0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x98>
 8004ae2:	4b70      	ldr	r3, [pc, #448]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a6f      	ldr	r2, [pc, #444]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b6d      	ldr	r3, [pc, #436]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6c      	ldr	r2, [pc, #432]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e00b      	b.n	8004b14 <HAL_RCC_OscConfig+0xb0>
 8004afc:	4b69      	ldr	r3, [pc, #420]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d013      	beq.n	8004b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1c:	f7fd fc56 	bl	80023cc <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fd fc52 	bl	80023cc <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e207      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0xc0>
 8004b42:	e014      	b.n	8004b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fd fc42 	bl	80023cc <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4c:	f7fd fc3e 	bl	80023cc <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b64      	cmp	r3, #100	; 0x64
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e1f3      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0xe8>
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d063      	beq.n	8004c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d11c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b92:	4b44      	ldr	r3, [pc, #272]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d116      	bne.n	8004bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x152>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e1c7      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4937      	ldr	r1, [pc, #220]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	e03a      	b.n	8004c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd4:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd fbf7 	bl	80023cc <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be2:	f7fd fbf3 	bl	80023cc <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e1a8      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4925      	ldr	r1, [pc, #148]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	600b      	str	r3, [r1, #0]
 8004c14:	e015      	b.n	8004c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fbd6 	bl	80023cc <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c24:	f7fd fbd2 	bl	80023cc <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e187      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d036      	beq.n	8004cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <HAL_RCC_OscConfig+0x248>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fd fbb6 	bl	80023cc <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c64:	f7fd fbb2 	bl	80023cc <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e167      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_OscConfig+0x240>)
 8004c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x200>
 8004c82:	e01b      	b.n	8004cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCC_OscConfig+0x248>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8a:	f7fd fb9f 	bl	80023cc <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	e00e      	b.n	8004cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c92:	f7fd fb9b 	bl	80023cc <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d907      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e150      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	42470000 	.word	0x42470000
 8004cac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb0:	4b88      	ldr	r3, [pc, #544]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ea      	bne.n	8004c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8097 	beq.w	8004df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cce:	4b81      	ldr	r3, [pc, #516]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10f      	bne.n	8004cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	4b7d      	ldr	r3, [pc, #500]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a7c      	ldr	r2, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cea:	4b7a      	ldr	r3, [pc, #488]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfa:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <HAL_RCC_OscConfig+0x474>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d118      	bne.n	8004d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d06:	4b74      	ldr	r3, [pc, #464]	; (8004ed8 <HAL_RCC_OscConfig+0x474>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a73      	ldr	r2, [pc, #460]	; (8004ed8 <HAL_RCC_OscConfig+0x474>)
 8004d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d12:	f7fd fb5b 	bl	80023cc <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1a:	f7fd fb57 	bl	80023cc <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e10c      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <HAL_RCC_OscConfig+0x474>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2ea>
 8004d40:	4b64      	ldr	r3, [pc, #400]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	4a63      	ldr	r2, [pc, #396]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4c:	e01c      	b.n	8004d88 <HAL_RCC_OscConfig+0x324>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d10c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x30c>
 8004d56:	4b5f      	ldr	r3, [pc, #380]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	4a5e      	ldr	r2, [pc, #376]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	f043 0304 	orr.w	r3, r3, #4
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70
 8004d62:	4b5c      	ldr	r3, [pc, #368]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a5b      	ldr	r2, [pc, #364]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6e:	e00b      	b.n	8004d88 <HAL_RCC_OscConfig+0x324>
 8004d70:	4b58      	ldr	r3, [pc, #352]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4a57      	ldr	r2, [pc, #348]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7c:	4b55      	ldr	r3, [pc, #340]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4a54      	ldr	r2, [pc, #336]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004d82:	f023 0304 	bic.w	r3, r3, #4
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d015      	beq.n	8004dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fd fb1c 	bl	80023cc <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7fd fb18 	bl	80023cc <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e0cb      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dae:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0ee      	beq.n	8004d98 <HAL_RCC_OscConfig+0x334>
 8004dba:	e014      	b.n	8004de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbc:	f7fd fb06 	bl	80023cc <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fd fb02 	bl	80023cc <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0b5      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dda:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ee      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dec:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	4a38      	ldr	r2, [pc, #224]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80a1 	beq.w	8004f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e02:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d05c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d141      	bne.n	8004e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e16:	4b31      	ldr	r3, [pc, #196]	; (8004edc <HAL_RCC_OscConfig+0x478>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fad6 	bl	80023cc <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e24:	f7fd fad2 	bl	80023cc <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e087      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	041b      	lsls	r3, r3, #16
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	491b      	ldr	r1, [pc, #108]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <HAL_RCC_OscConfig+0x478>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fd faab 	bl	80023cc <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fd faa7 	bl	80023cc <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e05c      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x416>
 8004e98:	e054      	b.n	8004f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_RCC_OscConfig+0x478>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fa94 	bl	80023cc <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fd fa90 	bl	80023cc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e045      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x444>
 8004ec6:	e03d      	b.n	8004f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e038      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCC_OscConfig+0x4ec>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d028      	beq.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d121      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d11a      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d111      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800

08004f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0cc      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b68      	ldr	r3, [pc, #416]	; (800510c <HAL_RCC_ClockConfig+0x1b8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d90c      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b65      	ldr	r3, [pc, #404]	; (800510c <HAL_RCC_ClockConfig+0x1b8>)
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7e:	4b63      	ldr	r3, [pc, #396]	; (800510c <HAL_RCC_ClockConfig+0x1b8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0b8      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa8:	4b59      	ldr	r3, [pc, #356]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a58      	ldr	r2, [pc, #352]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc0:	4b53      	ldr	r3, [pc, #332]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a52      	ldr	r2, [pc, #328]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fcc:	4b50      	ldr	r3, [pc, #320]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	494d      	ldr	r1, [pc, #308]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d044      	beq.n	8005074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	4b47      	ldr	r3, [pc, #284]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d119      	bne.n	8005032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e07f      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d003      	beq.n	8005012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800500e:	2b03      	cmp	r3, #3
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	4b3f      	ldr	r3, [pc, #252]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e06f      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005022:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e067      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4934      	ldr	r1, [pc, #208]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005044:	f7fd f9c2 	bl	80023cc <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fd f9be 	bl	80023cc <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e04f      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b2b      	ldr	r3, [pc, #172]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4b25      	ldr	r3, [pc, #148]	; (800510c <HAL_RCC_ClockConfig+0x1b8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d20c      	bcs.n	800509c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b22      	ldr	r3, [pc, #136]	; (800510c <HAL_RCC_ClockConfig+0x1b8>)
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_RCC_ClockConfig+0x1b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e032      	b.n	8005102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a8:	4b19      	ldr	r3, [pc, #100]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4916      	ldr	r1, [pc, #88]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050c6:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	490e      	ldr	r1, [pc, #56]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050da:	f000 f821 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80050de:	4602      	mov	r2, r0
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	490a      	ldr	r1, [pc, #40]	; (8005114 <HAL_RCC_ClockConfig+0x1c0>)
 80050ec:	5ccb      	ldrb	r3, [r1, r3]
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <HAL_RCC_ClockConfig+0x1c8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc fef0 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40023c00 	.word	0x40023c00
 8005110:	40023800 	.word	0x40023800
 8005114:	08009f00 	.word	0x08009f00
 8005118:	20000008 	.word	0x20000008
 800511c:	2000000c 	.word	0x2000000c

08005120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005124:	b094      	sub	sp, #80	; 0x50
 8005126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	647b      	str	r3, [r7, #68]	; 0x44
 800512c:	2300      	movs	r3, #0
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005130:	2300      	movs	r3, #0
 8005132:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005138:	4b79      	ldr	r3, [pc, #484]	; (8005320 <HAL_RCC_GetSysClockFreq+0x200>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 030c 	and.w	r3, r3, #12
 8005140:	2b08      	cmp	r3, #8
 8005142:	d00d      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0x40>
 8005144:	2b08      	cmp	r3, #8
 8005146:	f200 80e1 	bhi.w	800530c <HAL_RCC_GetSysClockFreq+0x1ec>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_RCC_GetSysClockFreq+0x34>
 800514e:	2b04      	cmp	r3, #4
 8005150:	d003      	beq.n	800515a <HAL_RCC_GetSysClockFreq+0x3a>
 8005152:	e0db      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005154:	4b73      	ldr	r3, [pc, #460]	; (8005324 <HAL_RCC_GetSysClockFreq+0x204>)
 8005156:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005158:	e0db      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800515a:	4b73      	ldr	r3, [pc, #460]	; (8005328 <HAL_RCC_GetSysClockFreq+0x208>)
 800515c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800515e:	e0d8      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005160:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_RCC_GetSysClockFreq+0x200>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005168:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800516a:	4b6d      	ldr	r3, [pc, #436]	; (8005320 <HAL_RCC_GetSysClockFreq+0x200>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d063      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005176:	4b6a      	ldr	r3, [pc, #424]	; (8005320 <HAL_RCC_GetSysClockFreq+0x200>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	2200      	movs	r2, #0
 800517e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005180:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
 800518a:	2300      	movs	r3, #0
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005192:	4622      	mov	r2, r4
 8005194:	462b      	mov	r3, r5
 8005196:	f04f 0000 	mov.w	r0, #0
 800519a:	f04f 0100 	mov.w	r1, #0
 800519e:	0159      	lsls	r1, r3, #5
 80051a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a4:	0150      	lsls	r0, r2, #5
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4621      	mov	r1, r4
 80051ac:	1a51      	subs	r1, r2, r1
 80051ae:	6139      	str	r1, [r7, #16]
 80051b0:	4629      	mov	r1, r5
 80051b2:	eb63 0301 	sbc.w	r3, r3, r1
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c4:	4659      	mov	r1, fp
 80051c6:	018b      	lsls	r3, r1, #6
 80051c8:	4651      	mov	r1, sl
 80051ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ce:	4651      	mov	r1, sl
 80051d0:	018a      	lsls	r2, r1, #6
 80051d2:	4651      	mov	r1, sl
 80051d4:	ebb2 0801 	subs.w	r8, r2, r1
 80051d8:	4659      	mov	r1, fp
 80051da:	eb63 0901 	sbc.w	r9, r3, r1
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051f2:	4690      	mov	r8, r2
 80051f4:	4699      	mov	r9, r3
 80051f6:	4623      	mov	r3, r4
 80051f8:	eb18 0303 	adds.w	r3, r8, r3
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	462b      	mov	r3, r5
 8005200:	eb49 0303 	adc.w	r3, r9, r3
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005212:	4629      	mov	r1, r5
 8005214:	024b      	lsls	r3, r1, #9
 8005216:	4621      	mov	r1, r4
 8005218:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800521c:	4621      	mov	r1, r4
 800521e:	024a      	lsls	r2, r1, #9
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005226:	2200      	movs	r2, #0
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
 800522a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800522c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005230:	f7fb f82e 	bl	8000290 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4613      	mov	r3, r2
 800523a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800523c:	e058      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523e:	4b38      	ldr	r3, [pc, #224]	; (8005320 <HAL_RCC_GetSysClockFreq+0x200>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	2200      	movs	r2, #0
 8005246:	4618      	mov	r0, r3
 8005248:	4611      	mov	r1, r2
 800524a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	2300      	movs	r3, #0
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	f04f 0000 	mov.w	r0, #0
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	0159      	lsls	r1, r3, #5
 8005266:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800526a:	0150      	lsls	r0, r2, #5
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4641      	mov	r1, r8
 8005272:	ebb2 0a01 	subs.w	sl, r2, r1
 8005276:	4649      	mov	r1, r9
 8005278:	eb63 0b01 	sbc.w	fp, r3, r1
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005288:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800528c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005290:	ebb2 040a 	subs.w	r4, r2, sl
 8005294:	eb63 050b 	sbc.w	r5, r3, fp
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	00eb      	lsls	r3, r5, #3
 80052a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a6:	00e2      	lsls	r2, r4, #3
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	4643      	mov	r3, r8
 80052ae:	18e3      	adds	r3, r4, r3
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	464b      	mov	r3, r9
 80052b4:	eb45 0303 	adc.w	r3, r5, r3
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052c6:	4629      	mov	r1, r5
 80052c8:	028b      	lsls	r3, r1, #10
 80052ca:	4621      	mov	r1, r4
 80052cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052d0:	4621      	mov	r1, r4
 80052d2:	028a      	lsls	r2, r1, #10
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052da:	2200      	movs	r2, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	61fa      	str	r2, [r7, #28]
 80052e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e4:	f7fa ffd4 	bl	8000290 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	3301      	adds	r3, #1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800530a:	e002      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_RCC_GetSysClockFreq+0x204>)
 800530e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005314:	4618      	mov	r0, r3
 8005316:	3750      	adds	r7, #80	; 0x50
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800
 8005324:	00f42400 	.word	0x00f42400
 8005328:	007a1200 	.word	0x007a1200

0800532c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCC_GetHCLKFreq+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000008 	.word	0x20000008

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005348:	f7ff fff0 	bl	800532c <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	0a9b      	lsrs	r3, r3, #10
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40023800 	.word	0x40023800
 8005368:	08009f10 	.word	0x08009f10

0800536c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005370:	f7ff ffdc 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0b5b      	lsrs	r3, r3, #13
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40023800 	.word	0x40023800
 8005390:	08009f10 	.word	0x08009f10

08005394 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	220f      	movs	r2, #15
 80053a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_GetClockConfig+0x5c>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0203 	and.w	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <HAL_RCC_GetClockConfig+0x5c>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <HAL_RCC_GetClockConfig+0x5c>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_GetClockConfig+0x5c>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	08db      	lsrs	r3, r3, #3
 80053ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RCC_GetClockConfig+0x60>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 020f 	and.w	r2, r3, #15
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	601a      	str	r2, [r3, #0]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40023c00 	.word	0x40023c00

080053f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005428:	2b00      	cmp	r3, #0
 800542a:	d075      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800542c:	4b91      	ldr	r3, [pc, #580]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005432:	f7fc ffcb 	bl	80023cc <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005438:	e008      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800543a:	f7fc ffc7 	bl	80023cc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e189      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800544c:	4b8a      	ldr	r3, [pc, #552]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	019a      	lsls	r2, r3, #6
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	071b      	lsls	r3, r3, #28
 8005470:	4981      	ldr	r1, [pc, #516]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005484:	4b7c      	ldr	r3, [pc, #496]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	431a      	orrs	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	071b      	lsls	r3, r3, #28
 80054a4:	4974      	ldr	r1, [pc, #464]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054ac:	4b72      	ldr	r3, [pc, #456]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b2:	f023 021f 	bic.w	r2, r3, #31
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	496e      	ldr	r1, [pc, #440]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	019a      	lsls	r2, r3, #6
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	071b      	lsls	r3, r3, #28
 80054e4:	4964      	ldr	r1, [pc, #400]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f2:	f7fc ff6b 	bl	80023cc <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054fa:	f7fc ff67 	bl	80023cc <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e129      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800550c:	4b5a      	ldr	r3, [pc, #360]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800552c:	2b00      	cmp	r3, #0
 800552e:	d079      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005530:	4b52      	ldr	r3, [pc, #328]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005536:	f7fc ff49 	bl	80023cc <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800553e:	f7fc ff45 	bl	80023cc <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e107      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005550:	4b49      	ldr	r3, [pc, #292]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555c:	d0ef      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800556a:	4b43      	ldr	r3, [pc, #268]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	0f1b      	lsrs	r3, r3, #28
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	019a      	lsls	r2, r3, #6
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	071b      	lsls	r3, r3, #28
 800558a:	493b      	ldr	r1, [pc, #236]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005592:	4b39      	ldr	r3, [pc, #228]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4934      	ldr	r1, [pc, #208]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01e      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055b8:	4b2f      	ldr	r3, [pc, #188]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	0e1b      	lsrs	r3, r3, #24
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	019a      	lsls	r2, r3, #6
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	071b      	lsls	r3, r3, #28
 80055d8:	4927      	ldr	r1, [pc, #156]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	4922      	ldr	r1, [pc, #136]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fc fee6 	bl	80023cc <HAL_GetTick>
 8005600:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005604:	f7fc fee2 	bl	80023cc <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0a4      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800561e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005622:	d1ef      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 808b 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a0f      	ldr	r2, [pc, #60]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a0b      	ldr	r2, [pc, #44]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005658:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fc feb7 	bl	80023cc <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005660:	e010      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005662:	f7fc feb3 	bl	80023cc <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d909      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e075      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005674:	42470068 	.word	0x42470068
 8005678:	40023800 	.word	0x40023800
 800567c:	42470070 	.word	0x42470070
 8005680:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005684:	4b38      	ldr	r3, [pc, #224]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0e8      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005690:	4b36      	ldr	r3, [pc, #216]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005698:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d028      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ae:	4b2f      	ldr	r3, [pc, #188]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056c4:	4a29      	ldr	r2, [pc, #164]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ca:	4b28      	ldr	r3, [pc, #160]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d114      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fc fe79 	bl	80023cc <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	e00a      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f7fc fe75 	bl	80023cc <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e035      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	4b1d      	ldr	r3, [pc, #116]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ee      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570c:	d10d      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800570e:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	4912      	ldr	r1, [pc, #72]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005724:	4313      	orrs	r3, r2
 8005726:	608b      	str	r3, [r1, #8]
 8005728:	e005      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800572a:	4b10      	ldr	r3, [pc, #64]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4a0f      	ldr	r2, [pc, #60]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005730:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005734:	6093      	str	r3, [r2, #8]
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005742:	490a      	ldr	r1, [pc, #40]	; (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005744:	4313      	orrs	r3, r2
 8005746:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800575c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40007000 	.word	0x40007000
 800576c:	40023800 	.word	0x40023800
 8005770:	42470e40 	.word	0x42470e40
 8005774:	424711e0 	.word	0x424711e0

08005778 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e025      	b.n	80057d8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fc fb93 	bl	8001ecc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f001 f97f 	bl	8006abc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	f001 f9d4 	bl	8006b76 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e07b      	b.n	80058ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005802:	d009      	beq.n	8005818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	61da      	str	r2, [r3, #28]
 800580a:	e005      	b.n	8005818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fa06 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589c:	ea42 0103 	orr.w	r1, r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	f003 0104 	and.w	r1, r3, #4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	f003 0210 	and.w	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e041      	b.n	8005988 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fc f9db 	bl	8001cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f000 fa95 	bl	8005e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d001      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e04e      	b.n	8005a46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d01d      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x80>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d111      	bne.n	8005a34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d010      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	e007      	b.n	8005a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40010400 	.word	0x40010400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40001800 	.word	0x40001800

08005a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0202 	mvn.w	r2, #2
 8005a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9b5 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9a7 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f9b8 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0204 	mvn.w	r2, #4
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f98b 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f97d 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f98e 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0208 	mvn.w	r2, #8
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f961 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f953 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f964 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b10      	cmp	r3, #16
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0210 	mvn.w	r2, #16
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f937 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f929 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f93a 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10e      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0201 	mvn.w	r2, #1
 8005bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb fe00 	bl	80017f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d10e      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0c:	2b80      	cmp	r3, #128	; 0x80
 8005c0e:	d107      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fae0 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d10e      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d107      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8ff 	bl	8005e4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0220 	mvn.w	r2, #32
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 faaa 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIM_ConfigClockSource+0x1c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0b4      	b.n	8005e06 <HAL_TIM_ConfigClockSource+0x186>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd4:	d03e      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xd4>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cda:	f200 8087 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	f000 8086 	beq.w	8005df2 <HAL_TIM_ConfigClockSource+0x172>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cea:	d87f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b70      	cmp	r3, #112	; 0x70
 8005cee:	d01a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0xa6>
 8005cf0:	2b70      	cmp	r3, #112	; 0x70
 8005cf2:	d87b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b60      	cmp	r3, #96	; 0x60
 8005cf6:	d050      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x11a>
 8005cf8:	2b60      	cmp	r3, #96	; 0x60
 8005cfa:	d877      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b50      	cmp	r3, #80	; 0x50
 8005cfe:	d03c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0xfa>
 8005d00:	2b50      	cmp	r3, #80	; 0x50
 8005d02:	d873      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d058      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x13a>
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d86f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d064      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b30      	cmp	r3, #48	; 0x30
 8005d12:	d86b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d060      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d867      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05c      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d05a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	e062      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f000 f9ad 	bl	8006094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
      break;
 8005d52:	e04f      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f000 f996 	bl	8006094 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d76:	609a      	str	r2, [r3, #8]
      break;
 8005d78:	e03c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 f90a 	bl	8005fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2150      	movs	r1, #80	; 0x50
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f963 	bl	800605e <TIM_ITRx_SetConfig>
      break;
 8005d98:	e02c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 f929 	bl	8005ffe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2160      	movs	r1, #96	; 0x60
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f953 	bl	800605e <TIM_ITRx_SetConfig>
      break;
 8005db8:	e01c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 f8ea 	bl	8005fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f943 	bl	800605e <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f000 f93a 	bl	800605e <TIM_ITRx_SetConfig>
      break;
 8005dea:	e003      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e000      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a40      	ldr	r2, [pc, #256]	; (8005f74 <TIM_Base_SetConfig+0x114>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d00f      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3d      	ldr	r2, [pc, #244]	; (8005f78 <TIM_Base_SetConfig+0x118>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a3c      	ldr	r2, [pc, #240]	; (8005f7c <TIM_Base_SetConfig+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <TIM_Base_SetConfig+0x120>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a3a      	ldr	r2, [pc, #232]	; (8005f84 <TIM_Base_SetConfig+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d108      	bne.n	8005eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2f      	ldr	r2, [pc, #188]	; (8005f74 <TIM_Base_SetConfig+0x114>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02b      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d027      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	; (8005f78 <TIM_Base_SetConfig+0x118>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d023      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <TIM_Base_SetConfig+0x11c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01f      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <TIM_Base_SetConfig+0x120>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01b      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a29      	ldr	r2, [pc, #164]	; (8005f84 <TIM_Base_SetConfig+0x124>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d017      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a28      	ldr	r2, [pc, #160]	; (8005f88 <TIM_Base_SetConfig+0x128>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a27      	ldr	r2, [pc, #156]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a26      	ldr	r2, [pc, #152]	; (8005f90 <TIM_Base_SetConfig+0x130>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <TIM_Base_SetConfig+0x134>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <TIM_Base_SetConfig+0x138>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a23      	ldr	r2, [pc, #140]	; (8005f9c <TIM_Base_SetConfig+0x13c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <TIM_Base_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0xf8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <TIM_Base_SetConfig+0x124>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	615a      	str	r2, [r3, #20]
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400
 8005f90:	40014800 	.word	0x40014800
 8005f94:	40001800 	.word	0x40001800
 8005f98:	40001c00 	.word	0x40001c00
 8005f9c:	40002000 	.word	0x40002000

08005fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f023 030a 	bic.w	r3, r3, #10
 8005fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b087      	sub	sp, #28
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f023 0210 	bic.w	r2, r3, #16
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	031b      	lsls	r3, r3, #12
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800603a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	f043 0307 	orr.w	r3, r3, #7
 8006080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	609a      	str	r2, [r3, #8]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	021a      	lsls	r2, r3, #8
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	609a      	str	r2, [r3, #8]
}
 80060c8:	bf00      	nop
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e05a      	b.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a21      	ldr	r2, [pc, #132]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d022      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006138:	d01d      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d018      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1b      	ldr	r2, [pc, #108]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a18      	ldr	r2, [pc, #96]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a17      	ldr	r2, [pc, #92]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10c      	bne.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4313      	orrs	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	40000c00 	.word	0x40000c00
 80061c0:	40010400 	.word	0x40010400
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40001800 	.word	0x40001800

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e03f      	b.n	8006286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fb fd7c 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f9cb 	bl	80065d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b08a      	sub	sp, #40	; 0x28
 8006292:	af02      	add	r7, sp, #8
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d17c      	bne.n	80063a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Transmit+0x2c>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e075      	b.n	80063aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit+0x3e>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e06e      	b.n	80063aa <HAL_UART_Transmit+0x11c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2221      	movs	r2, #33	; 0x21
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e2:	f7fc f873 	bl	80023cc <HAL_GetTick>
 80062e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Transmit+0x82>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006320:	e02a      	b.n	8006378 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f8e2 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e036      	b.n	80063aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3302      	adds	r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	e007      	b.n	800636a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3301      	adds	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1cf      	bne.n	8006322 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2200      	movs	r2, #0
 800638a:	2140      	movs	r1, #64	; 0x40
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f8b2 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e006      	b.n	80063aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e000      	b.n	80063aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b08a      	sub	sp, #40	; 0x28
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	f040 808c 	bne.w	80064ec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Receive+0x2e>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e084      	b.n	80064ee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Receive+0x40>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e07d      	b.n	80064ee <HAL_UART_Receive+0x13c>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2222      	movs	r2, #34	; 0x22
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640e:	f7fb ffdd 	bl	80023cc <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006428:	d108      	bne.n	800643c <HAL_UART_Receive+0x8a>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e003      	b.n	8006444 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800644c:	e043      	b.n	80064d6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2200      	movs	r2, #0
 8006456:	2120      	movs	r1, #32
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f84c 	bl	80064f6 <UART_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e042      	b.n	80064ee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	b29a      	uxth	r2, r3
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	3302      	adds	r3, #2
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e01f      	b.n	80064c8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006490:	d007      	beq.n	80064a2 <HAL_UART_Receive+0xf0>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <HAL_UART_Receive+0xfe>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e008      	b.n	80064c2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1b6      	bne.n	800644e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b090      	sub	sp, #64	; 0x40
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006506:	e050      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800650e:	d04c      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006512:	2b00      	cmp	r3, #0
 8006514:	d007      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0x30>
 8006516:	f7fb ff59 	bl	80023cc <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006522:	429a      	cmp	r2, r3
 8006524:	d241      	bcs.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006546:	637a      	str	r2, [r7, #52]	; 0x34
 8006548:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800654c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3314      	adds	r3, #20
 8006560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	613b      	str	r3, [r7, #16]
   return(result);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800657a:	623a      	str	r2, [r7, #32]
 800657c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	69f9      	ldr	r1, [r7, #28]
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	61bb      	str	r3, [r7, #24]
   return(result);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e00f      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d09f      	beq.n	8006508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3740      	adds	r7, #64	; 0x40
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d8:	b0c0      	sub	sp, #256	; 0x100
 80065da:	af00      	add	r7, sp, #0
 80065dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	68d9      	ldr	r1, [r3, #12]
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	ea40 0301 	orr.w	r3, r0, r1
 80065fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	431a      	orrs	r2, r3
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800662c:	f021 010c 	bic.w	r1, r1, #12
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800663a:	430b      	orrs	r3, r1
 800663c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664e:	6999      	ldr	r1, [r3, #24]
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	ea40 0301 	orr.w	r3, r0, r1
 800665a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b8f      	ldr	r3, [pc, #572]	; (80068a0 <UART_SetConfig+0x2cc>)
 8006664:	429a      	cmp	r2, r3
 8006666:	d005      	beq.n	8006674 <UART_SetConfig+0xa0>
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b8d      	ldr	r3, [pc, #564]	; (80068a4 <UART_SetConfig+0x2d0>)
 8006670:	429a      	cmp	r2, r3
 8006672:	d104      	bne.n	800667e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006674:	f7fe fe7a 	bl	800536c <HAL_RCC_GetPCLK2Freq>
 8006678:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800667c:	e003      	b.n	8006686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800667e:	f7fe fe61 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006682:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006690:	f040 810c 	bne.w	80068ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800669e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	1891      	adds	r1, r2, r2
 80066ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80066ae:	415b      	adcs	r3, r3
 80066b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066b6:	4621      	mov	r1, r4
 80066b8:	eb12 0801 	adds.w	r8, r2, r1
 80066bc:	4629      	mov	r1, r5
 80066be:	eb43 0901 	adc.w	r9, r3, r1
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066d6:	4690      	mov	r8, r2
 80066d8:	4699      	mov	r9, r3
 80066da:	4623      	mov	r3, r4
 80066dc:	eb18 0303 	adds.w	r3, r8, r3
 80066e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066e4:	462b      	mov	r3, r5
 80066e6:	eb49 0303 	adc.w	r3, r9, r3
 80066ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006702:	460b      	mov	r3, r1
 8006704:	18db      	adds	r3, r3, r3
 8006706:	653b      	str	r3, [r7, #80]	; 0x50
 8006708:	4613      	mov	r3, r2
 800670a:	eb42 0303 	adc.w	r3, r2, r3
 800670e:	657b      	str	r3, [r7, #84]	; 0x54
 8006710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006718:	f7f9 fdba 	bl	8000290 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006722:	fba3 2302 	umull	r2, r3, r3, r2
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	011c      	lsls	r4, r3, #4
 800672a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006734:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	1891      	adds	r1, r2, r2
 8006742:	64b9      	str	r1, [r7, #72]	; 0x48
 8006744:	415b      	adcs	r3, r3
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800674c:	4641      	mov	r1, r8
 800674e:	eb12 0a01 	adds.w	sl, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb43 0b01 	adc.w	fp, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800676c:	4692      	mov	sl, r2
 800676e:	469b      	mov	fp, r3
 8006770:	4643      	mov	r3, r8
 8006772:	eb1a 0303 	adds.w	r3, sl, r3
 8006776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800677a:	464b      	mov	r3, r9
 800677c:	eb4b 0303 	adc.w	r3, fp, r3
 8006780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006790:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006798:	460b      	mov	r3, r1
 800679a:	18db      	adds	r3, r3, r3
 800679c:	643b      	str	r3, [r7, #64]	; 0x40
 800679e:	4613      	mov	r3, r2
 80067a0:	eb42 0303 	adc.w	r3, r2, r3
 80067a4:	647b      	str	r3, [r7, #68]	; 0x44
 80067a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067ae:	f7f9 fd6f 	bl	8000290 <__aeabi_uldivmod>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <UART_SetConfig+0x2d4>)
 80067ba:	fba3 2301 	umull	r2, r3, r3, r1
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2264      	movs	r2, #100	; 0x64
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	1acb      	subs	r3, r1, r3
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067ce:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <UART_SetConfig+0x2d4>)
 80067d0:	fba3 2302 	umull	r2, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067dc:	441c      	add	r4, r3
 80067de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80067f8:	415b      	adcs	r3, r3
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006800:	4641      	mov	r1, r8
 8006802:	1851      	adds	r1, r2, r1
 8006804:	6339      	str	r1, [r7, #48]	; 0x30
 8006806:	4649      	mov	r1, r9
 8006808:	414b      	adcs	r3, r1
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006818:	4659      	mov	r1, fp
 800681a:	00cb      	lsls	r3, r1, #3
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006822:	4651      	mov	r1, sl
 8006824:	00ca      	lsls	r2, r1, #3
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	4603      	mov	r3, r0
 800682c:	4642      	mov	r2, r8
 800682e:	189b      	adds	r3, r3, r2
 8006830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006834:	464b      	mov	r3, r9
 8006836:	460a      	mov	r2, r1
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800684c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006854:	460b      	mov	r3, r1
 8006856:	18db      	adds	r3, r3, r3
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
 800685a:	4613      	mov	r3, r2
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800686a:	f7f9 fd11 	bl	8000290 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	; 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4422      	add	r2, r4
 800689a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800689c:	e105      	b.n	8006aaa <UART_SetConfig+0x4d6>
 800689e:	bf00      	nop
 80068a0:	40011000 	.word	0x40011000
 80068a4:	40011400 	.word	0x40011400
 80068a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	1891      	adds	r1, r2, r2
 80068c4:	6239      	str	r1, [r7, #32]
 80068c6:	415b      	adcs	r3, r3
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068ce:	4641      	mov	r1, r8
 80068d0:	1854      	adds	r4, r2, r1
 80068d2:	4649      	mov	r1, r9
 80068d4:	eb43 0501 	adc.w	r5, r3, r1
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	00eb      	lsls	r3, r5, #3
 80068e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e6:	00e2      	lsls	r2, r4, #3
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	4643      	mov	r3, r8
 80068ee:	18e3      	adds	r3, r4, r3
 80068f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068f4:	464b      	mov	r3, r9
 80068f6:	eb45 0303 	adc.w	r3, r5, r3
 80068fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800690a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800691a:	4629      	mov	r1, r5
 800691c:	008b      	lsls	r3, r1, #2
 800691e:	4621      	mov	r1, r4
 8006920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006924:	4621      	mov	r1, r4
 8006926:	008a      	lsls	r2, r1, #2
 8006928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800692c:	f7f9 fcb0 	bl	8000290 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b60      	ldr	r3, [pc, #384]	; (8006ab8 <UART_SetConfig+0x4e4>)
 8006936:	fba3 2302 	umull	r2, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	011c      	lsls	r4, r3, #4
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800694c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	1891      	adds	r1, r2, r2
 8006956:	61b9      	str	r1, [r7, #24]
 8006958:	415b      	adcs	r3, r3
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006960:	4641      	mov	r1, r8
 8006962:	1851      	adds	r1, r2, r1
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	4649      	mov	r1, r9
 8006968:	414b      	adcs	r3, r1
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006978:	4659      	mov	r1, fp
 800697a:	00cb      	lsls	r3, r1, #3
 800697c:	4651      	mov	r1, sl
 800697e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006982:	4651      	mov	r1, sl
 8006984:	00ca      	lsls	r2, r1, #3
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	4603      	mov	r3, r0
 800698c:	4642      	mov	r2, r8
 800698e:	189b      	adds	r3, r3, r2
 8006990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006994:	464b      	mov	r3, r9
 8006996:	460a      	mov	r2, r1
 8006998:	eb42 0303 	adc.w	r3, r2, r3
 800699c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069b8:	4649      	mov	r1, r9
 80069ba:	008b      	lsls	r3, r1, #2
 80069bc:	4641      	mov	r1, r8
 80069be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c2:	4641      	mov	r1, r8
 80069c4:	008a      	lsls	r2, r1, #2
 80069c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069ca:	f7f9 fc61 	bl	8000290 <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <UART_SetConfig+0x4e4>)
 80069d4:	fba3 1302 	umull	r1, r3, r3, r2
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	2164      	movs	r1, #100	; 0x64
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	3332      	adds	r3, #50	; 0x32
 80069e6:	4a34      	ldr	r2, [pc, #208]	; (8006ab8 <UART_SetConfig+0x4e4>)
 80069e8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f2:	441c      	add	r4, r3
 80069f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f8:	2200      	movs	r2, #0
 80069fa:	673b      	str	r3, [r7, #112]	; 0x70
 80069fc:	677a      	str	r2, [r7, #116]	; 0x74
 80069fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a02:	4642      	mov	r2, r8
 8006a04:	464b      	mov	r3, r9
 8006a06:	1891      	adds	r1, r2, r2
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	415b      	adcs	r3, r3
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a12:	4641      	mov	r1, r8
 8006a14:	1851      	adds	r1, r2, r1
 8006a16:	6039      	str	r1, [r7, #0]
 8006a18:	4649      	mov	r1, r9
 8006a1a:	414b      	adcs	r3, r1
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	00cb      	lsls	r3, r1, #3
 8006a2e:	4651      	mov	r1, sl
 8006a30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a34:	4651      	mov	r1, sl
 8006a36:	00ca      	lsls	r2, r1, #3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4642      	mov	r2, r8
 8006a40:	189b      	adds	r3, r3, r2
 8006a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a44:	464b      	mov	r3, r9
 8006a46:	460a      	mov	r2, r1
 8006a48:	eb42 0303 	adc.w	r3, r2, r3
 8006a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	663b      	str	r3, [r7, #96]	; 0x60
 8006a58:	667a      	str	r2, [r7, #100]	; 0x64
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a66:	4649      	mov	r1, r9
 8006a68:	008b      	lsls	r3, r1, #2
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a70:	4641      	mov	r1, r8
 8006a72:	008a      	lsls	r2, r1, #2
 8006a74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a78:	f7f9 fc0a 	bl	8000290 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <UART_SetConfig+0x4e4>)
 8006a82:	fba3 1302 	umull	r1, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2164      	movs	r1, #100	; 0x64
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	3332      	adds	r3, #50	; 0x32
 8006a94:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <UART_SetConfig+0x4e4>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4422      	add	r2, r4
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab6:	bf00      	nop
 8006ab8:	51eb851f 	.word	0x51eb851f

08006abc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d123      	bne.n	8006b16 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	6851      	ldr	r1, [r2, #4]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	6892      	ldr	r2, [r2, #8]
 8006ae2:	4311      	orrs	r1, r2
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	68d2      	ldr	r2, [r2, #12]
 8006ae8:	4311      	orrs	r1, r2
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	6912      	ldr	r2, [r2, #16]
 8006aee:	4311      	orrs	r1, r2
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	6952      	ldr	r2, [r2, #20]
 8006af4:	4311      	orrs	r1, r2
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	6992      	ldr	r2, [r2, #24]
 8006afa:	4311      	orrs	r1, r2
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	69d2      	ldr	r2, [r2, #28]
 8006b00:	4311      	orrs	r1, r2
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	6a12      	ldr	r2, [r2, #32]
 8006b06:	4311      	orrs	r1, r2
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e028      	b.n	8006b68 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	69d9      	ldr	r1, [r3, #28]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	4319      	orrs	r1, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	6851      	ldr	r1, [r2, #4]
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	6892      	ldr	r2, [r2, #8]
 8006b48:	4311      	orrs	r1, r2
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	68d2      	ldr	r2, [r2, #12]
 8006b4e:	4311      	orrs	r1, r2
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	6912      	ldr	r2, [r2, #16]
 8006b54:	4311      	orrs	r1, r2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	6952      	ldr	r2, [r2, #20]
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	6992      	ldr	r2, [r2, #24]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d128      	bne.n	8006bda <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	1e59      	subs	r1, r3, #1
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	4319      	orrs	r1, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	4319      	orrs	r1, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	031b      	lsls	r3, r3, #12
 8006bb2:	4319      	orrs	r1, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	4319      	orrs	r1, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	051b      	lsls	r3, r3, #20
 8006bc6:	4319      	orrs	r1, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	061b      	lsls	r3, r3, #24
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	609a      	str	r2, [r3, #8]
 8006bd8:	e02f      	b.n	8006c3a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	68d2      	ldr	r2, [r2, #12]
 8006bea:	3a01      	subs	r2, #1
 8006bec:	0311      	lsls	r1, r2, #12
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	6952      	ldr	r2, [r2, #20]
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	0512      	lsls	r2, r2, #20
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1e59      	subs	r1, r3, #1
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	4319      	orrs	r1, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	4319      	orrs	r1, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	4319      	orrs	r1, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	430b      	orrs	r3, r1
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f043 0201 	orr.w	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f023 0201 	bic.w	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <USB_FlushTxFifo+0x64>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e01b      	b.n	8006ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	daf2      	bge.n	8006c9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	019b      	lsls	r3, r3, #6
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <USB_FlushTxFifo+0x64>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e006      	b.n	8006ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d0f0      	beq.n	8006cc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	00030d40 	.word	0x00030d40

08006cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a11      	ldr	r2, [pc, #68]	; (8006d50 <USB_FlushRxFifo+0x5c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e018      	b.n	8006d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	daf2      	bge.n	8006d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2210      	movs	r2, #16
 8006d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <USB_FlushRxFifo+0x5c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e006      	b.n	8006d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d0f0      	beq.n	8006d24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	00030d40 	.word	0x00030d40

08006d54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b08b      	sub	sp, #44	; 0x2c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	623b      	str	r3, [r7, #32]
 8006d7e:	e014      	b.n	8006daa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	3301      	adds	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	3301      	adds	r3, #1
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	3301      	adds	r3, #1
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	3301      	adds	r3, #1
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	6a3a      	ldr	r2, [r7, #32]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3e6      	bcc.n	8006d80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006db2:	8bfb      	ldrh	r3, [r7, #30]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01e      	beq.n	8006df6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	701a      	strb	r2, [r3, #0]
      i++;
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	3301      	adds	r3, #1
 8006de2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	3301      	adds	r3, #1
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006dea:	8bfb      	ldrh	r3, [r7, #30]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006df0:	8bfb      	ldrh	r3, [r7, #30]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1ea      	bne.n	8006dcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	372c      	adds	r7, #44	; 0x2c
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0301 	and.w	r3, r3, #1
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d107      	bne.n	8006e98 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e94:	6053      	str	r3, [r2, #4]
 8006e96:	e009      	b.n	8006eac <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d106      	bne.n	8006eac <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f241 7370 	movw	r3, #6000	; 0x1770
 8006eaa:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	b29b      	uxth	r3, r3
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	0c9b      	lsrs	r3, r3, #18
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	0fdb      	lsrs	r3, r3, #31
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d104      	bne.n	8006f36 <USB_HC_Halt+0x5a>
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e0c8      	b.n	80070c8 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <USB_HC_Halt+0x66>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d163      	bne.n	800700a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f60:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 80ab 	bne.w	80070c6 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d133      	bne.n	8006fe4 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f9a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fba:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc8:	d81d      	bhi.n	8007006 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fe0:	d0ec      	beq.n	8006fbc <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fe2:	e070      	b.n	80070c6 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007002:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007004:	e05f      	b.n	80070c6 <USB_HC_Halt+0x1ea>
            break;
 8007006:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007008:	e05d      	b.n	80070c6 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007028:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d133      	bne.n	80070a2 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	440a      	add	r2, r1
 8007050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007058:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007078:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007086:	d81d      	bhi.n	80070c4 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800709a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800709e:	d0ec      	beq.n	800707a <USB_HC_Halt+0x19e>
 80070a0:	e011      	b.n	80070c6 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e000      	b.n	80070c6 <USB_HC_Halt+0x1ea>
          break;
 80070c4:	bf00      	nop
    }
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3724      	adds	r7, #36	; 0x24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff fdbe 	bl	8006c6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070ee:	2110      	movs	r1, #16
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff fdcb 	bl	8006c8c <USB_FlushTxFifo>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff fdf7 	bl	8006cf4 <USB_FlushRxFifo>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007110:	2300      	movs	r3, #0
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	e01f      	b.n	8007156 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007134:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800713c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	4413      	add	r3, r2
 8007146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714a:	461a      	mov	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	3301      	adds	r3, #1
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b0f      	cmp	r3, #15
 800715a:	d9dc      	bls.n	8007116 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800715c:	2300      	movs	r3, #0
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e034      	b.n	80071cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007178:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007180:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007188:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007196:	461a      	mov	r2, r3
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071a8:	d80c      	bhi.n	80071c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c0:	d0ec      	beq.n	800719c <USB_StopHost+0xc8>
 80071c2:	e000      	b.n	80071c6 <USB_StopHost+0xf2>
        break;
 80071c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	3301      	adds	r3, #1
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b0f      	cmp	r3, #15
 80071d0:	d9c7      	bls.n	8007162 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d8:	461a      	mov	r2, r3
 80071da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fd2d 	bl	8006c48 <USB_EnableGlobalInt>

  return ret;
 80071ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3720      	adds	r7, #32
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f804 	bl	800721c <USBH_HandleSof>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b0b      	cmp	r3, #11
 800722c:	d10a      	bne.n	8007244 <USBH_HandleSof+0x28>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
  }
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007270:	2200      	movs	r2, #0
 8007272:	4619      	mov	r1, r3
 8007274:	f000 f8ae 	bl	80073d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007278:	bf00      	nop
}
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007290:	bf00      	nop
}
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80072d0:	2200      	movs	r2, #0
 80072d2:	4619      	mov	r1, r3
 80072d4:	f000 f87e 	bl	80073d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 f91a 	bl	800853c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	791b      	ldrb	r3, [r3, #4]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f830 	bl	8007374 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	795b      	ldrb	r3, [r3, #5]
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f82a 	bl	8007374 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007334:	2200      	movs	r2, #0
 8007336:	4619      	mov	r1, r3
 8007338:	f000 f84c 	bl	80073d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007362:	2200      	movs	r2, #0
 8007364:	4619      	mov	r1, r3
 8007366:	f000 f835 	bl	80073d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d80d      	bhi.n	80073a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007386:	78fb      	ldrb	r3, [r7, #3]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	33e0      	adds	r3, #224	; 0xe0
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	33e0      	adds	r3, #224	; 0xe0
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b6:	f3ef 8305 	mrs	r3, IPSR
 80073ba:	607b      	str	r3, [r7, #4]
  return(result);
 80073bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	2300      	moveq	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <osMessagePut+0x1e>
    ticks = 1;
 80073ee:	2301      	movs	r3, #1
 80073f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80073f2:	f7ff ffdd 	bl	80073b0 <inHandlerMode>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d018      	beq.n	800742e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80073fc:	f107 0210 	add.w	r2, r7, #16
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	2300      	movs	r3, #0
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f9aa 	bl	8007760 <xQueueGenericSendFromISR>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d001      	beq.n	8007416 <osMessagePut+0x42>
      return osErrorOS;
 8007412:	23ff      	movs	r3, #255	; 0xff
 8007414:	e018      	b.n	8007448 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d014      	beq.n	8007446 <osMessagePut+0x72>
 800741c:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <osMessagePut+0x7c>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	e00b      	b.n	8007446 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800742e:	f107 0108 	add.w	r1, r7, #8
 8007432:	2300      	movs	r3, #0
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f894 	bl	8007564 <xQueueGenericSend>
 800743c:	4603      	mov	r3, r0
 800743e:	2b01      	cmp	r3, #1
 8007440:	d001      	beq.n	8007446 <osMessagePut+0x72>
      return osErrorOS;
 8007442:	23ff      	movs	r3, #255	; 0xff
 8007444:	e000      	b.n	8007448 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	601a      	str	r2, [r3, #0]
}
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b2:	d103      	bne.n	80074bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e00c      	b.n	80074d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3308      	adds	r3, #8
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e002      	b.n	80074ca <vListInsert+0x2e>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d2f6      	bcs.n	80074c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
}
 8007502:	bf00      	nop
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6892      	ldr	r2, [r2, #8]
 8007524:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6852      	ldr	r2, [r2, #4]
 800752e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d103      	bne.n	8007542 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	1e5a      	subs	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08e      	sub	sp, #56	; 0x38
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xQueueGenericSend+0x32>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d103      	bne.n	80075a4 <xQueueGenericSend+0x40>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xQueueGenericSend+0x44>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xQueueGenericSend+0x46>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <xQueueGenericSend+0x60>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d103      	bne.n	80075d2 <xQueueGenericSend+0x6e>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <xQueueGenericSend+0x72>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <xQueueGenericSend+0x74>
 80075d6:	2300      	movs	r3, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	623b      	str	r3, [r7, #32]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f2:	f000 fd39 	bl	8008068 <xTaskGetSchedulerState>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <xQueueGenericSend+0x9e>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <xQueueGenericSend+0xa2>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <xQueueGenericSend+0xa4>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <xQueueGenericSend+0xbe>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	61fb      	str	r3, [r7, #28]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007622:	f000 fe41 	bl	80082a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <xQueueGenericSend+0xd4>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d129      	bne.n	800768c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800763e:	f000 f92a 	bl	8007896 <prvCopyDataToQueue>
 8007642:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fc03 	bl	8007e5c <xTaskRemoveFromEventList>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d013      	beq.n	8007684 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800765c:	4b3f      	ldr	r3, [pc, #252]	; (800775c <xQueueGenericSend+0x1f8>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	e00a      	b.n	8007684 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007674:	4b39      	ldr	r3, [pc, #228]	; (800775c <xQueueGenericSend+0x1f8>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007684:	f000 fe40 	bl	8008308 <vPortExitCritical>
				return pdPASS;
 8007688:	2301      	movs	r3, #1
 800768a:	e063      	b.n	8007754 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007692:	f000 fe39 	bl	8008308 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007696:	2300      	movs	r3, #0
 8007698:	e05c      	b.n	8007754 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fc3b 	bl	8007f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076aa:	2301      	movs	r3, #1
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ae:	f000 fe2b 	bl	8008308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076b2:	f000 f9c5 	bl	8007a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076b6:	f000 fdf7 	bl	80082a8 <vPortEnterCritical>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c6:	d103      	bne.n	80076d0 <xQueueGenericSend+0x16c>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076dc:	d103      	bne.n	80076e6 <xQueueGenericSend+0x182>
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e6:	f000 fe0f 	bl	8008308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ea:	1d3a      	adds	r2, r7, #4
 80076ec:	f107 0314 	add.w	r3, r7, #20
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fc2a 	bl	8007f4c <xTaskCheckForTimeOut>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d124      	bne.n	8007748 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007700:	f000 f985 	bl	8007a0e <prvIsQueueFull>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d018      	beq.n	800773c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	3310      	adds	r3, #16
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fb7e 	bl	8007e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800771a:	f000 f926 	bl	800796a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800771e:	f000 f99d 	bl	8007a5c <xTaskResumeAll>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f af7c 	bne.w	8007622 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <xQueueGenericSend+0x1f8>)
 800772c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	e772      	b.n	8007622 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800773c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800773e:	f000 f914 	bl	800796a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007742:	f000 f98b 	bl	8007a5c <xTaskResumeAll>
 8007746:	e76c      	b.n	8007622 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800774a:	f000 f90e 	bl	800796a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800774e:	f000 f985 	bl	8007a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007754:	4618      	mov	r0, r3
 8007756:	3738      	adds	r7, #56	; 0x38
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b090      	sub	sp, #64	; 0x40
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <xQueueGenericSendFromISR+0x3c>
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <xQueueGenericSendFromISR+0x40>
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <xQueueGenericSendFromISR+0x42>
 80077a0:	2300      	movs	r3, #0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d103      	bne.n	80077ca <xQueueGenericSendFromISR+0x6a>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <xQueueGenericSendFromISR+0x6e>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <xQueueGenericSendFromISR+0x70>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	623b      	str	r3, [r7, #32]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ea:	f000 fe0f 	bl	800840c <vPortValidateInterruptPriority>
	__asm volatile
 80077ee:	f3ef 8211 	mrs	r2, BASEPRI
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	61fa      	str	r2, [r7, #28]
 8007804:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007806:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <xQueueGenericSendFromISR+0xbc>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d12f      	bne.n	800787c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007832:	f000 f830 	bl	8007896 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007836:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783e:	d112      	bne.n	8007866 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d016      	beq.n	8007876 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	3324      	adds	r3, #36	; 0x24
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fb05 	bl	8007e5c <xTaskRemoveFromEventList>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e007      	b.n	8007876 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800786a:	3301      	adds	r3, #1
 800786c:	b2db      	uxtb	r3, r3
 800786e:	b25a      	sxtb	r2, r3
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007876:	2301      	movs	r3, #1
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800787a:	e001      	b.n	8007880 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f383 8811 	msr	BASEPRI, r3
}
 800788a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800788e:	4618      	mov	r0, r3
 8007890:	3740      	adds	r7, #64	; 0x40
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10d      	bne.n	80078d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d14d      	bne.n	8007958 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fbef 	bl	80080a4 <xTaskPriorityDisinherit>
 80078c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	609a      	str	r2, [r3, #8]
 80078ce:	e043      	b.n	8007958 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d119      	bne.n	800790a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6858      	ldr	r0, [r3, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	461a      	mov	r2, r3
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	f000 ffcd 	bl	8008880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	441a      	add	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d32b      	bcc.n	8007958 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	605a      	str	r2, [r3, #4]
 8007908:	e026      	b.n	8007958 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68d8      	ldr	r0, [r3, #12]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	461a      	mov	r2, r3
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	f000 ffb3 	bl	8008880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	425b      	negs	r3, r3
 8007924:	441a      	add	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d207      	bcs.n	8007946 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	425b      	negs	r3, r3
 8007940:	441a      	add	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d105      	bne.n	8007958 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3b01      	subs	r3, #1
 8007956:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007960:	697b      	ldr	r3, [r7, #20]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007972:	f000 fc99 	bl	80082a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800797e:	e011      	b.n	80079a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d012      	beq.n	80079ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3324      	adds	r3, #36	; 0x24
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fa65 	bl	8007e5c <xTaskRemoveFromEventList>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007998:	f000 fb3a 	bl	8008010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	3b01      	subs	r3, #1
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dce9      	bgt.n	8007980 <prvUnlockQueue+0x16>
 80079ac:	e000      	b.n	80079b0 <prvUnlockQueue+0x46>
					break;
 80079ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	22ff      	movs	r2, #255	; 0xff
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079b8:	f000 fca6 	bl	8008308 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079bc:	f000 fc74 	bl	80082a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079c8:	e011      	b.n	80079ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d012      	beq.n	80079f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3310      	adds	r3, #16
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fa40 	bl	8007e5c <xTaskRemoveFromEventList>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079e2:	f000 fb15 	bl	8008010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dce9      	bgt.n	80079ca <prvUnlockQueue+0x60>
 80079f6:	e000      	b.n	80079fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	22ff      	movs	r2, #255	; 0xff
 80079fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a02:	f000 fc81 	bl	8008308 <vPortExitCritical>
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a16:	f000 fc47 	bl	80082a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d102      	bne.n	8007a2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	e001      	b.n	8007a30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a30:	f000 fc6a 	bl	8008308 <vPortExitCritical>

	return xReturn;
 8007a34:	68fb      	ldr	r3, [r7, #12]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a44:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <vTaskSuspendAll+0x18>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	4a03      	ldr	r2, [pc, #12]	; (8007a58 <vTaskSuspendAll+0x18>)
 8007a4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	20000554 	.word	0x20000554

08007a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a6a:	4b41      	ldr	r3, [pc, #260]	; (8007b70 <xTaskResumeAll+0x114>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <xTaskResumeAll+0x2c>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	603b      	str	r3, [r7, #0]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a88:	f000 fc0e 	bl	80082a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a8c:	4b38      	ldr	r3, [pc, #224]	; (8007b70 <xTaskResumeAll+0x114>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	4a37      	ldr	r2, [pc, #220]	; (8007b70 <xTaskResumeAll+0x114>)
 8007a94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a96:	4b36      	ldr	r3, [pc, #216]	; (8007b70 <xTaskResumeAll+0x114>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d161      	bne.n	8007b62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a9e:	4b35      	ldr	r3, [pc, #212]	; (8007b74 <xTaskResumeAll+0x118>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d05d      	beq.n	8007b62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa6:	e02e      	b.n	8007b06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa8:	4b33      	ldr	r3, [pc, #204]	; (8007b78 <xTaskResumeAll+0x11c>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3318      	adds	r3, #24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff fd2a 	bl	800750e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fd25 	bl	800750e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	2201      	movs	r2, #1
 8007aca:	409a      	lsls	r2, r3
 8007acc:	4b2b      	ldr	r3, [pc, #172]	; (8007b7c <xTaskResumeAll+0x120>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <xTaskResumeAll+0x120>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4a27      	ldr	r2, [pc, #156]	; (8007b80 <xTaskResumeAll+0x124>)
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7ff fcb1 	bl	8007454 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <xTaskResumeAll+0x128>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d302      	bcc.n	8007b06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b00:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <xTaskResumeAll+0x12c>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b06:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <xTaskResumeAll+0x11c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1cc      	bne.n	8007aa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b14:	f000 fa88 	bl	8008028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b18:	4b1c      	ldr	r3, [pc, #112]	; (8007b8c <xTaskResumeAll+0x130>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b24:	f000 f836 	bl	8007b94 <xTaskIncrementTick>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b2e:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <xTaskResumeAll+0x12c>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f1      	bne.n	8007b24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b40:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <xTaskResumeAll+0x130>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <xTaskResumeAll+0x12c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <xTaskResumeAll+0x134>)
 8007b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b62:	f000 fbd1 	bl	8008308 <vPortExitCritical>

	return xAlreadyYielded;
 8007b66:	68bb      	ldr	r3, [r7, #8]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000554 	.word	0x20000554
 8007b74:	20000534 	.word	0x20000534
 8007b78:	2000050c 	.word	0x2000050c
 8007b7c:	2000053c 	.word	0x2000053c
 8007b80:	20000478 	.word	0x20000478
 8007b84:	20000474 	.word	0x20000474
 8007b88:	20000548 	.word	0x20000548
 8007b8c:	20000544 	.word	0x20000544
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b9e:	4b4e      	ldr	r3, [pc, #312]	; (8007cd8 <xTaskIncrementTick+0x144>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 808e 	bne.w	8007cc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ba8:	4b4c      	ldr	r3, [pc, #304]	; (8007cdc <xTaskIncrementTick+0x148>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bb0:	4a4a      	ldr	r2, [pc, #296]	; (8007cdc <xTaskIncrementTick+0x148>)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d120      	bne.n	8007bfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bbc:	4b48      	ldr	r3, [pc, #288]	; (8007ce0 <xTaskIncrementTick+0x14c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <xTaskIncrementTick+0x48>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	603b      	str	r3, [r7, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <xTaskIncrementTick+0x46>
 8007bdc:	4b40      	ldr	r3, [pc, #256]	; (8007ce0 <xTaskIncrementTick+0x14c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	4b40      	ldr	r3, [pc, #256]	; (8007ce4 <xTaskIncrementTick+0x150>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a3e      	ldr	r2, [pc, #248]	; (8007ce0 <xTaskIncrementTick+0x14c>)
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4a3e      	ldr	r2, [pc, #248]	; (8007ce4 <xTaskIncrementTick+0x150>)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4b3d      	ldr	r3, [pc, #244]	; (8007ce8 <xTaskIncrementTick+0x154>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a3c      	ldr	r2, [pc, #240]	; (8007ce8 <xTaskIncrementTick+0x154>)
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	f000 fa15 	bl	8008028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bfe:	4b3b      	ldr	r3, [pc, #236]	; (8007cec <xTaskIncrementTick+0x158>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d348      	bcc.n	8007c9a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c08:	4b35      	ldr	r3, [pc, #212]	; (8007ce0 <xTaskIncrementTick+0x14c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c12:	4b36      	ldr	r3, [pc, #216]	; (8007cec <xTaskIncrementTick+0x158>)
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c18:	601a      	str	r2, [r3, #0]
					break;
 8007c1a:	e03e      	b.n	8007c9a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1c:	4b30      	ldr	r3, [pc, #192]	; (8007ce0 <xTaskIncrementTick+0x14c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d203      	bcs.n	8007c3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c34:	4a2d      	ldr	r2, [pc, #180]	; (8007cec <xTaskIncrementTick+0x158>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c3a:	e02e      	b.n	8007c9a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fc64 	bl	800750e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	3318      	adds	r3, #24
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fc5b 	bl	800750e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	409a      	lsls	r2, r3
 8007c60:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <xTaskIncrementTick+0x15c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	4a22      	ldr	r2, [pc, #136]	; (8007cf0 <xTaskIncrementTick+0x15c>)
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <xTaskIncrementTick+0x160>)
 8007c78:	441a      	add	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7ff fbe7 	bl	8007454 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <xTaskIncrementTick+0x164>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d3b9      	bcc.n	8007c08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c98:	e7b6      	b.n	8007c08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c9a:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <xTaskIncrementTick+0x164>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	4914      	ldr	r1, [pc, #80]	; (8007cf4 <xTaskIncrementTick+0x160>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d901      	bls.n	8007cb6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cb6:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <xTaskIncrementTick+0x168>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e004      	b.n	8007cce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <xTaskIncrementTick+0x16c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	4a0d      	ldr	r2, [pc, #52]	; (8007d00 <xTaskIncrementTick+0x16c>)
 8007ccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cce:	697b      	ldr	r3, [r7, #20]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000554 	.word	0x20000554
 8007cdc:	20000538 	.word	0x20000538
 8007ce0:	20000504 	.word	0x20000504
 8007ce4:	20000508 	.word	0x20000508
 8007ce8:	2000054c 	.word	0x2000054c
 8007cec:	20000550 	.word	0x20000550
 8007cf0:	2000053c 	.word	0x2000053c
 8007cf4:	20000478 	.word	0x20000478
 8007cf8:	20000474 	.word	0x20000474
 8007cfc:	20000548 	.word	0x20000548
 8007d00:	20000544 	.word	0x20000544

08007d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d0a:	4b3c      	ldr	r3, [pc, #240]	; (8007dfc <vTaskSwitchContext+0xf8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d12:	4b3b      	ldr	r3, [pc, #236]	; (8007e00 <vTaskSwitchContext+0xfc>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d18:	e06b      	b.n	8007df2 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8007d1a:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <vTaskSwitchContext+0xfc>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007d20:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <vTaskSwitchContext+0x100>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007d2c:	61bb      	str	r3, [r7, #24]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d111      	bne.n	8007d5c <vTaskSwitchContext+0x58>
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d10b      	bne.n	8007d5c <vTaskSwitchContext+0x58>
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	3308      	adds	r3, #8
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d105      	bne.n	8007d5c <vTaskSwitchContext+0x58>
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	330c      	adds	r3, #12
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d008      	beq.n	8007d6e <vTaskSwitchContext+0x6a>
 8007d5c:	4b29      	ldr	r3, [pc, #164]	; (8007e04 <vTaskSwitchContext+0x100>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <vTaskSwitchContext+0x100>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3334      	adds	r3, #52	; 0x34
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7f9 f935 	bl	8000fd8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6e:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <vTaskSwitchContext+0x104>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	fab3 f383 	clz	r3, r3
 8007d7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	f1c3 031f 	rsb	r3, r3, #31
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	4921      	ldr	r1, [pc, #132]	; (8007e0c <vTaskSwitchContext+0x108>)
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <vTaskSwitchContext+0xaa>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	607b      	str	r3, [r7, #4]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <vTaskSwitchContext+0xa8>
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <vTaskSwitchContext+0x108>)
 8007dba:	4413      	add	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	605a      	str	r2, [r3, #4]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d104      	bne.n	8007dde <vTaskSwitchContext+0xda>
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	605a      	str	r2, [r3, #4]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <vTaskSwitchContext+0x100>)
 8007de6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <vTaskSwitchContext+0x100>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3350      	adds	r3, #80	; 0x50
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <vTaskSwitchContext+0x10c>)
 8007df0:	6013      	str	r3, [r2, #0]
}
 8007df2:	bf00      	nop
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000554 	.word	0x20000554
 8007e00:	20000548 	.word	0x20000548
 8007e04:	20000474 	.word	0x20000474
 8007e08:	2000053c 	.word	0x2000053c
 8007e0c:	20000478 	.word	0x20000478
 8007e10:	20000018 	.word	0x20000018

08007e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60fb      	str	r3, [r7, #12]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <vTaskPlaceOnEventList+0x44>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3318      	adds	r3, #24
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fb2a 	bl	800749c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e48:	2101      	movs	r1, #1
 8007e4a:	6838      	ldr	r0, [r7, #0]
 8007e4c:	f000 f9b0 	bl	80081b0 <prvAddCurrentTaskToDelayedList>
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000474 	.word	0x20000474

08007e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10a      	bne.n	8007e88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60fb      	str	r3, [r7, #12]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3318      	adds	r3, #24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fb3e 	bl	800750e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e92:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <xTaskRemoveFromEventList+0xac>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d11c      	bne.n	8007ed4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff fb35 	bl	800750e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	4b17      	ldr	r3, [pc, #92]	; (8007f0c <xTaskRemoveFromEventList+0xb0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <xTaskRemoveFromEventList+0xb0>)
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <xTaskRemoveFromEventList+0xb4>)
 8007ec4:	441a      	add	r2, r3
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f7ff fac1 	bl	8007454 <vListInsertEnd>
 8007ed2:	e005      	b.n	8007ee0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3318      	adds	r3, #24
 8007ed8:	4619      	mov	r1, r3
 8007eda:	480e      	ldr	r0, [pc, #56]	; (8007f14 <xTaskRemoveFromEventList+0xb8>)
 8007edc:	f7ff faba 	bl	8007454 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <xTaskRemoveFromEventList+0xbc>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d905      	bls.n	8007efa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ef2:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <xTaskRemoveFromEventList+0xc0>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	e001      	b.n	8007efe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007efe:	697b      	ldr	r3, [r7, #20]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000554 	.word	0x20000554
 8007f0c:	2000053c 	.word	0x2000053c
 8007f10:	20000478 	.word	0x20000478
 8007f14:	2000050c 	.word	0x2000050c
 8007f18:	20000474 	.word	0x20000474
 8007f1c:	20000548 	.word	0x20000548

08007f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <vTaskInternalSetTimeOutState+0x24>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <vTaskInternalSetTimeOutState+0x28>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	605a      	str	r2, [r3, #4]
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	2000054c 	.word	0x2000054c
 8007f48:	20000538 	.word	0x20000538

08007f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	613b      	str	r3, [r7, #16]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f8e:	f000 f98b 	bl	80082a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f92:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <xTaskCheckForTimeOut+0xbc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007faa:	d102      	bne.n	8007fb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e023      	b.n	8007ffa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <xTaskCheckForTimeOut+0xc0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d007      	beq.n	8007fce <xTaskCheckForTimeOut+0x82>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d302      	bcc.n	8007fce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e015      	b.n	8007ffa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d20b      	bcs.n	8007ff0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff9b 	bl	8007f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	e004      	b.n	8007ffa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ffa:	f000 f985 	bl	8008308 <vPortExitCritical>

	return xReturn;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3720      	adds	r7, #32
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000538 	.word	0x20000538
 800800c:	2000054c 	.word	0x2000054c

08008010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008014:	4b03      	ldr	r3, [pc, #12]	; (8008024 <vTaskMissedYield+0x14>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]
}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20000548 	.word	0x20000548

08008028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <prvResetNextTaskUnblockTime+0x38>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <prvResetNextTaskUnblockTime+0x3c>)
 800803a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800803e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008040:	e008      	b.n	8008054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <prvResetNextTaskUnblockTime+0x38>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	4a04      	ldr	r2, [pc, #16]	; (8008064 <prvResetNextTaskUnblockTime+0x3c>)
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	20000504 	.word	0x20000504
 8008064:	20000550 	.word	0x20000550

08008068 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800806e:	4b0b      	ldr	r3, [pc, #44]	; (800809c <xTaskGetSchedulerState+0x34>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008076:	2301      	movs	r3, #1
 8008078:	607b      	str	r3, [r7, #4]
 800807a:	e008      	b.n	800808e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800807c:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <xTaskGetSchedulerState+0x38>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008084:	2302      	movs	r3, #2
 8008086:	607b      	str	r3, [r7, #4]
 8008088:	e001      	b.n	800808e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800808a:	2300      	movs	r3, #0
 800808c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800808e:	687b      	ldr	r3, [r7, #4]
	}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	20000540 	.word	0x20000540
 80080a0:	20000554 	.word	0x20000554

080080a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d06e      	beq.n	8008198 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080ba:	4b3a      	ldr	r3, [pc, #232]	; (80081a4 <xTaskPriorityDisinherit+0x100>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d00a      	beq.n	80080da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	60fb      	str	r3, [r7, #12]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60bb      	str	r3, [r7, #8]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810a:	429a      	cmp	r2, r3
 800810c:	d044      	beq.n	8008198 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008112:	2b00      	cmp	r3, #0
 8008114:	d140      	bne.n	8008198 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3304      	adds	r3, #4
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff f9f7 	bl	800750e <uxListRemove>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d115      	bne.n	8008152 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	491f      	ldr	r1, [pc, #124]	; (80081a8 <xTaskPriorityDisinherit+0x104>)
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <xTaskPriorityDisinherit+0xae>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	2201      	movs	r2, #1
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43da      	mvns	r2, r3
 8008148:	4b18      	ldr	r3, [pc, #96]	; (80081ac <xTaskPriorityDisinherit+0x108>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4013      	ands	r3, r2
 800814e:	4a17      	ldr	r2, [pc, #92]	; (80081ac <xTaskPriorityDisinherit+0x108>)
 8008150:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815e:	f1c3 0207 	rsb	r2, r3, #7
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	2201      	movs	r2, #1
 800816c:	409a      	lsls	r2, r3
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <xTaskPriorityDisinherit+0x108>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4313      	orrs	r3, r2
 8008174:	4a0d      	ldr	r2, [pc, #52]	; (80081ac <xTaskPriorityDisinherit+0x108>)
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <xTaskPriorityDisinherit+0x104>)
 8008186:	441a      	add	r2, r3
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	3304      	adds	r3, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7ff f960 	bl	8007454 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008198:	697b      	ldr	r3, [r7, #20]
	}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000474 	.word	0x20000474
 80081a8:	20000478 	.word	0x20000478
 80081ac:	2000053c 	.word	0x2000053c

080081b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <prvAddCurrentTaskToDelayedList+0xb0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff f9a1 	bl	800750e <uxListRemove>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081d2:	4b24      	ldr	r3, [pc, #144]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	2201      	movs	r2, #1
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43da      	mvns	r2, r3
 80081e0:	4b21      	ldr	r3, [pc, #132]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4013      	ands	r3, r2
 80081e6:	4a20      	ldr	r2, [pc, #128]	; (8008268 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f0:	d10a      	bne.n	8008208 <prvAddCurrentTaskToDelayedList+0x58>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f8:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4619      	mov	r1, r3
 8008200:	481a      	ldr	r0, [pc, #104]	; (800826c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008202:	f7ff f927 	bl	8007454 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008206:	e026      	b.n	8008256 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4413      	add	r3, r2
 800820e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008210:	4b14      	ldr	r3, [pc, #80]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	429a      	cmp	r2, r3
 800821e:	d209      	bcs.n	8008234 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008220:	4b13      	ldr	r3, [pc, #76]	; (8008270 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7ff f935 	bl	800749c <vListInsert>
}
 8008232:	e010      	b.n	8008256 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008234:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <prvAddCurrentTaskToDelayedList+0xb4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3304      	adds	r3, #4
 800823e:	4619      	mov	r1, r3
 8008240:	4610      	mov	r0, r2
 8008242:	f7ff f92b 	bl	800749c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008246:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	429a      	cmp	r2, r3
 800824e:	d202      	bcs.n	8008256 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008250:	4a09      	ldr	r2, [pc, #36]	; (8008278 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	6013      	str	r3, [r2, #0]
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000538 	.word	0x20000538
 8008264:	20000474 	.word	0x20000474
 8008268:	2000053c 	.word	0x2000053c
 800826c:	20000520 	.word	0x20000520
 8008270:	20000508 	.word	0x20000508
 8008274:	20000504 	.word	0x20000504
 8008278:	20000550 	.word	0x20000550
 800827c:	00000000 	.word	0x00000000

08008280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <pxCurrentTCBConst2>)
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	f380 8809 	msr	PSP, r0
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8811 	msr	BASEPRI, r0
 800829a:	4770      	bx	lr
 800829c:	f3af 8000 	nop.w

080082a0 <pxCurrentTCBConst2>:
 80082a0:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <vPortEnterCritical+0x58>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	4a0d      	ldr	r2, [pc, #52]	; (8008300 <vPortEnterCritical+0x58>)
 80082ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <vPortEnterCritical+0x58>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10f      	bne.n	80082f4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <vPortEnterCritical+0x5c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <vPortEnterCritical+0x4c>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	603b      	str	r3, [r7, #0]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <vPortEnterCritical+0x4a>
	}
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	20000014 	.word	0x20000014
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800830e:	4b12      	ldr	r3, [pc, #72]	; (8008358 <vPortExitCritical+0x50>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <vPortExitCritical+0x24>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	607b      	str	r3, [r7, #4]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <vPortExitCritical+0x50>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <vPortExitCritical+0x50>)
 8008334:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008336:	4b08      	ldr	r3, [pc, #32]	; (8008358 <vPortExitCritical+0x50>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d105      	bne.n	800834a <vPortExitCritical+0x42>
 800833e:	2300      	movs	r3, #0
 8008340:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	f383 8811 	msr	BASEPRI, r3
}
 8008348:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000014 	.word	0x20000014
 800835c:	00000000 	.word	0x00000000

08008360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008360:	f3ef 8009 	mrs	r0, PSP
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <pxCurrentTCBConst>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f01e 0f10 	tst.w	lr, #16
 8008370:	bf08      	it	eq
 8008372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008384:	f380 8811 	msr	BASEPRI, r0
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f7ff fcb8 	bl	8007d04 <vTaskSwitchContext>
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	f380 8811 	msr	BASEPRI, r0
 800839c:	bc09      	pop	{r0, r3}
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	6808      	ldr	r0, [r1, #0]
 80083a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a6:	f01e 0f10 	tst.w	lr, #16
 80083aa:	bf08      	it	eq
 80083ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083b0:	f380 8809 	msr	PSP, r0
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst>:
 80083c0:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f7ff fbd7 	bl	8007b94 <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <SysTick_Handler+0x40>)
 80083ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
}
 80083fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008412:	f3ef 8305 	mrs	r3, IPSR
 8008416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b0f      	cmp	r3, #15
 800841c:	d914      	bls.n	8008448 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800841e:	4a17      	ldr	r2, [pc, #92]	; (800847c <vPortValidateInterruptPriority+0x70>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008428:	4b15      	ldr	r3, [pc, #84]	; (8008480 <vPortValidateInterruptPriority+0x74>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	7afa      	ldrb	r2, [r7, #11]
 800842e:	429a      	cmp	r2, r3
 8008430:	d20a      	bcs.n	8008448 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	607b      	str	r3, [r7, #4]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008448:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <vPortValidateInterruptPriority+0x78>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008450:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <vPortValidateInterruptPriority+0x7c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d90a      	bls.n	800846e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	603b      	str	r3, [r7, #0]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <vPortValidateInterruptPriority+0x60>
	}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	e000e3f0 	.word	0xe000e3f0
 8008480:	20000558 	.word	0x20000558
 8008484:	e000ed0c 	.word	0xe000ed0c
 8008488:	2000055c 	.word	0x2000055c

0800848c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe feac 	bl	80071f8 <USBH_LL_IncTimer>
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fef0 	bl	800729c <USBH_LL_Connect>
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe ff05 	bl	80072e2 <USBH_LL_Disconnect>
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
 80084ec:	4613      	mov	r3, r2
 80084ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe ff25 	bl	8007346 <USBH_LL_NotifyURBChange>
#endif
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fe9a 	bl	800724c <USBH_LL_PortEnabled>
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fea6 	bl	8007280 <USBH_LL_PortDisabled>
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008552:	4618      	mov	r0, r3
 8008554:	f7fa fd3e 	bl	8002fd4 <HAL_HCD_Stop>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f808 	bl	8008574 <USBH_Get_USB_Status>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008568:	7bbb      	ldrb	r3, [r7, #14]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d817      	bhi.n	80085b8 <USBH_Get_USB_Status+0x44>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <USBH_Get_USB_Status+0x1c>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085a7 	.word	0x080085a7
 8008598:	080085ad 	.word	0x080085ad
 800859c:	080085b3 	.word	0x080085b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
    break;
 80085a4:	e00b      	b.n	80085be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	73fb      	strb	r3, [r7, #15]
    break;
 80085aa:	e008      	b.n	80085be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73fb      	strb	r3, [r7, #15]
    break;
 80085b0:	e005      	b.n	80085be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085b2:	2302      	movs	r3, #2
 80085b4:	73fb      	strb	r3, [r7, #15]
    break;
 80085b6:	e002      	b.n	80085be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80085b8:	2302      	movs	r3, #2
 80085ba:	73fb      	strb	r3, [r7, #15]
    break;
 80085bc:	bf00      	nop
  }
  return usb_status;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <atoi>:
 80085cc:	220a      	movs	r2, #10
 80085ce:	2100      	movs	r1, #0
 80085d0:	f000 bc16 	b.w	8008e00 <strtol>

080085d4 <__errno>:
 80085d4:	4b01      	ldr	r3, [pc, #4]	; (80085dc <__errno+0x8>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000018 	.word	0x20000018

080085e0 <std>:
 80085e0:	2300      	movs	r3, #0
 80085e2:	b510      	push	{r4, lr}
 80085e4:	4604      	mov	r4, r0
 80085e6:	e9c0 3300 	strd	r3, r3, [r0]
 80085ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ee:	6083      	str	r3, [r0, #8]
 80085f0:	8181      	strh	r1, [r0, #12]
 80085f2:	6643      	str	r3, [r0, #100]	; 0x64
 80085f4:	81c2      	strh	r2, [r0, #14]
 80085f6:	6183      	str	r3, [r0, #24]
 80085f8:	4619      	mov	r1, r3
 80085fa:	2208      	movs	r2, #8
 80085fc:	305c      	adds	r0, #92	; 0x5c
 80085fe:	f000 f94d 	bl	800889c <memset>
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <std+0x38>)
 8008604:	6263      	str	r3, [r4, #36]	; 0x24
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <std+0x3c>)
 8008608:	62a3      	str	r3, [r4, #40]	; 0x28
 800860a:	4b05      	ldr	r3, [pc, #20]	; (8008620 <std+0x40>)
 800860c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <std+0x44>)
 8008610:	6224      	str	r4, [r4, #32]
 8008612:	6323      	str	r3, [r4, #48]	; 0x30
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	08008c75 	.word	0x08008c75
 800861c:	08008c97 	.word	0x08008c97
 8008620:	08008ccf 	.word	0x08008ccf
 8008624:	08008cf3 	.word	0x08008cf3

08008628 <_cleanup_r>:
 8008628:	4901      	ldr	r1, [pc, #4]	; (8008630 <_cleanup_r+0x8>)
 800862a:	f000 b8cc 	b.w	80087c6 <_fwalk_reent>
 800862e:	bf00      	nop
 8008630:	08008f65 	.word	0x08008f65

08008634 <__sfmoreglue>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	2268      	movs	r2, #104	; 0x68
 8008638:	1e4d      	subs	r5, r1, #1
 800863a:	4355      	muls	r5, r2
 800863c:	460e      	mov	r6, r1
 800863e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008642:	f000 f99f 	bl	8008984 <_malloc_r>
 8008646:	4604      	mov	r4, r0
 8008648:	b140      	cbz	r0, 800865c <__sfmoreglue+0x28>
 800864a:	2100      	movs	r1, #0
 800864c:	e9c0 1600 	strd	r1, r6, [r0]
 8008650:	300c      	adds	r0, #12
 8008652:	60a0      	str	r0, [r4, #8]
 8008654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008658:	f000 f920 	bl	800889c <memset>
 800865c:	4620      	mov	r0, r4
 800865e:	bd70      	pop	{r4, r5, r6, pc}

08008660 <__sfp_lock_acquire>:
 8008660:	4801      	ldr	r0, [pc, #4]	; (8008668 <__sfp_lock_acquire+0x8>)
 8008662:	f7f9 be55 	b.w	8002310 <__retarget_lock_acquire_recursive>
 8008666:	bf00      	nop
 8008668:	20000458 	.word	0x20000458

0800866c <__sfp_lock_release>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__sfp_lock_release+0x8>)
 800866e:	f7f9 be63 	b.w	8002338 <__retarget_lock_release_recursive>
 8008672:	bf00      	nop
 8008674:	20000458 	.word	0x20000458

08008678 <__sinit_lock_acquire>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__sinit_lock_acquire+0x8>)
 800867a:	f7f9 be49 	b.w	8002310 <__retarget_lock_acquire_recursive>
 800867e:	bf00      	nop
 8008680:	2000044c 	.word	0x2000044c

08008684 <__sinit_lock_release>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__sinit_lock_release+0x8>)
 8008686:	f7f9 be57 	b.w	8002338 <__retarget_lock_release_recursive>
 800868a:	bf00      	nop
 800868c:	2000044c 	.word	0x2000044c

08008690 <__sinit>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	f7ff fff0 	bl	8008678 <__sinit_lock_acquire>
 8008698:	69a3      	ldr	r3, [r4, #24]
 800869a:	b11b      	cbz	r3, 80086a4 <__sinit+0x14>
 800869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a0:	f7ff bff0 	b.w	8008684 <__sinit_lock_release>
 80086a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086a8:	6523      	str	r3, [r4, #80]	; 0x50
 80086aa:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <__sinit+0x68>)
 80086ac:	4a13      	ldr	r2, [pc, #76]	; (80086fc <__sinit+0x6c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	bf04      	itt	eq
 80086b6:	2301      	moveq	r3, #1
 80086b8:	61a3      	streq	r3, [r4, #24]
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 f820 	bl	8008700 <__sfp>
 80086c0:	6060      	str	r0, [r4, #4]
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 f81c 	bl	8008700 <__sfp>
 80086c8:	60a0      	str	r0, [r4, #8]
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 f818 	bl	8008700 <__sfp>
 80086d0:	2200      	movs	r2, #0
 80086d2:	60e0      	str	r0, [r4, #12]
 80086d4:	2104      	movs	r1, #4
 80086d6:	6860      	ldr	r0, [r4, #4]
 80086d8:	f7ff ff82 	bl	80085e0 <std>
 80086dc:	68a0      	ldr	r0, [r4, #8]
 80086de:	2201      	movs	r2, #1
 80086e0:	2109      	movs	r1, #9
 80086e2:	f7ff ff7d 	bl	80085e0 <std>
 80086e6:	68e0      	ldr	r0, [r4, #12]
 80086e8:	2202      	movs	r2, #2
 80086ea:	2112      	movs	r1, #18
 80086ec:	f7ff ff78 	bl	80085e0 <std>
 80086f0:	2301      	movs	r3, #1
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	e7d2      	b.n	800869c <__sinit+0xc>
 80086f6:	bf00      	nop
 80086f8:	08009f78 	.word	0x08009f78
 80086fc:	08008629 	.word	0x08008629

08008700 <__sfp>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	4607      	mov	r7, r0
 8008704:	f7ff ffac 	bl	8008660 <__sfp_lock_acquire>
 8008708:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <__sfp+0x84>)
 800870a:	681e      	ldr	r6, [r3, #0]
 800870c:	69b3      	ldr	r3, [r6, #24]
 800870e:	b913      	cbnz	r3, 8008716 <__sfp+0x16>
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbd 	bl	8008690 <__sinit>
 8008716:	3648      	adds	r6, #72	; 0x48
 8008718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800871c:	3b01      	subs	r3, #1
 800871e:	d503      	bpl.n	8008728 <__sfp+0x28>
 8008720:	6833      	ldr	r3, [r6, #0]
 8008722:	b30b      	cbz	r3, 8008768 <__sfp+0x68>
 8008724:	6836      	ldr	r6, [r6, #0]
 8008726:	e7f7      	b.n	8008718 <__sfp+0x18>
 8008728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800872c:	b9d5      	cbnz	r5, 8008764 <__sfp+0x64>
 800872e:	4b16      	ldr	r3, [pc, #88]	; (8008788 <__sfp+0x88>)
 8008730:	60e3      	str	r3, [r4, #12]
 8008732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008736:	6665      	str	r5, [r4, #100]	; 0x64
 8008738:	f7f9 fdc4 	bl	80022c4 <__retarget_lock_init_recursive>
 800873c:	f7ff ff96 	bl	800866c <__sfp_lock_release>
 8008740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008748:	6025      	str	r5, [r4, #0]
 800874a:	61a5      	str	r5, [r4, #24]
 800874c:	2208      	movs	r2, #8
 800874e:	4629      	mov	r1, r5
 8008750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008754:	f000 f8a2 	bl	800889c <memset>
 8008758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800875c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008760:	4620      	mov	r0, r4
 8008762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008764:	3468      	adds	r4, #104	; 0x68
 8008766:	e7d9      	b.n	800871c <__sfp+0x1c>
 8008768:	2104      	movs	r1, #4
 800876a:	4638      	mov	r0, r7
 800876c:	f7ff ff62 	bl	8008634 <__sfmoreglue>
 8008770:	4604      	mov	r4, r0
 8008772:	6030      	str	r0, [r6, #0]
 8008774:	2800      	cmp	r0, #0
 8008776:	d1d5      	bne.n	8008724 <__sfp+0x24>
 8008778:	f7ff ff78 	bl	800866c <__sfp_lock_release>
 800877c:	230c      	movs	r3, #12
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	e7ee      	b.n	8008760 <__sfp+0x60>
 8008782:	bf00      	nop
 8008784:	08009f78 	.word	0x08009f78
 8008788:	ffff0001 	.word	0xffff0001

0800878c <_fwalk>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	460f      	mov	r7, r1
 8008792:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008796:	2600      	movs	r6, #0
 8008798:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800879c:	f1b8 0801 	subs.w	r8, r8, #1
 80087a0:	d505      	bpl.n	80087ae <_fwalk+0x22>
 80087a2:	6824      	ldr	r4, [r4, #0]
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	d1f7      	bne.n	8008798 <_fwalk+0xc>
 80087a8:	4630      	mov	r0, r6
 80087aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d906      	bls.n	80087c2 <_fwalk+0x36>
 80087b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087b8:	3301      	adds	r3, #1
 80087ba:	d002      	beq.n	80087c2 <_fwalk+0x36>
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	4306      	orrs	r6, r0
 80087c2:	3568      	adds	r5, #104	; 0x68
 80087c4:	e7ea      	b.n	800879c <_fwalk+0x10>

080087c6 <_fwalk_reent>:
 80087c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ca:	4606      	mov	r6, r0
 80087cc:	4688      	mov	r8, r1
 80087ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087d2:	2700      	movs	r7, #0
 80087d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087d8:	f1b9 0901 	subs.w	r9, r9, #1
 80087dc:	d505      	bpl.n	80087ea <_fwalk_reent+0x24>
 80087de:	6824      	ldr	r4, [r4, #0]
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	d1f7      	bne.n	80087d4 <_fwalk_reent+0xe>
 80087e4:	4638      	mov	r0, r7
 80087e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d907      	bls.n	8008800 <_fwalk_reent+0x3a>
 80087f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087f4:	3301      	adds	r3, #1
 80087f6:	d003      	beq.n	8008800 <_fwalk_reent+0x3a>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	47c0      	blx	r8
 80087fe:	4307      	orrs	r7, r0
 8008800:	3568      	adds	r5, #104	; 0x68
 8008802:	e7e9      	b.n	80087d8 <_fwalk_reent+0x12>

08008804 <getchar>:
 8008804:	4b07      	ldr	r3, [pc, #28]	; (8008824 <getchar+0x20>)
 8008806:	b510      	push	{r4, lr}
 8008808:	681c      	ldr	r4, [r3, #0]
 800880a:	b124      	cbz	r4, 8008816 <getchar+0x12>
 800880c:	69a3      	ldr	r3, [r4, #24]
 800880e:	b913      	cbnz	r3, 8008816 <getchar+0x12>
 8008810:	4620      	mov	r0, r4
 8008812:	f7ff ff3d 	bl	8008690 <__sinit>
 8008816:	6861      	ldr	r1, [r4, #4]
 8008818:	4620      	mov	r0, r4
 800881a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881e:	f000 bbef 	b.w	8009000 <_getc_r>
 8008822:	bf00      	nop
 8008824:	20000018 	.word	0x20000018

08008828 <__libc_init_array>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	4d0d      	ldr	r5, [pc, #52]	; (8008860 <__libc_init_array+0x38>)
 800882c:	4c0d      	ldr	r4, [pc, #52]	; (8008864 <__libc_init_array+0x3c>)
 800882e:	1b64      	subs	r4, r4, r5
 8008830:	10a4      	asrs	r4, r4, #2
 8008832:	2600      	movs	r6, #0
 8008834:	42a6      	cmp	r6, r4
 8008836:	d109      	bne.n	800884c <__libc_init_array+0x24>
 8008838:	4d0b      	ldr	r5, [pc, #44]	; (8008868 <__libc_init_array+0x40>)
 800883a:	4c0c      	ldr	r4, [pc, #48]	; (800886c <__libc_init_array+0x44>)
 800883c:	f001 f98e 	bl	8009b5c <_init>
 8008840:	1b64      	subs	r4, r4, r5
 8008842:	10a4      	asrs	r4, r4, #2
 8008844:	2600      	movs	r6, #0
 8008846:	42a6      	cmp	r6, r4
 8008848:	d105      	bne.n	8008856 <__libc_init_array+0x2e>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008850:	4798      	blx	r3
 8008852:	3601      	adds	r6, #1
 8008854:	e7ee      	b.n	8008834 <__libc_init_array+0xc>
 8008856:	f855 3b04 	ldr.w	r3, [r5], #4
 800885a:	4798      	blx	r3
 800885c:	3601      	adds	r6, #1
 800885e:	e7f2      	b.n	8008846 <__libc_init_array+0x1e>
 8008860:	0800a0b8 	.word	0x0800a0b8
 8008864:	0800a0b8 	.word	0x0800a0b8
 8008868:	0800a0b8 	.word	0x0800a0b8
 800886c:	0800a0bc 	.word	0x0800a0bc

08008870 <malloc>:
 8008870:	4b02      	ldr	r3, [pc, #8]	; (800887c <malloc+0xc>)
 8008872:	4601      	mov	r1, r0
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	f000 b885 	b.w	8008984 <_malloc_r>
 800887a:	bf00      	nop
 800887c:	20000018 	.word	0x20000018

08008880 <memcpy>:
 8008880:	440a      	add	r2, r1
 8008882:	4291      	cmp	r1, r2
 8008884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008888:	d100      	bne.n	800888c <memcpy+0xc>
 800888a:	4770      	bx	lr
 800888c:	b510      	push	{r4, lr}
 800888e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008896:	4291      	cmp	r1, r2
 8008898:	d1f9      	bne.n	800888e <memcpy+0xe>
 800889a:	bd10      	pop	{r4, pc}

0800889c <memset>:
 800889c:	4402      	add	r2, r0
 800889e:	4603      	mov	r3, r0
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d100      	bne.n	80088a6 <memset+0xa>
 80088a4:	4770      	bx	lr
 80088a6:	f803 1b01 	strb.w	r1, [r3], #1
 80088aa:	e7f9      	b.n	80088a0 <memset+0x4>

080088ac <_free_r>:
 80088ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ae:	2900      	cmp	r1, #0
 80088b0:	d044      	beq.n	800893c <_free_r+0x90>
 80088b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b6:	9001      	str	r0, [sp, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f1a1 0404 	sub.w	r4, r1, #4
 80088be:	bfb8      	it	lt
 80088c0:	18e4      	addlt	r4, r4, r3
 80088c2:	f000 fc55 	bl	8009170 <__malloc_lock>
 80088c6:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <_free_r+0x94>)
 80088c8:	9801      	ldr	r0, [sp, #4]
 80088ca:	6813      	ldr	r3, [r2, #0]
 80088cc:	b933      	cbnz	r3, 80088dc <_free_r+0x30>
 80088ce:	6063      	str	r3, [r4, #4]
 80088d0:	6014      	str	r4, [r2, #0]
 80088d2:	b003      	add	sp, #12
 80088d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088d8:	f000 bc50 	b.w	800917c <__malloc_unlock>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d908      	bls.n	80088f2 <_free_r+0x46>
 80088e0:	6825      	ldr	r5, [r4, #0]
 80088e2:	1961      	adds	r1, r4, r5
 80088e4:	428b      	cmp	r3, r1
 80088e6:	bf01      	itttt	eq
 80088e8:	6819      	ldreq	r1, [r3, #0]
 80088ea:	685b      	ldreq	r3, [r3, #4]
 80088ec:	1949      	addeq	r1, r1, r5
 80088ee:	6021      	streq	r1, [r4, #0]
 80088f0:	e7ed      	b.n	80088ce <_free_r+0x22>
 80088f2:	461a      	mov	r2, r3
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	b10b      	cbz	r3, 80088fc <_free_r+0x50>
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d9fa      	bls.n	80088f2 <_free_r+0x46>
 80088fc:	6811      	ldr	r1, [r2, #0]
 80088fe:	1855      	adds	r5, r2, r1
 8008900:	42a5      	cmp	r5, r4
 8008902:	d10b      	bne.n	800891c <_free_r+0x70>
 8008904:	6824      	ldr	r4, [r4, #0]
 8008906:	4421      	add	r1, r4
 8008908:	1854      	adds	r4, r2, r1
 800890a:	42a3      	cmp	r3, r4
 800890c:	6011      	str	r1, [r2, #0]
 800890e:	d1e0      	bne.n	80088d2 <_free_r+0x26>
 8008910:	681c      	ldr	r4, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	6053      	str	r3, [r2, #4]
 8008916:	4421      	add	r1, r4
 8008918:	6011      	str	r1, [r2, #0]
 800891a:	e7da      	b.n	80088d2 <_free_r+0x26>
 800891c:	d902      	bls.n	8008924 <_free_r+0x78>
 800891e:	230c      	movs	r3, #12
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	e7d6      	b.n	80088d2 <_free_r+0x26>
 8008924:	6825      	ldr	r5, [r4, #0]
 8008926:	1961      	adds	r1, r4, r5
 8008928:	428b      	cmp	r3, r1
 800892a:	bf04      	itt	eq
 800892c:	6819      	ldreq	r1, [r3, #0]
 800892e:	685b      	ldreq	r3, [r3, #4]
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	bf04      	itt	eq
 8008934:	1949      	addeq	r1, r1, r5
 8008936:	6021      	streq	r1, [r4, #0]
 8008938:	6054      	str	r4, [r2, #4]
 800893a:	e7ca      	b.n	80088d2 <_free_r+0x26>
 800893c:	b003      	add	sp, #12
 800893e:	bd30      	pop	{r4, r5, pc}
 8008940:	20000864 	.word	0x20000864

08008944 <sbrk_aligned>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4e0e      	ldr	r6, [pc, #56]	; (8008980 <sbrk_aligned+0x3c>)
 8008948:	460c      	mov	r4, r1
 800894a:	6831      	ldr	r1, [r6, #0]
 800894c:	4605      	mov	r5, r0
 800894e:	b911      	cbnz	r1, 8008956 <sbrk_aligned+0x12>
 8008950:	f000 f8ba 	bl	8008ac8 <_sbrk_r>
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f000 f8b5 	bl	8008ac8 <_sbrk_r>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	d00a      	beq.n	8008978 <sbrk_aligned+0x34>
 8008962:	1cc4      	adds	r4, r0, #3
 8008964:	f024 0403 	bic.w	r4, r4, #3
 8008968:	42a0      	cmp	r0, r4
 800896a:	d007      	beq.n	800897c <sbrk_aligned+0x38>
 800896c:	1a21      	subs	r1, r4, r0
 800896e:	4628      	mov	r0, r5
 8008970:	f000 f8aa 	bl	8008ac8 <_sbrk_r>
 8008974:	3001      	adds	r0, #1
 8008976:	d101      	bne.n	800897c <sbrk_aligned+0x38>
 8008978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800897c:	4620      	mov	r0, r4
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	20000868 	.word	0x20000868

08008984 <_malloc_r>:
 8008984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008988:	1ccd      	adds	r5, r1, #3
 800898a:	f025 0503 	bic.w	r5, r5, #3
 800898e:	3508      	adds	r5, #8
 8008990:	2d0c      	cmp	r5, #12
 8008992:	bf38      	it	cc
 8008994:	250c      	movcc	r5, #12
 8008996:	2d00      	cmp	r5, #0
 8008998:	4607      	mov	r7, r0
 800899a:	db01      	blt.n	80089a0 <_malloc_r+0x1c>
 800899c:	42a9      	cmp	r1, r5
 800899e:	d905      	bls.n	80089ac <_malloc_r+0x28>
 80089a0:	230c      	movs	r3, #12
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	2600      	movs	r6, #0
 80089a6:	4630      	mov	r0, r6
 80089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ac:	4e2e      	ldr	r6, [pc, #184]	; (8008a68 <_malloc_r+0xe4>)
 80089ae:	f000 fbdf 	bl	8009170 <__malloc_lock>
 80089b2:	6833      	ldr	r3, [r6, #0]
 80089b4:	461c      	mov	r4, r3
 80089b6:	bb34      	cbnz	r4, 8008a06 <_malloc_r+0x82>
 80089b8:	4629      	mov	r1, r5
 80089ba:	4638      	mov	r0, r7
 80089bc:	f7ff ffc2 	bl	8008944 <sbrk_aligned>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	4604      	mov	r4, r0
 80089c4:	d14d      	bne.n	8008a62 <_malloc_r+0xde>
 80089c6:	6834      	ldr	r4, [r6, #0]
 80089c8:	4626      	mov	r6, r4
 80089ca:	2e00      	cmp	r6, #0
 80089cc:	d140      	bne.n	8008a50 <_malloc_r+0xcc>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	4631      	mov	r1, r6
 80089d2:	4638      	mov	r0, r7
 80089d4:	eb04 0803 	add.w	r8, r4, r3
 80089d8:	f000 f876 	bl	8008ac8 <_sbrk_r>
 80089dc:	4580      	cmp	r8, r0
 80089de:	d13a      	bne.n	8008a56 <_malloc_r+0xd2>
 80089e0:	6821      	ldr	r1, [r4, #0]
 80089e2:	3503      	adds	r5, #3
 80089e4:	1a6d      	subs	r5, r5, r1
 80089e6:	f025 0503 	bic.w	r5, r5, #3
 80089ea:	3508      	adds	r5, #8
 80089ec:	2d0c      	cmp	r5, #12
 80089ee:	bf38      	it	cc
 80089f0:	250c      	movcc	r5, #12
 80089f2:	4629      	mov	r1, r5
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7ff ffa5 	bl	8008944 <sbrk_aligned>
 80089fa:	3001      	adds	r0, #1
 80089fc:	d02b      	beq.n	8008a56 <_malloc_r+0xd2>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	442b      	add	r3, r5
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	e00e      	b.n	8008a24 <_malloc_r+0xa0>
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	1b52      	subs	r2, r2, r5
 8008a0a:	d41e      	bmi.n	8008a4a <_malloc_r+0xc6>
 8008a0c:	2a0b      	cmp	r2, #11
 8008a0e:	d916      	bls.n	8008a3e <_malloc_r+0xba>
 8008a10:	1961      	adds	r1, r4, r5
 8008a12:	42a3      	cmp	r3, r4
 8008a14:	6025      	str	r5, [r4, #0]
 8008a16:	bf18      	it	ne
 8008a18:	6059      	strne	r1, [r3, #4]
 8008a1a:	6863      	ldr	r3, [r4, #4]
 8008a1c:	bf08      	it	eq
 8008a1e:	6031      	streq	r1, [r6, #0]
 8008a20:	5162      	str	r2, [r4, r5]
 8008a22:	604b      	str	r3, [r1, #4]
 8008a24:	4638      	mov	r0, r7
 8008a26:	f104 060b 	add.w	r6, r4, #11
 8008a2a:	f000 fba7 	bl	800917c <__malloc_unlock>
 8008a2e:	f026 0607 	bic.w	r6, r6, #7
 8008a32:	1d23      	adds	r3, r4, #4
 8008a34:	1af2      	subs	r2, r6, r3
 8008a36:	d0b6      	beq.n	80089a6 <_malloc_r+0x22>
 8008a38:	1b9b      	subs	r3, r3, r6
 8008a3a:	50a3      	str	r3, [r4, r2]
 8008a3c:	e7b3      	b.n	80089a6 <_malloc_r+0x22>
 8008a3e:	6862      	ldr	r2, [r4, #4]
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	bf0c      	ite	eq
 8008a44:	6032      	streq	r2, [r6, #0]
 8008a46:	605a      	strne	r2, [r3, #4]
 8008a48:	e7ec      	b.n	8008a24 <_malloc_r+0xa0>
 8008a4a:	4623      	mov	r3, r4
 8008a4c:	6864      	ldr	r4, [r4, #4]
 8008a4e:	e7b2      	b.n	80089b6 <_malloc_r+0x32>
 8008a50:	4634      	mov	r4, r6
 8008a52:	6876      	ldr	r6, [r6, #4]
 8008a54:	e7b9      	b.n	80089ca <_malloc_r+0x46>
 8008a56:	230c      	movs	r3, #12
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f000 fb8e 	bl	800917c <__malloc_unlock>
 8008a60:	e7a1      	b.n	80089a6 <_malloc_r+0x22>
 8008a62:	6025      	str	r5, [r4, #0]
 8008a64:	e7de      	b.n	8008a24 <_malloc_r+0xa0>
 8008a66:	bf00      	nop
 8008a68:	20000864 	.word	0x20000864

08008a6c <iprintf>:
 8008a6c:	b40f      	push	{r0, r1, r2, r3}
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <iprintf+0x2c>)
 8008a70:	b513      	push	{r0, r1, r4, lr}
 8008a72:	681c      	ldr	r4, [r3, #0]
 8008a74:	b124      	cbz	r4, 8008a80 <iprintf+0x14>
 8008a76:	69a3      	ldr	r3, [r4, #24]
 8008a78:	b913      	cbnz	r3, 8008a80 <iprintf+0x14>
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f7ff fe08 	bl	8008690 <__sinit>
 8008a80:	ab05      	add	r3, sp, #20
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	68a1      	ldr	r1, [r4, #8]
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 fba7 	bl	80091dc <_vfiprintf_r>
 8008a8e:	b002      	add	sp, #8
 8008a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a94:	b004      	add	sp, #16
 8008a96:	4770      	bx	lr
 8008a98:	20000018 	.word	0x20000018

08008a9c <putchar>:
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <putchar+0x28>)
 8008a9e:	b513      	push	{r0, r1, r4, lr}
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	b134      	cbz	r4, 8008ab4 <putchar+0x18>
 8008aa6:	69a3      	ldr	r3, [r4, #24]
 8008aa8:	b923      	cbnz	r3, 8008ab4 <putchar+0x18>
 8008aaa:	9001      	str	r0, [sp, #4]
 8008aac:	4620      	mov	r0, r4
 8008aae:	f7ff fdef 	bl	8008690 <__sinit>
 8008ab2:	9901      	ldr	r1, [sp, #4]
 8008ab4:	68a2      	ldr	r2, [r4, #8]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	b002      	add	sp, #8
 8008aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008abe:	f000 be51 	b.w	8009764 <_putc_r>
 8008ac2:	bf00      	nop
 8008ac4:	20000018 	.word	0x20000018

08008ac8 <_sbrk_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d06      	ldr	r5, [pc, #24]	; (8008ae4 <_sbrk_r+0x1c>)
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	f7f9 fb0a 	bl	80020ec <_sbrk>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_sbrk_r+0x1a>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_sbrk_r+0x1a>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	2000086c 	.word	0x2000086c

08008ae8 <setvbuf>:
 8008ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008aec:	461d      	mov	r5, r3
 8008aee:	4b5d      	ldr	r3, [pc, #372]	; (8008c64 <setvbuf+0x17c>)
 8008af0:	681f      	ldr	r7, [r3, #0]
 8008af2:	4604      	mov	r4, r0
 8008af4:	460e      	mov	r6, r1
 8008af6:	4690      	mov	r8, r2
 8008af8:	b127      	cbz	r7, 8008b04 <setvbuf+0x1c>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	b913      	cbnz	r3, 8008b04 <setvbuf+0x1c>
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7ff fdc6 	bl	8008690 <__sinit>
 8008b04:	4b58      	ldr	r3, [pc, #352]	; (8008c68 <setvbuf+0x180>)
 8008b06:	429c      	cmp	r4, r3
 8008b08:	d167      	bne.n	8008bda <setvbuf+0xf2>
 8008b0a:	687c      	ldr	r4, [r7, #4]
 8008b0c:	f1b8 0f02 	cmp.w	r8, #2
 8008b10:	d006      	beq.n	8008b20 <setvbuf+0x38>
 8008b12:	f1b8 0f01 	cmp.w	r8, #1
 8008b16:	f200 809f 	bhi.w	8008c58 <setvbuf+0x170>
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	f2c0 809c 	blt.w	8008c58 <setvbuf+0x170>
 8008b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b22:	07db      	lsls	r3, r3, #31
 8008b24:	d405      	bmi.n	8008b32 <setvbuf+0x4a>
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	0598      	lsls	r0, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <setvbuf+0x4a>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2e:	f7f9 fbef 	bl	8002310 <__retarget_lock_acquire_recursive>
 8008b32:	4621      	mov	r1, r4
 8008b34:	4638      	mov	r0, r7
 8008b36:	f000 fa15 	bl	8008f64 <_fflush_r>
 8008b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b3c:	b141      	cbz	r1, 8008b50 <setvbuf+0x68>
 8008b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b42:	4299      	cmp	r1, r3
 8008b44:	d002      	beq.n	8008b4c <setvbuf+0x64>
 8008b46:	4638      	mov	r0, r7
 8008b48:	f7ff feb0 	bl	80088ac <_free_r>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b50:	2300      	movs	r3, #0
 8008b52:	61a3      	str	r3, [r4, #24]
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	0619      	lsls	r1, r3, #24
 8008b5a:	d503      	bpl.n	8008b64 <setvbuf+0x7c>
 8008b5c:	6921      	ldr	r1, [r4, #16]
 8008b5e:	4638      	mov	r0, r7
 8008b60:	f7ff fea4 	bl	80088ac <_free_r>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	f1b8 0f02 	cmp.w	r8, #2
 8008b72:	81a3      	strh	r3, [r4, #12]
 8008b74:	d06c      	beq.n	8008c50 <setvbuf+0x168>
 8008b76:	ab01      	add	r3, sp, #4
 8008b78:	466a      	mov	r2, sp
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f000 fa91 	bl	80090a4 <__swhatbuf_r>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	4318      	orrs	r0, r3
 8008b86:	81a0      	strh	r0, [r4, #12]
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	d130      	bne.n	8008bee <setvbuf+0x106>
 8008b8c:	9d00      	ldr	r5, [sp, #0]
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f7ff fe6e 	bl	8008870 <malloc>
 8008b94:	4606      	mov	r6, r0
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d155      	bne.n	8008c46 <setvbuf+0x15e>
 8008b9a:	f8dd 9000 	ldr.w	r9, [sp]
 8008b9e:	45a9      	cmp	r9, r5
 8008ba0:	d14a      	bne.n	8008c38 <setvbuf+0x150>
 8008ba2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60a2      	str	r2, [r4, #8]
 8008baa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008bae:	6022      	str	r2, [r4, #0]
 8008bb0:	6122      	str	r2, [r4, #16]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb8:	6162      	str	r2, [r4, #20]
 8008bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	07d2      	lsls	r2, r2, #31
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	d405      	bmi.n	8008bd2 <setvbuf+0xea>
 8008bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008bca:	d102      	bne.n	8008bd2 <setvbuf+0xea>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f7f9 fbb3 	bl	8002338 <__retarget_lock_release_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	b003      	add	sp, #12
 8008bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <setvbuf+0x184>)
 8008bdc:	429c      	cmp	r4, r3
 8008bde:	d101      	bne.n	8008be4 <setvbuf+0xfc>
 8008be0:	68bc      	ldr	r4, [r7, #8]
 8008be2:	e793      	b.n	8008b0c <setvbuf+0x24>
 8008be4:	4b22      	ldr	r3, [pc, #136]	; (8008c70 <setvbuf+0x188>)
 8008be6:	429c      	cmp	r4, r3
 8008be8:	bf08      	it	eq
 8008bea:	68fc      	ldreq	r4, [r7, #12]
 8008bec:	e78e      	b.n	8008b0c <setvbuf+0x24>
 8008bee:	2e00      	cmp	r6, #0
 8008bf0:	d0cd      	beq.n	8008b8e <setvbuf+0xa6>
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	b913      	cbnz	r3, 8008bfc <setvbuf+0x114>
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f7ff fd4a 	bl	8008690 <__sinit>
 8008bfc:	f1b8 0f01 	cmp.w	r8, #1
 8008c00:	bf08      	it	eq
 8008c02:	89a3      	ldrheq	r3, [r4, #12]
 8008c04:	6026      	str	r6, [r4, #0]
 8008c06:	bf04      	itt	eq
 8008c08:	f043 0301 	orreq.w	r3, r3, #1
 8008c0c:	81a3      	strheq	r3, [r4, #12]
 8008c0e:	89a2      	ldrh	r2, [r4, #12]
 8008c10:	f012 0308 	ands.w	r3, r2, #8
 8008c14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008c18:	d01c      	beq.n	8008c54 <setvbuf+0x16c>
 8008c1a:	07d3      	lsls	r3, r2, #31
 8008c1c:	bf41      	itttt	mi
 8008c1e:	2300      	movmi	r3, #0
 8008c20:	426d      	negmi	r5, r5
 8008c22:	60a3      	strmi	r3, [r4, #8]
 8008c24:	61a5      	strmi	r5, [r4, #24]
 8008c26:	bf58      	it	pl
 8008c28:	60a5      	strpl	r5, [r4, #8]
 8008c2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008c2c:	f015 0501 	ands.w	r5, r5, #1
 8008c30:	d115      	bne.n	8008c5e <setvbuf+0x176>
 8008c32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008c36:	e7c8      	b.n	8008bca <setvbuf+0xe2>
 8008c38:	4648      	mov	r0, r9
 8008c3a:	f7ff fe19 	bl	8008870 <malloc>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d0ae      	beq.n	8008ba2 <setvbuf+0xba>
 8008c44:	464d      	mov	r5, r9
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	e7d0      	b.n	8008bf2 <setvbuf+0x10a>
 8008c50:	2500      	movs	r5, #0
 8008c52:	e7a8      	b.n	8008ba6 <setvbuf+0xbe>
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	e7e8      	b.n	8008c2a <setvbuf+0x142>
 8008c58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008c5c:	e7b9      	b.n	8008bd2 <setvbuf+0xea>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	e7b7      	b.n	8008bd2 <setvbuf+0xea>
 8008c62:	bf00      	nop
 8008c64:	20000018 	.word	0x20000018
 8008c68:	08009f38 	.word	0x08009f38
 8008c6c:	08009f58 	.word	0x08009f58
 8008c70:	08009f18 	.word	0x08009f18

08008c74 <__sread>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	460c      	mov	r4, r1
 8008c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7c:	f000 fdba 	bl	80097f4 <_read_r>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	bfab      	itete	ge
 8008c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c86:	89a3      	ldrhlt	r3, [r4, #12]
 8008c88:	181b      	addge	r3, r3, r0
 8008c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c8e:	bfac      	ite	ge
 8008c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c92:	81a3      	strhlt	r3, [r4, #12]
 8008c94:	bd10      	pop	{r4, pc}

08008c96 <__swrite>:
 8008c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9a:	461f      	mov	r7, r3
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	05db      	lsls	r3, r3, #23
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	d505      	bpl.n	8008cb4 <__swrite+0x1e>
 8008ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cac:	2302      	movs	r3, #2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f000 f9e6 	bl	8009080 <_lseek_r>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cca:	f000 b8a3 	b.w	8008e14 <_write_r>

08008cce <__sseek>:
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd6:	f000 f9d3 	bl	8009080 <_lseek_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	bf15      	itete	ne
 8008ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cea:	81a3      	strheq	r3, [r4, #12]
 8008cec:	bf18      	it	ne
 8008cee:	81a3      	strhne	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__sclose>:
 8008cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf6:	f000 b89f 	b.w	8008e38 <_close_r>
	...

08008cfc <_strtol_l.constprop.0>:
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d02:	d001      	beq.n	8008d08 <_strtol_l.constprop.0+0xc>
 8008d04:	2b24      	cmp	r3, #36	; 0x24
 8008d06:	d906      	bls.n	8008d16 <_strtol_l.constprop.0+0x1a>
 8008d08:	f7ff fc64 	bl	80085d4 <__errno>
 8008d0c:	2316      	movs	r3, #22
 8008d0e:	6003      	str	r3, [r0, #0]
 8008d10:	2000      	movs	r0, #0
 8008d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008dfc <_strtol_l.constprop.0+0x100>
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	462e      	mov	r6, r5
 8008d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d22:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008d26:	f017 0708 	ands.w	r7, r7, #8
 8008d2a:	d1f7      	bne.n	8008d1c <_strtol_l.constprop.0+0x20>
 8008d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d2e:	d132      	bne.n	8008d96 <_strtol_l.constprop.0+0x9a>
 8008d30:	782c      	ldrb	r4, [r5, #0]
 8008d32:	2701      	movs	r7, #1
 8008d34:	1cb5      	adds	r5, r6, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d05b      	beq.n	8008df2 <_strtol_l.constprop.0+0xf6>
 8008d3a:	2b10      	cmp	r3, #16
 8008d3c:	d109      	bne.n	8008d52 <_strtol_l.constprop.0+0x56>
 8008d3e:	2c30      	cmp	r4, #48	; 0x30
 8008d40:	d107      	bne.n	8008d52 <_strtol_l.constprop.0+0x56>
 8008d42:	782c      	ldrb	r4, [r5, #0]
 8008d44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d48:	2c58      	cmp	r4, #88	; 0x58
 8008d4a:	d14d      	bne.n	8008de8 <_strtol_l.constprop.0+0xec>
 8008d4c:	786c      	ldrb	r4, [r5, #1]
 8008d4e:	2310      	movs	r3, #16
 8008d50:	3502      	adds	r5, #2
 8008d52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008d56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008d5a:	f04f 0c00 	mov.w	ip, #0
 8008d5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008d62:	4666      	mov	r6, ip
 8008d64:	fb03 8a19 	mls	sl, r3, r9, r8
 8008d68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008d6c:	f1be 0f09 	cmp.w	lr, #9
 8008d70:	d816      	bhi.n	8008da0 <_strtol_l.constprop.0+0xa4>
 8008d72:	4674      	mov	r4, lr
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	dd24      	ble.n	8008dc2 <_strtol_l.constprop.0+0xc6>
 8008d78:	f1bc 0f00 	cmp.w	ip, #0
 8008d7c:	db1e      	blt.n	8008dbc <_strtol_l.constprop.0+0xc0>
 8008d7e:	45b1      	cmp	r9, r6
 8008d80:	d31c      	bcc.n	8008dbc <_strtol_l.constprop.0+0xc0>
 8008d82:	d101      	bne.n	8008d88 <_strtol_l.constprop.0+0x8c>
 8008d84:	45a2      	cmp	sl, r4
 8008d86:	db19      	blt.n	8008dbc <_strtol_l.constprop.0+0xc0>
 8008d88:	fb06 4603 	mla	r6, r6, r3, r4
 8008d8c:	f04f 0c01 	mov.w	ip, #1
 8008d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d94:	e7e8      	b.n	8008d68 <_strtol_l.constprop.0+0x6c>
 8008d96:	2c2b      	cmp	r4, #43	; 0x2b
 8008d98:	bf04      	itt	eq
 8008d9a:	782c      	ldrbeq	r4, [r5, #0]
 8008d9c:	1cb5      	addeq	r5, r6, #2
 8008d9e:	e7ca      	b.n	8008d36 <_strtol_l.constprop.0+0x3a>
 8008da0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008da4:	f1be 0f19 	cmp.w	lr, #25
 8008da8:	d801      	bhi.n	8008dae <_strtol_l.constprop.0+0xb2>
 8008daa:	3c37      	subs	r4, #55	; 0x37
 8008dac:	e7e2      	b.n	8008d74 <_strtol_l.constprop.0+0x78>
 8008dae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008db2:	f1be 0f19 	cmp.w	lr, #25
 8008db6:	d804      	bhi.n	8008dc2 <_strtol_l.constprop.0+0xc6>
 8008db8:	3c57      	subs	r4, #87	; 0x57
 8008dba:	e7db      	b.n	8008d74 <_strtol_l.constprop.0+0x78>
 8008dbc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008dc0:	e7e6      	b.n	8008d90 <_strtol_l.constprop.0+0x94>
 8008dc2:	f1bc 0f00 	cmp.w	ip, #0
 8008dc6:	da05      	bge.n	8008dd4 <_strtol_l.constprop.0+0xd8>
 8008dc8:	2322      	movs	r3, #34	; 0x22
 8008dca:	6003      	str	r3, [r0, #0]
 8008dcc:	4646      	mov	r6, r8
 8008dce:	b942      	cbnz	r2, 8008de2 <_strtol_l.constprop.0+0xe6>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	e79e      	b.n	8008d12 <_strtol_l.constprop.0+0x16>
 8008dd4:	b107      	cbz	r7, 8008dd8 <_strtol_l.constprop.0+0xdc>
 8008dd6:	4276      	negs	r6, r6
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	d0f9      	beq.n	8008dd0 <_strtol_l.constprop.0+0xd4>
 8008ddc:	f1bc 0f00 	cmp.w	ip, #0
 8008de0:	d000      	beq.n	8008de4 <_strtol_l.constprop.0+0xe8>
 8008de2:	1e69      	subs	r1, r5, #1
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	e7f3      	b.n	8008dd0 <_strtol_l.constprop.0+0xd4>
 8008de8:	2430      	movs	r4, #48	; 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1b1      	bne.n	8008d52 <_strtol_l.constprop.0+0x56>
 8008dee:	2308      	movs	r3, #8
 8008df0:	e7af      	b.n	8008d52 <_strtol_l.constprop.0+0x56>
 8008df2:	2c30      	cmp	r4, #48	; 0x30
 8008df4:	d0a5      	beq.n	8008d42 <_strtol_l.constprop.0+0x46>
 8008df6:	230a      	movs	r3, #10
 8008df8:	e7ab      	b.n	8008d52 <_strtol_l.constprop.0+0x56>
 8008dfa:	bf00      	nop
 8008dfc:	08009f7d 	.word	0x08009f7d

08008e00 <strtol>:
 8008e00:	4613      	mov	r3, r2
 8008e02:	460a      	mov	r2, r1
 8008e04:	4601      	mov	r1, r0
 8008e06:	4802      	ldr	r0, [pc, #8]	; (8008e10 <strtol+0x10>)
 8008e08:	6800      	ldr	r0, [r0, #0]
 8008e0a:	f7ff bf77 	b.w	8008cfc <_strtol_l.constprop.0>
 8008e0e:	bf00      	nop
 8008e10:	20000018 	.word	0x20000018

08008e14 <_write_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d07      	ldr	r5, [pc, #28]	; (8008e34 <_write_r+0x20>)
 8008e18:	4604      	mov	r4, r0
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	2200      	movs	r2, #0
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f7f9 f911 	bl	800204a <_write>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_write_r+0x1e>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_write_r+0x1e>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	2000086c 	.word	0x2000086c

08008e38 <_close_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d06      	ldr	r5, [pc, #24]	; (8008e54 <_close_r+0x1c>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f9 f91d 	bl	8002082 <_close>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_close_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_close_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	2000086c 	.word	0x2000086c

08008e58 <__sflush_r>:
 8008e58:	898a      	ldrh	r2, [r1, #12]
 8008e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	4605      	mov	r5, r0
 8008e60:	0710      	lsls	r0, r2, #28
 8008e62:	460c      	mov	r4, r1
 8008e64:	d458      	bmi.n	8008f18 <__sflush_r+0xc0>
 8008e66:	684b      	ldr	r3, [r1, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc05      	bgt.n	8008e78 <__sflush_r+0x20>
 8008e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dc02      	bgt.n	8008e78 <__sflush_r+0x20>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e7a:	2e00      	cmp	r6, #0
 8008e7c:	d0f9      	beq.n	8008e72 <__sflush_r+0x1a>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e84:	682f      	ldr	r7, [r5, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	d032      	beq.n	8008ef0 <__sflush_r+0x98>
 8008e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	075a      	lsls	r2, r3, #29
 8008e90:	d505      	bpl.n	8008e9e <__sflush_r+0x46>
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	1ac0      	subs	r0, r0, r3
 8008e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e98:	b10b      	cbz	r3, 8008e9e <__sflush_r+0x46>
 8008e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e9c:	1ac0      	subs	r0, r0, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea4:	6a21      	ldr	r1, [r4, #32]
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b0      	blx	r6
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	d106      	bne.n	8008ebe <__sflush_r+0x66>
 8008eb0:	6829      	ldr	r1, [r5, #0]
 8008eb2:	291d      	cmp	r1, #29
 8008eb4:	d82c      	bhi.n	8008f10 <__sflush_r+0xb8>
 8008eb6:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <__sflush_r+0x108>)
 8008eb8:	40ca      	lsrs	r2, r1
 8008eba:	07d6      	lsls	r6, r2, #31
 8008ebc:	d528      	bpl.n	8008f10 <__sflush_r+0xb8>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6062      	str	r2, [r4, #4]
 8008ec2:	04d9      	lsls	r1, r3, #19
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	6022      	str	r2, [r4, #0]
 8008ec8:	d504      	bpl.n	8008ed4 <__sflush_r+0x7c>
 8008eca:	1c42      	adds	r2, r0, #1
 8008ecc:	d101      	bne.n	8008ed2 <__sflush_r+0x7a>
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	b903      	cbnz	r3, 8008ed4 <__sflush_r+0x7c>
 8008ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d0ca      	beq.n	8008e72 <__sflush_r+0x1a>
 8008edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__sflush_r+0x92>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7ff fce1 	bl	80088ac <_free_r>
 8008eea:	2000      	movs	r0, #0
 8008eec:	6360      	str	r0, [r4, #52]	; 0x34
 8008eee:	e7c1      	b.n	8008e74 <__sflush_r+0x1c>
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b0      	blx	r6
 8008ef8:	1c41      	adds	r1, r0, #1
 8008efa:	d1c7      	bne.n	8008e8c <__sflush_r+0x34>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0c4      	beq.n	8008e8c <__sflush_r+0x34>
 8008f02:	2b1d      	cmp	r3, #29
 8008f04:	d001      	beq.n	8008f0a <__sflush_r+0xb2>
 8008f06:	2b16      	cmp	r3, #22
 8008f08:	d101      	bne.n	8008f0e <__sflush_r+0xb6>
 8008f0a:	602f      	str	r7, [r5, #0]
 8008f0c:	e7b1      	b.n	8008e72 <__sflush_r+0x1a>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	e7ad      	b.n	8008e74 <__sflush_r+0x1c>
 8008f18:	690f      	ldr	r7, [r1, #16]
 8008f1a:	2f00      	cmp	r7, #0
 8008f1c:	d0a9      	beq.n	8008e72 <__sflush_r+0x1a>
 8008f1e:	0793      	lsls	r3, r2, #30
 8008f20:	680e      	ldr	r6, [r1, #0]
 8008f22:	bf08      	it	eq
 8008f24:	694b      	ldreq	r3, [r1, #20]
 8008f26:	600f      	str	r7, [r1, #0]
 8008f28:	bf18      	it	ne
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	eba6 0807 	sub.w	r8, r6, r7
 8008f30:	608b      	str	r3, [r1, #8]
 8008f32:	f1b8 0f00 	cmp.w	r8, #0
 8008f36:	dd9c      	ble.n	8008e72 <__sflush_r+0x1a>
 8008f38:	6a21      	ldr	r1, [r4, #32]
 8008f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f3c:	4643      	mov	r3, r8
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b0      	blx	r6
 8008f44:	2800      	cmp	r0, #0
 8008f46:	dc06      	bgt.n	8008f56 <__sflush_r+0xfe>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f54:	e78e      	b.n	8008e74 <__sflush_r+0x1c>
 8008f56:	4407      	add	r7, r0
 8008f58:	eba8 0800 	sub.w	r8, r8, r0
 8008f5c:	e7e9      	b.n	8008f32 <__sflush_r+0xda>
 8008f5e:	bf00      	nop
 8008f60:	20400001 	.word	0x20400001

08008f64 <_fflush_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	690b      	ldr	r3, [r1, #16]
 8008f68:	4605      	mov	r5, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	b913      	cbnz	r3, 8008f74 <_fflush_r+0x10>
 8008f6e:	2500      	movs	r5, #0
 8008f70:	4628      	mov	r0, r5
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	b118      	cbz	r0, 8008f7e <_fflush_r+0x1a>
 8008f76:	6983      	ldr	r3, [r0, #24]
 8008f78:	b90b      	cbnz	r3, 8008f7e <_fflush_r+0x1a>
 8008f7a:	f7ff fb89 	bl	8008690 <__sinit>
 8008f7e:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <_fflush_r+0x6c>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	d11b      	bne.n	8008fbc <_fflush_r+0x58>
 8008f84:	686c      	ldr	r4, [r5, #4]
 8008f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0ef      	beq.n	8008f6e <_fflush_r+0xa>
 8008f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f90:	07d0      	lsls	r0, r2, #31
 8008f92:	d404      	bmi.n	8008f9e <_fflush_r+0x3a>
 8008f94:	0599      	lsls	r1, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_fflush_r+0x3a>
 8008f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9a:	f7f9 f9b9 	bl	8002310 <__retarget_lock_acquire_recursive>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	f7ff ff59 	bl	8008e58 <__sflush_r>
 8008fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa8:	07da      	lsls	r2, r3, #31
 8008faa:	4605      	mov	r5, r0
 8008fac:	d4e0      	bmi.n	8008f70 <_fflush_r+0xc>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	059b      	lsls	r3, r3, #22
 8008fb2:	d4dd      	bmi.n	8008f70 <_fflush_r+0xc>
 8008fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb6:	f7f9 f9bf 	bl	8002338 <__retarget_lock_release_recursive>
 8008fba:	e7d9      	b.n	8008f70 <_fflush_r+0xc>
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <_fflush_r+0x70>)
 8008fbe:	429c      	cmp	r4, r3
 8008fc0:	d101      	bne.n	8008fc6 <_fflush_r+0x62>
 8008fc2:	68ac      	ldr	r4, [r5, #8]
 8008fc4:	e7df      	b.n	8008f86 <_fflush_r+0x22>
 8008fc6:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <_fflush_r+0x74>)
 8008fc8:	429c      	cmp	r4, r3
 8008fca:	bf08      	it	eq
 8008fcc:	68ec      	ldreq	r4, [r5, #12]
 8008fce:	e7da      	b.n	8008f86 <_fflush_r+0x22>
 8008fd0:	08009f38 	.word	0x08009f38
 8008fd4:	08009f58 	.word	0x08009f58
 8008fd8:	08009f18 	.word	0x08009f18

08008fdc <fflush>:
 8008fdc:	4601      	mov	r1, r0
 8008fde:	b920      	cbnz	r0, 8008fea <fflush+0xe>
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <fflush+0x18>)
 8008fe2:	4905      	ldr	r1, [pc, #20]	; (8008ff8 <fflush+0x1c>)
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f7ff bbee 	b.w	80087c6 <_fwalk_reent>
 8008fea:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <fflush+0x20>)
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f7ff bfb9 	b.w	8008f64 <_fflush_r>
 8008ff2:	bf00      	nop
 8008ff4:	08009f78 	.word	0x08009f78
 8008ff8:	08008f65 	.word	0x08008f65
 8008ffc:	20000018 	.word	0x20000018

08009000 <_getc_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	460c      	mov	r4, r1
 8009004:	4605      	mov	r5, r0
 8009006:	b118      	cbz	r0, 8009010 <_getc_r+0x10>
 8009008:	6983      	ldr	r3, [r0, #24]
 800900a:	b90b      	cbnz	r3, 8009010 <_getc_r+0x10>
 800900c:	f7ff fb40 	bl	8008690 <__sinit>
 8009010:	4b18      	ldr	r3, [pc, #96]	; (8009074 <_getc_r+0x74>)
 8009012:	429c      	cmp	r4, r3
 8009014:	d11e      	bne.n	8009054 <_getc_r+0x54>
 8009016:	686c      	ldr	r4, [r5, #4]
 8009018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800901a:	07d8      	lsls	r0, r3, #31
 800901c:	d405      	bmi.n	800902a <_getc_r+0x2a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	0599      	lsls	r1, r3, #22
 8009022:	d402      	bmi.n	800902a <_getc_r+0x2a>
 8009024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009026:	f7f9 f973 	bl	8002310 <__retarget_lock_acquire_recursive>
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	3b01      	subs	r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	da19      	bge.n	8009068 <_getc_r+0x68>
 8009034:	4628      	mov	r0, r5
 8009036:	4621      	mov	r1, r4
 8009038:	f000 fbee 	bl	8009818 <__srget_r>
 800903c:	4605      	mov	r5, r0
 800903e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009040:	07da      	lsls	r2, r3, #31
 8009042:	d405      	bmi.n	8009050 <_getc_r+0x50>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	059b      	lsls	r3, r3, #22
 8009048:	d402      	bmi.n	8009050 <_getc_r+0x50>
 800904a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800904c:	f7f9 f974 	bl	8002338 <__retarget_lock_release_recursive>
 8009050:	4628      	mov	r0, r5
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <_getc_r+0x78>)
 8009056:	429c      	cmp	r4, r3
 8009058:	d101      	bne.n	800905e <_getc_r+0x5e>
 800905a:	68ac      	ldr	r4, [r5, #8]
 800905c:	e7dc      	b.n	8009018 <_getc_r+0x18>
 800905e:	4b07      	ldr	r3, [pc, #28]	; (800907c <_getc_r+0x7c>)
 8009060:	429c      	cmp	r4, r3
 8009062:	bf08      	it	eq
 8009064:	68ec      	ldreq	r4, [r5, #12]
 8009066:	e7d7      	b.n	8009018 <_getc_r+0x18>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	781d      	ldrb	r5, [r3, #0]
 8009070:	e7e5      	b.n	800903e <_getc_r+0x3e>
 8009072:	bf00      	nop
 8009074:	08009f38 	.word	0x08009f38
 8009078:	08009f58 	.word	0x08009f58
 800907c:	08009f18 	.word	0x08009f18

08009080 <_lseek_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	; (80090a0 <_lseek_r+0x20>)
 8009084:	4604      	mov	r4, r0
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	2200      	movs	r2, #0
 800908c:	602a      	str	r2, [r5, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	f7f9 f81e 	bl	80020d0 <_lseek>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_lseek_r+0x1e>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_lseek_r+0x1e>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	2000086c 	.word	0x2000086c

080090a4 <__swhatbuf_r>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	460e      	mov	r6, r1
 80090a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ac:	2900      	cmp	r1, #0
 80090ae:	b096      	sub	sp, #88	; 0x58
 80090b0:	4614      	mov	r4, r2
 80090b2:	461d      	mov	r5, r3
 80090b4:	da08      	bge.n	80090c8 <__swhatbuf_r+0x24>
 80090b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	061a      	lsls	r2, r3, #24
 80090c0:	d410      	bmi.n	80090e4 <__swhatbuf_r+0x40>
 80090c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c6:	e00e      	b.n	80090e6 <__swhatbuf_r+0x42>
 80090c8:	466a      	mov	r2, sp
 80090ca:	f000 fc91 	bl	80099f0 <_fstat_r>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dbf1      	blt.n	80090b6 <__swhatbuf_r+0x12>
 80090d2:	9a01      	ldr	r2, [sp, #4]
 80090d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090dc:	425a      	negs	r2, r3
 80090de:	415a      	adcs	r2, r3
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	e7ee      	b.n	80090c2 <__swhatbuf_r+0x1e>
 80090e4:	2340      	movs	r3, #64	; 0x40
 80090e6:	2000      	movs	r0, #0
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	b016      	add	sp, #88	; 0x58
 80090ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080090f0 <__smakebuf_r>:
 80090f0:	898b      	ldrh	r3, [r1, #12]
 80090f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090f4:	079d      	lsls	r5, r3, #30
 80090f6:	4606      	mov	r6, r0
 80090f8:	460c      	mov	r4, r1
 80090fa:	d507      	bpl.n	800910c <__smakebuf_r+0x1c>
 80090fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	6123      	str	r3, [r4, #16]
 8009104:	2301      	movs	r3, #1
 8009106:	6163      	str	r3, [r4, #20]
 8009108:	b002      	add	sp, #8
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	ab01      	add	r3, sp, #4
 800910e:	466a      	mov	r2, sp
 8009110:	f7ff ffc8 	bl	80090a4 <__swhatbuf_r>
 8009114:	9900      	ldr	r1, [sp, #0]
 8009116:	4605      	mov	r5, r0
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff fc33 	bl	8008984 <_malloc_r>
 800911e:	b948      	cbnz	r0, 8009134 <__smakebuf_r+0x44>
 8009120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009124:	059a      	lsls	r2, r3, #22
 8009126:	d4ef      	bmi.n	8009108 <__smakebuf_r+0x18>
 8009128:	f023 0303 	bic.w	r3, r3, #3
 800912c:	f043 0302 	orr.w	r3, r3, #2
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	e7e3      	b.n	80090fc <__smakebuf_r+0xc>
 8009134:	4b0d      	ldr	r3, [pc, #52]	; (800916c <__smakebuf_r+0x7c>)
 8009136:	62b3      	str	r3, [r6, #40]	; 0x28
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	6020      	str	r0, [r4, #0]
 800913c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	9b00      	ldr	r3, [sp, #0]
 8009144:	6163      	str	r3, [r4, #20]
 8009146:	9b01      	ldr	r3, [sp, #4]
 8009148:	6120      	str	r0, [r4, #16]
 800914a:	b15b      	cbz	r3, 8009164 <__smakebuf_r+0x74>
 800914c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009150:	4630      	mov	r0, r6
 8009152:	f000 fc5f 	bl	8009a14 <_isatty_r>
 8009156:	b128      	cbz	r0, 8009164 <__smakebuf_r+0x74>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	f023 0303 	bic.w	r3, r3, #3
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	89a0      	ldrh	r0, [r4, #12]
 8009166:	4305      	orrs	r5, r0
 8009168:	81a5      	strh	r5, [r4, #12]
 800916a:	e7cd      	b.n	8009108 <__smakebuf_r+0x18>
 800916c:	08008629 	.word	0x08008629

08009170 <__malloc_lock>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__malloc_lock+0x8>)
 8009172:	f7f9 b8cd 	b.w	8002310 <__retarget_lock_acquire_recursive>
 8009176:	bf00      	nop
 8009178:	20000464 	.word	0x20000464

0800917c <__malloc_unlock>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__malloc_unlock+0x8>)
 800917e:	f7f9 b8db 	b.w	8002338 <__retarget_lock_release_recursive>
 8009182:	bf00      	nop
 8009184:	20000464 	.word	0x20000464

08009188 <__sfputc_r>:
 8009188:	6893      	ldr	r3, [r2, #8]
 800918a:	3b01      	subs	r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	b410      	push	{r4}
 8009190:	6093      	str	r3, [r2, #8]
 8009192:	da08      	bge.n	80091a6 <__sfputc_r+0x1e>
 8009194:	6994      	ldr	r4, [r2, #24]
 8009196:	42a3      	cmp	r3, r4
 8009198:	db01      	blt.n	800919e <__sfputc_r+0x16>
 800919a:	290a      	cmp	r1, #10
 800919c:	d103      	bne.n	80091a6 <__sfputc_r+0x1e>
 800919e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a2:	f000 bb65 	b.w	8009870 <__swbuf_r>
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	1c58      	adds	r0, r3, #1
 80091aa:	6010      	str	r0, [r2, #0]
 80091ac:	7019      	strb	r1, [r3, #0]
 80091ae:	4608      	mov	r0, r1
 80091b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <__sfputs_r>:
 80091b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	460f      	mov	r7, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	18d5      	adds	r5, r2, r3
 80091c0:	42ac      	cmp	r4, r5
 80091c2:	d101      	bne.n	80091c8 <__sfputs_r+0x12>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e007      	b.n	80091d8 <__sfputs_r+0x22>
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	463a      	mov	r2, r7
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ffda 	bl	8009188 <__sfputc_r>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d1f3      	bne.n	80091c0 <__sfputs_r+0xa>
 80091d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091dc <_vfiprintf_r>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	460d      	mov	r5, r1
 80091e2:	b09d      	sub	sp, #116	; 0x74
 80091e4:	4614      	mov	r4, r2
 80091e6:	4698      	mov	r8, r3
 80091e8:	4606      	mov	r6, r0
 80091ea:	b118      	cbz	r0, 80091f4 <_vfiprintf_r+0x18>
 80091ec:	6983      	ldr	r3, [r0, #24]
 80091ee:	b90b      	cbnz	r3, 80091f4 <_vfiprintf_r+0x18>
 80091f0:	f7ff fa4e 	bl	8008690 <__sinit>
 80091f4:	4b89      	ldr	r3, [pc, #548]	; (800941c <_vfiprintf_r+0x240>)
 80091f6:	429d      	cmp	r5, r3
 80091f8:	d11b      	bne.n	8009232 <_vfiprintf_r+0x56>
 80091fa:	6875      	ldr	r5, [r6, #4]
 80091fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091fe:	07d9      	lsls	r1, r3, #31
 8009200:	d405      	bmi.n	800920e <_vfiprintf_r+0x32>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	059a      	lsls	r2, r3, #22
 8009206:	d402      	bmi.n	800920e <_vfiprintf_r+0x32>
 8009208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920a:	f7f9 f881 	bl	8002310 <__retarget_lock_acquire_recursive>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	071b      	lsls	r3, r3, #28
 8009212:	d501      	bpl.n	8009218 <_vfiprintf_r+0x3c>
 8009214:	692b      	ldr	r3, [r5, #16]
 8009216:	b9eb      	cbnz	r3, 8009254 <_vfiprintf_r+0x78>
 8009218:	4629      	mov	r1, r5
 800921a:	4630      	mov	r0, r6
 800921c:	f000 fb7a 	bl	8009914 <__swsetup_r>
 8009220:	b1c0      	cbz	r0, 8009254 <_vfiprintf_r+0x78>
 8009222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009224:	07dc      	lsls	r4, r3, #31
 8009226:	d50e      	bpl.n	8009246 <_vfiprintf_r+0x6a>
 8009228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800922c:	b01d      	add	sp, #116	; 0x74
 800922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009232:	4b7b      	ldr	r3, [pc, #492]	; (8009420 <_vfiprintf_r+0x244>)
 8009234:	429d      	cmp	r5, r3
 8009236:	d101      	bne.n	800923c <_vfiprintf_r+0x60>
 8009238:	68b5      	ldr	r5, [r6, #8]
 800923a:	e7df      	b.n	80091fc <_vfiprintf_r+0x20>
 800923c:	4b79      	ldr	r3, [pc, #484]	; (8009424 <_vfiprintf_r+0x248>)
 800923e:	429d      	cmp	r5, r3
 8009240:	bf08      	it	eq
 8009242:	68f5      	ldreq	r5, [r6, #12]
 8009244:	e7da      	b.n	80091fc <_vfiprintf_r+0x20>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	0598      	lsls	r0, r3, #22
 800924a:	d4ed      	bmi.n	8009228 <_vfiprintf_r+0x4c>
 800924c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924e:	f7f9 f873 	bl	8002338 <__retarget_lock_release_recursive>
 8009252:	e7e9      	b.n	8009228 <_vfiprintf_r+0x4c>
 8009254:	2300      	movs	r3, #0
 8009256:	9309      	str	r3, [sp, #36]	; 0x24
 8009258:	2320      	movs	r3, #32
 800925a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800925e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009262:	2330      	movs	r3, #48	; 0x30
 8009264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009428 <_vfiprintf_r+0x24c>
 8009268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800926c:	f04f 0901 	mov.w	r9, #1
 8009270:	4623      	mov	r3, r4
 8009272:	469a      	mov	sl, r3
 8009274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009278:	b10a      	cbz	r2, 800927e <_vfiprintf_r+0xa2>
 800927a:	2a25      	cmp	r2, #37	; 0x25
 800927c:	d1f9      	bne.n	8009272 <_vfiprintf_r+0x96>
 800927e:	ebba 0b04 	subs.w	fp, sl, r4
 8009282:	d00b      	beq.n	800929c <_vfiprintf_r+0xc0>
 8009284:	465b      	mov	r3, fp
 8009286:	4622      	mov	r2, r4
 8009288:	4629      	mov	r1, r5
 800928a:	4630      	mov	r0, r6
 800928c:	f7ff ff93 	bl	80091b6 <__sfputs_r>
 8009290:	3001      	adds	r0, #1
 8009292:	f000 80aa 	beq.w	80093ea <_vfiprintf_r+0x20e>
 8009296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009298:	445a      	add	r2, fp
 800929a:	9209      	str	r2, [sp, #36]	; 0x24
 800929c:	f89a 3000 	ldrb.w	r3, [sl]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80a2 	beq.w	80093ea <_vfiprintf_r+0x20e>
 80092a6:	2300      	movs	r3, #0
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b0:	f10a 0a01 	add.w	sl, sl, #1
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092bc:	931a      	str	r3, [sp, #104]	; 0x68
 80092be:	4654      	mov	r4, sl
 80092c0:	2205      	movs	r2, #5
 80092c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c6:	4858      	ldr	r0, [pc, #352]	; (8009428 <_vfiprintf_r+0x24c>)
 80092c8:	f7f6 ff92 	bl	80001f0 <memchr>
 80092cc:	9a04      	ldr	r2, [sp, #16]
 80092ce:	b9d8      	cbnz	r0, 8009308 <_vfiprintf_r+0x12c>
 80092d0:	06d1      	lsls	r1, r2, #27
 80092d2:	bf44      	itt	mi
 80092d4:	2320      	movmi	r3, #32
 80092d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092da:	0713      	lsls	r3, r2, #28
 80092dc:	bf44      	itt	mi
 80092de:	232b      	movmi	r3, #43	; 0x2b
 80092e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e4:	f89a 3000 	ldrb.w	r3, [sl]
 80092e8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ea:	d015      	beq.n	8009318 <_vfiprintf_r+0x13c>
 80092ec:	9a07      	ldr	r2, [sp, #28]
 80092ee:	4654      	mov	r4, sl
 80092f0:	2000      	movs	r0, #0
 80092f2:	f04f 0c0a 	mov.w	ip, #10
 80092f6:	4621      	mov	r1, r4
 80092f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092fc:	3b30      	subs	r3, #48	; 0x30
 80092fe:	2b09      	cmp	r3, #9
 8009300:	d94e      	bls.n	80093a0 <_vfiprintf_r+0x1c4>
 8009302:	b1b0      	cbz	r0, 8009332 <_vfiprintf_r+0x156>
 8009304:	9207      	str	r2, [sp, #28]
 8009306:	e014      	b.n	8009332 <_vfiprintf_r+0x156>
 8009308:	eba0 0308 	sub.w	r3, r0, r8
 800930c:	fa09 f303 	lsl.w	r3, r9, r3
 8009310:	4313      	orrs	r3, r2
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	46a2      	mov	sl, r4
 8009316:	e7d2      	b.n	80092be <_vfiprintf_r+0xe2>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	1d19      	adds	r1, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	9103      	str	r1, [sp, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	bfbb      	ittet	lt
 8009324:	425b      	neglt	r3, r3
 8009326:	f042 0202 	orrlt.w	r2, r2, #2
 800932a:	9307      	strge	r3, [sp, #28]
 800932c:	9307      	strlt	r3, [sp, #28]
 800932e:	bfb8      	it	lt
 8009330:	9204      	strlt	r2, [sp, #16]
 8009332:	7823      	ldrb	r3, [r4, #0]
 8009334:	2b2e      	cmp	r3, #46	; 0x2e
 8009336:	d10c      	bne.n	8009352 <_vfiprintf_r+0x176>
 8009338:	7863      	ldrb	r3, [r4, #1]
 800933a:	2b2a      	cmp	r3, #42	; 0x2a
 800933c:	d135      	bne.n	80093aa <_vfiprintf_r+0x1ce>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	1d1a      	adds	r2, r3, #4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	9203      	str	r2, [sp, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	bfb8      	it	lt
 800934a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800934e:	3402      	adds	r4, #2
 8009350:	9305      	str	r3, [sp, #20]
 8009352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009438 <_vfiprintf_r+0x25c>
 8009356:	7821      	ldrb	r1, [r4, #0]
 8009358:	2203      	movs	r2, #3
 800935a:	4650      	mov	r0, sl
 800935c:	f7f6 ff48 	bl	80001f0 <memchr>
 8009360:	b140      	cbz	r0, 8009374 <_vfiprintf_r+0x198>
 8009362:	2340      	movs	r3, #64	; 0x40
 8009364:	eba0 000a 	sub.w	r0, r0, sl
 8009368:	fa03 f000 	lsl.w	r0, r3, r0
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	4303      	orrs	r3, r0
 8009370:	3401      	adds	r4, #1
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009378:	482c      	ldr	r0, [pc, #176]	; (800942c <_vfiprintf_r+0x250>)
 800937a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800937e:	2206      	movs	r2, #6
 8009380:	f7f6 ff36 	bl	80001f0 <memchr>
 8009384:	2800      	cmp	r0, #0
 8009386:	d03f      	beq.n	8009408 <_vfiprintf_r+0x22c>
 8009388:	4b29      	ldr	r3, [pc, #164]	; (8009430 <_vfiprintf_r+0x254>)
 800938a:	bb1b      	cbnz	r3, 80093d4 <_vfiprintf_r+0x1f8>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	3307      	adds	r3, #7
 8009390:	f023 0307 	bic.w	r3, r3, #7
 8009394:	3308      	adds	r3, #8
 8009396:	9303      	str	r3, [sp, #12]
 8009398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939a:	443b      	add	r3, r7
 800939c:	9309      	str	r3, [sp, #36]	; 0x24
 800939e:	e767      	b.n	8009270 <_vfiprintf_r+0x94>
 80093a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a4:	460c      	mov	r4, r1
 80093a6:	2001      	movs	r0, #1
 80093a8:	e7a5      	b.n	80092f6 <_vfiprintf_r+0x11a>
 80093aa:	2300      	movs	r3, #0
 80093ac:	3401      	adds	r4, #1
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	4619      	mov	r1, r3
 80093b2:	f04f 0c0a 	mov.w	ip, #10
 80093b6:	4620      	mov	r0, r4
 80093b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093bc:	3a30      	subs	r2, #48	; 0x30
 80093be:	2a09      	cmp	r2, #9
 80093c0:	d903      	bls.n	80093ca <_vfiprintf_r+0x1ee>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0c5      	beq.n	8009352 <_vfiprintf_r+0x176>
 80093c6:	9105      	str	r1, [sp, #20]
 80093c8:	e7c3      	b.n	8009352 <_vfiprintf_r+0x176>
 80093ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ce:	4604      	mov	r4, r0
 80093d0:	2301      	movs	r3, #1
 80093d2:	e7f0      	b.n	80093b6 <_vfiprintf_r+0x1da>
 80093d4:	ab03      	add	r3, sp, #12
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	462a      	mov	r2, r5
 80093da:	4b16      	ldr	r3, [pc, #88]	; (8009434 <_vfiprintf_r+0x258>)
 80093dc:	a904      	add	r1, sp, #16
 80093de:	4630      	mov	r0, r6
 80093e0:	f3af 8000 	nop.w
 80093e4:	4607      	mov	r7, r0
 80093e6:	1c78      	adds	r0, r7, #1
 80093e8:	d1d6      	bne.n	8009398 <_vfiprintf_r+0x1bc>
 80093ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ec:	07d9      	lsls	r1, r3, #31
 80093ee:	d405      	bmi.n	80093fc <_vfiprintf_r+0x220>
 80093f0:	89ab      	ldrh	r3, [r5, #12]
 80093f2:	059a      	lsls	r2, r3, #22
 80093f4:	d402      	bmi.n	80093fc <_vfiprintf_r+0x220>
 80093f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093f8:	f7f8 ff9e 	bl	8002338 <__retarget_lock_release_recursive>
 80093fc:	89ab      	ldrh	r3, [r5, #12]
 80093fe:	065b      	lsls	r3, r3, #25
 8009400:	f53f af12 	bmi.w	8009228 <_vfiprintf_r+0x4c>
 8009404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009406:	e711      	b.n	800922c <_vfiprintf_r+0x50>
 8009408:	ab03      	add	r3, sp, #12
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	462a      	mov	r2, r5
 800940e:	4b09      	ldr	r3, [pc, #36]	; (8009434 <_vfiprintf_r+0x258>)
 8009410:	a904      	add	r1, sp, #16
 8009412:	4630      	mov	r0, r6
 8009414:	f000 f880 	bl	8009518 <_printf_i>
 8009418:	e7e4      	b.n	80093e4 <_vfiprintf_r+0x208>
 800941a:	bf00      	nop
 800941c:	08009f38 	.word	0x08009f38
 8009420:	08009f58 	.word	0x08009f58
 8009424:	08009f18 	.word	0x08009f18
 8009428:	0800a07d 	.word	0x0800a07d
 800942c:	0800a087 	.word	0x0800a087
 8009430:	00000000 	.word	0x00000000
 8009434:	080091b7 	.word	0x080091b7
 8009438:	0800a083 	.word	0x0800a083

0800943c <_printf_common>:
 800943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009440:	4616      	mov	r6, r2
 8009442:	4699      	mov	r9, r3
 8009444:	688a      	ldr	r2, [r1, #8]
 8009446:	690b      	ldr	r3, [r1, #16]
 8009448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800944c:	4293      	cmp	r3, r2
 800944e:	bfb8      	it	lt
 8009450:	4613      	movlt	r3, r2
 8009452:	6033      	str	r3, [r6, #0]
 8009454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009458:	4607      	mov	r7, r0
 800945a:	460c      	mov	r4, r1
 800945c:	b10a      	cbz	r2, 8009462 <_printf_common+0x26>
 800945e:	3301      	adds	r3, #1
 8009460:	6033      	str	r3, [r6, #0]
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	0699      	lsls	r1, r3, #26
 8009466:	bf42      	ittt	mi
 8009468:	6833      	ldrmi	r3, [r6, #0]
 800946a:	3302      	addmi	r3, #2
 800946c:	6033      	strmi	r3, [r6, #0]
 800946e:	6825      	ldr	r5, [r4, #0]
 8009470:	f015 0506 	ands.w	r5, r5, #6
 8009474:	d106      	bne.n	8009484 <_printf_common+0x48>
 8009476:	f104 0a19 	add.w	sl, r4, #25
 800947a:	68e3      	ldr	r3, [r4, #12]
 800947c:	6832      	ldr	r2, [r6, #0]
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	42ab      	cmp	r3, r5
 8009482:	dc26      	bgt.n	80094d2 <_printf_common+0x96>
 8009484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009488:	1e13      	subs	r3, r2, #0
 800948a:	6822      	ldr	r2, [r4, #0]
 800948c:	bf18      	it	ne
 800948e:	2301      	movne	r3, #1
 8009490:	0692      	lsls	r2, r2, #26
 8009492:	d42b      	bmi.n	80094ec <_printf_common+0xb0>
 8009494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009498:	4649      	mov	r1, r9
 800949a:	4638      	mov	r0, r7
 800949c:	47c0      	blx	r8
 800949e:	3001      	adds	r0, #1
 80094a0:	d01e      	beq.n	80094e0 <_printf_common+0xa4>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	68e5      	ldr	r5, [r4, #12]
 80094a6:	6832      	ldr	r2, [r6, #0]
 80094a8:	f003 0306 	and.w	r3, r3, #6
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	bf08      	it	eq
 80094b0:	1aad      	subeq	r5, r5, r2
 80094b2:	68a3      	ldr	r3, [r4, #8]
 80094b4:	6922      	ldr	r2, [r4, #16]
 80094b6:	bf0c      	ite	eq
 80094b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094bc:	2500      	movne	r5, #0
 80094be:	4293      	cmp	r3, r2
 80094c0:	bfc4      	itt	gt
 80094c2:	1a9b      	subgt	r3, r3, r2
 80094c4:	18ed      	addgt	r5, r5, r3
 80094c6:	2600      	movs	r6, #0
 80094c8:	341a      	adds	r4, #26
 80094ca:	42b5      	cmp	r5, r6
 80094cc:	d11a      	bne.n	8009504 <_printf_common+0xc8>
 80094ce:	2000      	movs	r0, #0
 80094d0:	e008      	b.n	80094e4 <_printf_common+0xa8>
 80094d2:	2301      	movs	r3, #1
 80094d4:	4652      	mov	r2, sl
 80094d6:	4649      	mov	r1, r9
 80094d8:	4638      	mov	r0, r7
 80094da:	47c0      	blx	r8
 80094dc:	3001      	adds	r0, #1
 80094de:	d103      	bne.n	80094e8 <_printf_common+0xac>
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e8:	3501      	adds	r5, #1
 80094ea:	e7c6      	b.n	800947a <_printf_common+0x3e>
 80094ec:	18e1      	adds	r1, r4, r3
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	2030      	movs	r0, #48	; 0x30
 80094f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094f6:	4422      	add	r2, r4
 80094f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009500:	3302      	adds	r3, #2
 8009502:	e7c7      	b.n	8009494 <_printf_common+0x58>
 8009504:	2301      	movs	r3, #1
 8009506:	4622      	mov	r2, r4
 8009508:	4649      	mov	r1, r9
 800950a:	4638      	mov	r0, r7
 800950c:	47c0      	blx	r8
 800950e:	3001      	adds	r0, #1
 8009510:	d0e6      	beq.n	80094e0 <_printf_common+0xa4>
 8009512:	3601      	adds	r6, #1
 8009514:	e7d9      	b.n	80094ca <_printf_common+0x8e>
	...

08009518 <_printf_i>:
 8009518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	7e0f      	ldrb	r7, [r1, #24]
 800951e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009520:	2f78      	cmp	r7, #120	; 0x78
 8009522:	4691      	mov	r9, r2
 8009524:	4680      	mov	r8, r0
 8009526:	460c      	mov	r4, r1
 8009528:	469a      	mov	sl, r3
 800952a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800952e:	d807      	bhi.n	8009540 <_printf_i+0x28>
 8009530:	2f62      	cmp	r7, #98	; 0x62
 8009532:	d80a      	bhi.n	800954a <_printf_i+0x32>
 8009534:	2f00      	cmp	r7, #0
 8009536:	f000 80d8 	beq.w	80096ea <_printf_i+0x1d2>
 800953a:	2f58      	cmp	r7, #88	; 0x58
 800953c:	f000 80a3 	beq.w	8009686 <_printf_i+0x16e>
 8009540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009548:	e03a      	b.n	80095c0 <_printf_i+0xa8>
 800954a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800954e:	2b15      	cmp	r3, #21
 8009550:	d8f6      	bhi.n	8009540 <_printf_i+0x28>
 8009552:	a101      	add	r1, pc, #4	; (adr r1, 8009558 <_printf_i+0x40>)
 8009554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009558:	080095b1 	.word	0x080095b1
 800955c:	080095c5 	.word	0x080095c5
 8009560:	08009541 	.word	0x08009541
 8009564:	08009541 	.word	0x08009541
 8009568:	08009541 	.word	0x08009541
 800956c:	08009541 	.word	0x08009541
 8009570:	080095c5 	.word	0x080095c5
 8009574:	08009541 	.word	0x08009541
 8009578:	08009541 	.word	0x08009541
 800957c:	08009541 	.word	0x08009541
 8009580:	08009541 	.word	0x08009541
 8009584:	080096d1 	.word	0x080096d1
 8009588:	080095f5 	.word	0x080095f5
 800958c:	080096b3 	.word	0x080096b3
 8009590:	08009541 	.word	0x08009541
 8009594:	08009541 	.word	0x08009541
 8009598:	080096f3 	.word	0x080096f3
 800959c:	08009541 	.word	0x08009541
 80095a0:	080095f5 	.word	0x080095f5
 80095a4:	08009541 	.word	0x08009541
 80095a8:	08009541 	.word	0x08009541
 80095ac:	080096bb 	.word	0x080096bb
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	602a      	str	r2, [r5, #0]
 80095b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c0:	2301      	movs	r3, #1
 80095c2:	e0a3      	b.n	800970c <_printf_i+0x1f4>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	6829      	ldr	r1, [r5, #0]
 80095c8:	0606      	lsls	r6, r0, #24
 80095ca:	f101 0304 	add.w	r3, r1, #4
 80095ce:	d50a      	bpl.n	80095e6 <_printf_i+0xce>
 80095d0:	680e      	ldr	r6, [r1, #0]
 80095d2:	602b      	str	r3, [r5, #0]
 80095d4:	2e00      	cmp	r6, #0
 80095d6:	da03      	bge.n	80095e0 <_printf_i+0xc8>
 80095d8:	232d      	movs	r3, #45	; 0x2d
 80095da:	4276      	negs	r6, r6
 80095dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e0:	485e      	ldr	r0, [pc, #376]	; (800975c <_printf_i+0x244>)
 80095e2:	230a      	movs	r3, #10
 80095e4:	e019      	b.n	800961a <_printf_i+0x102>
 80095e6:	680e      	ldr	r6, [r1, #0]
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095ee:	bf18      	it	ne
 80095f0:	b236      	sxthne	r6, r6
 80095f2:	e7ef      	b.n	80095d4 <_printf_i+0xbc>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	1d19      	adds	r1, r3, #4
 80095fa:	6029      	str	r1, [r5, #0]
 80095fc:	0601      	lsls	r1, r0, #24
 80095fe:	d501      	bpl.n	8009604 <_printf_i+0xec>
 8009600:	681e      	ldr	r6, [r3, #0]
 8009602:	e002      	b.n	800960a <_printf_i+0xf2>
 8009604:	0646      	lsls	r6, r0, #25
 8009606:	d5fb      	bpl.n	8009600 <_printf_i+0xe8>
 8009608:	881e      	ldrh	r6, [r3, #0]
 800960a:	4854      	ldr	r0, [pc, #336]	; (800975c <_printf_i+0x244>)
 800960c:	2f6f      	cmp	r7, #111	; 0x6f
 800960e:	bf0c      	ite	eq
 8009610:	2308      	moveq	r3, #8
 8009612:	230a      	movne	r3, #10
 8009614:	2100      	movs	r1, #0
 8009616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961a:	6865      	ldr	r5, [r4, #4]
 800961c:	60a5      	str	r5, [r4, #8]
 800961e:	2d00      	cmp	r5, #0
 8009620:	bfa2      	ittt	ge
 8009622:	6821      	ldrge	r1, [r4, #0]
 8009624:	f021 0104 	bicge.w	r1, r1, #4
 8009628:	6021      	strge	r1, [r4, #0]
 800962a:	b90e      	cbnz	r6, 8009630 <_printf_i+0x118>
 800962c:	2d00      	cmp	r5, #0
 800962e:	d04d      	beq.n	80096cc <_printf_i+0x1b4>
 8009630:	4615      	mov	r5, r2
 8009632:	fbb6 f1f3 	udiv	r1, r6, r3
 8009636:	fb03 6711 	mls	r7, r3, r1, r6
 800963a:	5dc7      	ldrb	r7, [r0, r7]
 800963c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009640:	4637      	mov	r7, r6
 8009642:	42bb      	cmp	r3, r7
 8009644:	460e      	mov	r6, r1
 8009646:	d9f4      	bls.n	8009632 <_printf_i+0x11a>
 8009648:	2b08      	cmp	r3, #8
 800964a:	d10b      	bne.n	8009664 <_printf_i+0x14c>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	07de      	lsls	r6, r3, #31
 8009650:	d508      	bpl.n	8009664 <_printf_i+0x14c>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6861      	ldr	r1, [r4, #4]
 8009656:	4299      	cmp	r1, r3
 8009658:	bfde      	ittt	le
 800965a:	2330      	movle	r3, #48	; 0x30
 800965c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009660:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009664:	1b52      	subs	r2, r2, r5
 8009666:	6122      	str	r2, [r4, #16]
 8009668:	f8cd a000 	str.w	sl, [sp]
 800966c:	464b      	mov	r3, r9
 800966e:	aa03      	add	r2, sp, #12
 8009670:	4621      	mov	r1, r4
 8009672:	4640      	mov	r0, r8
 8009674:	f7ff fee2 	bl	800943c <_printf_common>
 8009678:	3001      	adds	r0, #1
 800967a:	d14c      	bne.n	8009716 <_printf_i+0x1fe>
 800967c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009680:	b004      	add	sp, #16
 8009682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009686:	4835      	ldr	r0, [pc, #212]	; (800975c <_printf_i+0x244>)
 8009688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800968c:	6829      	ldr	r1, [r5, #0]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f851 6b04 	ldr.w	r6, [r1], #4
 8009694:	6029      	str	r1, [r5, #0]
 8009696:	061d      	lsls	r5, r3, #24
 8009698:	d514      	bpl.n	80096c4 <_printf_i+0x1ac>
 800969a:	07df      	lsls	r7, r3, #31
 800969c:	bf44      	itt	mi
 800969e:	f043 0320 	orrmi.w	r3, r3, #32
 80096a2:	6023      	strmi	r3, [r4, #0]
 80096a4:	b91e      	cbnz	r6, 80096ae <_printf_i+0x196>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	f023 0320 	bic.w	r3, r3, #32
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	2310      	movs	r3, #16
 80096b0:	e7b0      	b.n	8009614 <_printf_i+0xfc>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	f043 0320 	orr.w	r3, r3, #32
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	2378      	movs	r3, #120	; 0x78
 80096bc:	4828      	ldr	r0, [pc, #160]	; (8009760 <_printf_i+0x248>)
 80096be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096c2:	e7e3      	b.n	800968c <_printf_i+0x174>
 80096c4:	0659      	lsls	r1, r3, #25
 80096c6:	bf48      	it	mi
 80096c8:	b2b6      	uxthmi	r6, r6
 80096ca:	e7e6      	b.n	800969a <_printf_i+0x182>
 80096cc:	4615      	mov	r5, r2
 80096ce:	e7bb      	b.n	8009648 <_printf_i+0x130>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	6826      	ldr	r6, [r4, #0]
 80096d4:	6961      	ldr	r1, [r4, #20]
 80096d6:	1d18      	adds	r0, r3, #4
 80096d8:	6028      	str	r0, [r5, #0]
 80096da:	0635      	lsls	r5, r6, #24
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	d501      	bpl.n	80096e4 <_printf_i+0x1cc>
 80096e0:	6019      	str	r1, [r3, #0]
 80096e2:	e002      	b.n	80096ea <_printf_i+0x1d2>
 80096e4:	0670      	lsls	r0, r6, #25
 80096e6:	d5fb      	bpl.n	80096e0 <_printf_i+0x1c8>
 80096e8:	8019      	strh	r1, [r3, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	4615      	mov	r5, r2
 80096f0:	e7ba      	b.n	8009668 <_printf_i+0x150>
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	1d1a      	adds	r2, r3, #4
 80096f6:	602a      	str	r2, [r5, #0]
 80096f8:	681d      	ldr	r5, [r3, #0]
 80096fa:	6862      	ldr	r2, [r4, #4]
 80096fc:	2100      	movs	r1, #0
 80096fe:	4628      	mov	r0, r5
 8009700:	f7f6 fd76 	bl	80001f0 <memchr>
 8009704:	b108      	cbz	r0, 800970a <_printf_i+0x1f2>
 8009706:	1b40      	subs	r0, r0, r5
 8009708:	6060      	str	r0, [r4, #4]
 800970a:	6863      	ldr	r3, [r4, #4]
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	2300      	movs	r3, #0
 8009710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009714:	e7a8      	b.n	8009668 <_printf_i+0x150>
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	462a      	mov	r2, r5
 800971a:	4649      	mov	r1, r9
 800971c:	4640      	mov	r0, r8
 800971e:	47d0      	blx	sl
 8009720:	3001      	adds	r0, #1
 8009722:	d0ab      	beq.n	800967c <_printf_i+0x164>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	079b      	lsls	r3, r3, #30
 8009728:	d413      	bmi.n	8009752 <_printf_i+0x23a>
 800972a:	68e0      	ldr	r0, [r4, #12]
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	4298      	cmp	r0, r3
 8009730:	bfb8      	it	lt
 8009732:	4618      	movlt	r0, r3
 8009734:	e7a4      	b.n	8009680 <_printf_i+0x168>
 8009736:	2301      	movs	r3, #1
 8009738:	4632      	mov	r2, r6
 800973a:	4649      	mov	r1, r9
 800973c:	4640      	mov	r0, r8
 800973e:	47d0      	blx	sl
 8009740:	3001      	adds	r0, #1
 8009742:	d09b      	beq.n	800967c <_printf_i+0x164>
 8009744:	3501      	adds	r5, #1
 8009746:	68e3      	ldr	r3, [r4, #12]
 8009748:	9903      	ldr	r1, [sp, #12]
 800974a:	1a5b      	subs	r3, r3, r1
 800974c:	42ab      	cmp	r3, r5
 800974e:	dcf2      	bgt.n	8009736 <_printf_i+0x21e>
 8009750:	e7eb      	b.n	800972a <_printf_i+0x212>
 8009752:	2500      	movs	r5, #0
 8009754:	f104 0619 	add.w	r6, r4, #25
 8009758:	e7f5      	b.n	8009746 <_printf_i+0x22e>
 800975a:	bf00      	nop
 800975c:	0800a08e 	.word	0x0800a08e
 8009760:	0800a09f 	.word	0x0800a09f

08009764 <_putc_r>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	460d      	mov	r5, r1
 8009768:	4614      	mov	r4, r2
 800976a:	4606      	mov	r6, r0
 800976c:	b118      	cbz	r0, 8009776 <_putc_r+0x12>
 800976e:	6983      	ldr	r3, [r0, #24]
 8009770:	b90b      	cbnz	r3, 8009776 <_putc_r+0x12>
 8009772:	f7fe ff8d 	bl	8008690 <__sinit>
 8009776:	4b1c      	ldr	r3, [pc, #112]	; (80097e8 <_putc_r+0x84>)
 8009778:	429c      	cmp	r4, r3
 800977a:	d124      	bne.n	80097c6 <_putc_r+0x62>
 800977c:	6874      	ldr	r4, [r6, #4]
 800977e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009780:	07d8      	lsls	r0, r3, #31
 8009782:	d405      	bmi.n	8009790 <_putc_r+0x2c>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	0599      	lsls	r1, r3, #22
 8009788:	d402      	bmi.n	8009790 <_putc_r+0x2c>
 800978a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800978c:	f7f8 fdc0 	bl	8002310 <__retarget_lock_acquire_recursive>
 8009790:	68a3      	ldr	r3, [r4, #8]
 8009792:	3b01      	subs	r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	60a3      	str	r3, [r4, #8]
 8009798:	da05      	bge.n	80097a6 <_putc_r+0x42>
 800979a:	69a2      	ldr	r2, [r4, #24]
 800979c:	4293      	cmp	r3, r2
 800979e:	db1c      	blt.n	80097da <_putc_r+0x76>
 80097a0:	b2eb      	uxtb	r3, r5
 80097a2:	2b0a      	cmp	r3, #10
 80097a4:	d019      	beq.n	80097da <_putc_r+0x76>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	701d      	strb	r5, [r3, #0]
 80097ae:	b2ed      	uxtb	r5, r5
 80097b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b2:	07da      	lsls	r2, r3, #31
 80097b4:	d405      	bmi.n	80097c2 <_putc_r+0x5e>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	059b      	lsls	r3, r3, #22
 80097ba:	d402      	bmi.n	80097c2 <_putc_r+0x5e>
 80097bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097be:	f7f8 fdbb 	bl	8002338 <__retarget_lock_release_recursive>
 80097c2:	4628      	mov	r0, r5
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
 80097c6:	4b09      	ldr	r3, [pc, #36]	; (80097ec <_putc_r+0x88>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	d101      	bne.n	80097d0 <_putc_r+0x6c>
 80097cc:	68b4      	ldr	r4, [r6, #8]
 80097ce:	e7d6      	b.n	800977e <_putc_r+0x1a>
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <_putc_r+0x8c>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	bf08      	it	eq
 80097d6:	68f4      	ldreq	r4, [r6, #12]
 80097d8:	e7d1      	b.n	800977e <_putc_r+0x1a>
 80097da:	4629      	mov	r1, r5
 80097dc:	4622      	mov	r2, r4
 80097de:	4630      	mov	r0, r6
 80097e0:	f000 f846 	bl	8009870 <__swbuf_r>
 80097e4:	4605      	mov	r5, r0
 80097e6:	e7e3      	b.n	80097b0 <_putc_r+0x4c>
 80097e8:	08009f38 	.word	0x08009f38
 80097ec:	08009f58 	.word	0x08009f58
 80097f0:	08009f18 	.word	0x08009f18

080097f4 <_read_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	; (8009814 <_read_r+0x20>)
 80097f8:	4604      	mov	r4, r0
 80097fa:	4608      	mov	r0, r1
 80097fc:	4611      	mov	r1, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	602a      	str	r2, [r5, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f7f8 fc04 	bl	8002010 <_read>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_read_r+0x1e>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_read_r+0x1e>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	2000086c 	.word	0x2000086c

08009818 <__srget_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	4605      	mov	r5, r0
 800981e:	b118      	cbz	r0, 8009828 <__srget_r+0x10>
 8009820:	6983      	ldr	r3, [r0, #24]
 8009822:	b90b      	cbnz	r3, 8009828 <__srget_r+0x10>
 8009824:	f7fe ff34 	bl	8008690 <__sinit>
 8009828:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <__srget_r+0x4c>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d10d      	bne.n	800984a <__srget_r+0x32>
 800982e:	686c      	ldr	r4, [r5, #4]
 8009830:	4621      	mov	r1, r4
 8009832:	4628      	mov	r0, r5
 8009834:	f000 f908 	bl	8009a48 <__srefill_r>
 8009838:	b988      	cbnz	r0, 800985e <__srget_r+0x46>
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	3b01      	subs	r3, #1
 800983e:	6063      	str	r3, [r4, #4]
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	6022      	str	r2, [r4, #0]
 8009846:	7818      	ldrb	r0, [r3, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <__srget_r+0x50>)
 800984c:	429c      	cmp	r4, r3
 800984e:	d101      	bne.n	8009854 <__srget_r+0x3c>
 8009850:	68ac      	ldr	r4, [r5, #8]
 8009852:	e7ed      	b.n	8009830 <__srget_r+0x18>
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <__srget_r+0x54>)
 8009856:	429c      	cmp	r4, r3
 8009858:	bf08      	it	eq
 800985a:	68ec      	ldreq	r4, [r5, #12]
 800985c:	e7e8      	b.n	8009830 <__srget_r+0x18>
 800985e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009862:	e7f1      	b.n	8009848 <__srget_r+0x30>
 8009864:	08009f38 	.word	0x08009f38
 8009868:	08009f58 	.word	0x08009f58
 800986c:	08009f18 	.word	0x08009f18

08009870 <__swbuf_r>:
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009872:	460e      	mov	r6, r1
 8009874:	4614      	mov	r4, r2
 8009876:	4605      	mov	r5, r0
 8009878:	b118      	cbz	r0, 8009882 <__swbuf_r+0x12>
 800987a:	6983      	ldr	r3, [r0, #24]
 800987c:	b90b      	cbnz	r3, 8009882 <__swbuf_r+0x12>
 800987e:	f7fe ff07 	bl	8008690 <__sinit>
 8009882:	4b21      	ldr	r3, [pc, #132]	; (8009908 <__swbuf_r+0x98>)
 8009884:	429c      	cmp	r4, r3
 8009886:	d12b      	bne.n	80098e0 <__swbuf_r+0x70>
 8009888:	686c      	ldr	r4, [r5, #4]
 800988a:	69a3      	ldr	r3, [r4, #24]
 800988c:	60a3      	str	r3, [r4, #8]
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	071a      	lsls	r2, r3, #28
 8009892:	d52f      	bpl.n	80098f4 <__swbuf_r+0x84>
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	b36b      	cbz	r3, 80098f4 <__swbuf_r+0x84>
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	6820      	ldr	r0, [r4, #0]
 800989c:	1ac0      	subs	r0, r0, r3
 800989e:	6963      	ldr	r3, [r4, #20]
 80098a0:	b2f6      	uxtb	r6, r6
 80098a2:	4283      	cmp	r3, r0
 80098a4:	4637      	mov	r7, r6
 80098a6:	dc04      	bgt.n	80098b2 <__swbuf_r+0x42>
 80098a8:	4621      	mov	r1, r4
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7ff fb5a 	bl	8008f64 <_fflush_r>
 80098b0:	bb30      	cbnz	r0, 8009900 <__swbuf_r+0x90>
 80098b2:	68a3      	ldr	r3, [r4, #8]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	60a3      	str	r3, [r4, #8]
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	6022      	str	r2, [r4, #0]
 80098be:	701e      	strb	r6, [r3, #0]
 80098c0:	6963      	ldr	r3, [r4, #20]
 80098c2:	3001      	adds	r0, #1
 80098c4:	4283      	cmp	r3, r0
 80098c6:	d004      	beq.n	80098d2 <__swbuf_r+0x62>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	07db      	lsls	r3, r3, #31
 80098cc:	d506      	bpl.n	80098dc <__swbuf_r+0x6c>
 80098ce:	2e0a      	cmp	r6, #10
 80098d0:	d104      	bne.n	80098dc <__swbuf_r+0x6c>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4628      	mov	r0, r5
 80098d6:	f7ff fb45 	bl	8008f64 <_fflush_r>
 80098da:	b988      	cbnz	r0, 8009900 <__swbuf_r+0x90>
 80098dc:	4638      	mov	r0, r7
 80098de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e0:	4b0a      	ldr	r3, [pc, #40]	; (800990c <__swbuf_r+0x9c>)
 80098e2:	429c      	cmp	r4, r3
 80098e4:	d101      	bne.n	80098ea <__swbuf_r+0x7a>
 80098e6:	68ac      	ldr	r4, [r5, #8]
 80098e8:	e7cf      	b.n	800988a <__swbuf_r+0x1a>
 80098ea:	4b09      	ldr	r3, [pc, #36]	; (8009910 <__swbuf_r+0xa0>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	bf08      	it	eq
 80098f0:	68ec      	ldreq	r4, [r5, #12]
 80098f2:	e7ca      	b.n	800988a <__swbuf_r+0x1a>
 80098f4:	4621      	mov	r1, r4
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f80c 	bl	8009914 <__swsetup_r>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d0cb      	beq.n	8009898 <__swbuf_r+0x28>
 8009900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009904:	e7ea      	b.n	80098dc <__swbuf_r+0x6c>
 8009906:	bf00      	nop
 8009908:	08009f38 	.word	0x08009f38
 800990c:	08009f58 	.word	0x08009f58
 8009910:	08009f18 	.word	0x08009f18

08009914 <__swsetup_r>:
 8009914:	4b32      	ldr	r3, [pc, #200]	; (80099e0 <__swsetup_r+0xcc>)
 8009916:	b570      	push	{r4, r5, r6, lr}
 8009918:	681d      	ldr	r5, [r3, #0]
 800991a:	4606      	mov	r6, r0
 800991c:	460c      	mov	r4, r1
 800991e:	b125      	cbz	r5, 800992a <__swsetup_r+0x16>
 8009920:	69ab      	ldr	r3, [r5, #24]
 8009922:	b913      	cbnz	r3, 800992a <__swsetup_r+0x16>
 8009924:	4628      	mov	r0, r5
 8009926:	f7fe feb3 	bl	8008690 <__sinit>
 800992a:	4b2e      	ldr	r3, [pc, #184]	; (80099e4 <__swsetup_r+0xd0>)
 800992c:	429c      	cmp	r4, r3
 800992e:	d10f      	bne.n	8009950 <__swsetup_r+0x3c>
 8009930:	686c      	ldr	r4, [r5, #4]
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009938:	0719      	lsls	r1, r3, #28
 800993a:	d42c      	bmi.n	8009996 <__swsetup_r+0x82>
 800993c:	06dd      	lsls	r5, r3, #27
 800993e:	d411      	bmi.n	8009964 <__swsetup_r+0x50>
 8009940:	2309      	movs	r3, #9
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800994e:	e03e      	b.n	80099ce <__swsetup_r+0xba>
 8009950:	4b25      	ldr	r3, [pc, #148]	; (80099e8 <__swsetup_r+0xd4>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d101      	bne.n	800995a <__swsetup_r+0x46>
 8009956:	68ac      	ldr	r4, [r5, #8]
 8009958:	e7eb      	b.n	8009932 <__swsetup_r+0x1e>
 800995a:	4b24      	ldr	r3, [pc, #144]	; (80099ec <__swsetup_r+0xd8>)
 800995c:	429c      	cmp	r4, r3
 800995e:	bf08      	it	eq
 8009960:	68ec      	ldreq	r4, [r5, #12]
 8009962:	e7e6      	b.n	8009932 <__swsetup_r+0x1e>
 8009964:	0758      	lsls	r0, r3, #29
 8009966:	d512      	bpl.n	800998e <__swsetup_r+0x7a>
 8009968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800996a:	b141      	cbz	r1, 800997e <__swsetup_r+0x6a>
 800996c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009970:	4299      	cmp	r1, r3
 8009972:	d002      	beq.n	800997a <__swsetup_r+0x66>
 8009974:	4630      	mov	r0, r6
 8009976:	f7fe ff99 	bl	80088ac <_free_r>
 800997a:	2300      	movs	r3, #0
 800997c:	6363      	str	r3, [r4, #52]	; 0x34
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	2300      	movs	r3, #0
 8009988:	6063      	str	r3, [r4, #4]
 800998a:	6923      	ldr	r3, [r4, #16]
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	f043 0308 	orr.w	r3, r3, #8
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	6923      	ldr	r3, [r4, #16]
 8009998:	b94b      	cbnz	r3, 80099ae <__swsetup_r+0x9a>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a4:	d003      	beq.n	80099ae <__swsetup_r+0x9a>
 80099a6:	4621      	mov	r1, r4
 80099a8:	4630      	mov	r0, r6
 80099aa:	f7ff fba1 	bl	80090f0 <__smakebuf_r>
 80099ae:	89a0      	ldrh	r0, [r4, #12]
 80099b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099b4:	f010 0301 	ands.w	r3, r0, #1
 80099b8:	d00a      	beq.n	80099d0 <__swsetup_r+0xbc>
 80099ba:	2300      	movs	r3, #0
 80099bc:	60a3      	str	r3, [r4, #8]
 80099be:	6963      	ldr	r3, [r4, #20]
 80099c0:	425b      	negs	r3, r3
 80099c2:	61a3      	str	r3, [r4, #24]
 80099c4:	6923      	ldr	r3, [r4, #16]
 80099c6:	b943      	cbnz	r3, 80099da <__swsetup_r+0xc6>
 80099c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099cc:	d1ba      	bne.n	8009944 <__swsetup_r+0x30>
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	0781      	lsls	r1, r0, #30
 80099d2:	bf58      	it	pl
 80099d4:	6963      	ldrpl	r3, [r4, #20]
 80099d6:	60a3      	str	r3, [r4, #8]
 80099d8:	e7f4      	b.n	80099c4 <__swsetup_r+0xb0>
 80099da:	2000      	movs	r0, #0
 80099dc:	e7f7      	b.n	80099ce <__swsetup_r+0xba>
 80099de:	bf00      	nop
 80099e0:	20000018 	.word	0x20000018
 80099e4:	08009f38 	.word	0x08009f38
 80099e8:	08009f58 	.word	0x08009f58
 80099ec:	08009f18 	.word	0x08009f18

080099f0 <_fstat_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	; (8009a10 <_fstat_r+0x20>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	602b      	str	r3, [r5, #0]
 80099fe:	f7f8 fb4c 	bl	800209a <_fstat>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d102      	bne.n	8009a0c <_fstat_r+0x1c>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	b103      	cbz	r3, 8009a0c <_fstat_r+0x1c>
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	2000086c 	.word	0x2000086c

08009a14 <_isatty_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	; (8009a30 <_isatty_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f8 fb4b 	bl	80020ba <_isatty>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_isatty_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_isatty_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	2000086c 	.word	0x2000086c

08009a34 <lflush>:
 8009a34:	8983      	ldrh	r3, [r0, #12]
 8009a36:	f003 0309 	and.w	r3, r3, #9
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d101      	bne.n	8009a42 <lflush+0xe>
 8009a3e:	f7ff bacd 	b.w	8008fdc <fflush>
 8009a42:	2000      	movs	r0, #0
 8009a44:	4770      	bx	lr
	...

08009a48 <__srefill_r>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	b118      	cbz	r0, 8009a58 <__srefill_r+0x10>
 8009a50:	6983      	ldr	r3, [r0, #24]
 8009a52:	b90b      	cbnz	r3, 8009a58 <__srefill_r+0x10>
 8009a54:	f7fe fe1c 	bl	8008690 <__sinit>
 8009a58:	4b3b      	ldr	r3, [pc, #236]	; (8009b48 <__srefill_r+0x100>)
 8009a5a:	429c      	cmp	r4, r3
 8009a5c:	d10a      	bne.n	8009a74 <__srefill_r+0x2c>
 8009a5e:	686c      	ldr	r4, [r5, #4]
 8009a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a64:	2300      	movs	r3, #0
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	069e      	lsls	r6, r3, #26
 8009a6c:	d50c      	bpl.n	8009a88 <__srefill_r+0x40>
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a72:	e066      	b.n	8009b42 <__srefill_r+0xfa>
 8009a74:	4b35      	ldr	r3, [pc, #212]	; (8009b4c <__srefill_r+0x104>)
 8009a76:	429c      	cmp	r4, r3
 8009a78:	d101      	bne.n	8009a7e <__srefill_r+0x36>
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	e7f0      	b.n	8009a60 <__srefill_r+0x18>
 8009a7e:	4b34      	ldr	r3, [pc, #208]	; (8009b50 <__srefill_r+0x108>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	bf08      	it	eq
 8009a84:	68ec      	ldreq	r4, [r5, #12]
 8009a86:	e7eb      	b.n	8009a60 <__srefill_r+0x18>
 8009a88:	0758      	lsls	r0, r3, #29
 8009a8a:	d448      	bmi.n	8009b1e <__srefill_r+0xd6>
 8009a8c:	06d9      	lsls	r1, r3, #27
 8009a8e:	d405      	bmi.n	8009a9c <__srefill_r+0x54>
 8009a90:	2309      	movs	r3, #9
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a98:	81a3      	strh	r3, [r4, #12]
 8009a9a:	e7e8      	b.n	8009a6e <__srefill_r+0x26>
 8009a9c:	071a      	lsls	r2, r3, #28
 8009a9e:	d50b      	bpl.n	8009ab8 <__srefill_r+0x70>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	f7ff fa5e 	bl	8008f64 <_fflush_r>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1e0      	bne.n	8009a6e <__srefill_r+0x26>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	60a0      	str	r0, [r4, #8]
 8009ab0:	f023 0308 	bic.w	r3, r3, #8
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	61a0      	str	r0, [r4, #24]
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f043 0304 	orr.w	r3, r3, #4
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	b91b      	cbnz	r3, 8009acc <__srefill_r+0x84>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f7ff fb12 	bl	80090f0 <__smakebuf_r>
 8009acc:	89a6      	ldrh	r6, [r4, #12]
 8009ace:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009ad2:	07b3      	lsls	r3, r6, #30
 8009ad4:	d00f      	beq.n	8009af6 <__srefill_r+0xae>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	4b1e      	ldr	r3, [pc, #120]	; (8009b54 <__srefill_r+0x10c>)
 8009adc:	491e      	ldr	r1, [pc, #120]	; (8009b58 <__srefill_r+0x110>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	f006 0609 	and.w	r6, r6, #9
 8009ae4:	f7fe fe52 	bl	800878c <_fwalk>
 8009ae8:	2e09      	cmp	r6, #9
 8009aea:	81a7      	strh	r7, [r4, #12]
 8009aec:	d103      	bne.n	8009af6 <__srefill_r+0xae>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4628      	mov	r0, r5
 8009af2:	f7ff f9b1 	bl	8008e58 <__sflush_r>
 8009af6:	6922      	ldr	r2, [r4, #16]
 8009af8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	6a21      	ldr	r1, [r4, #32]
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b0      	blx	r6
 8009b04:	2800      	cmp	r0, #0
 8009b06:	6060      	str	r0, [r4, #4]
 8009b08:	dc1c      	bgt.n	8009b44 <__srefill_r+0xfc>
 8009b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0e:	bf17      	itett	ne
 8009b10:	2200      	movne	r2, #0
 8009b12:	f043 0320 	orreq.w	r3, r3, #32
 8009b16:	6062      	strne	r2, [r4, #4]
 8009b18:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009b1c:	e7bc      	b.n	8009a98 <__srefill_r+0x50>
 8009b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d0cd      	beq.n	8009ac0 <__srefill_r+0x78>
 8009b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	d002      	beq.n	8009b32 <__srefill_r+0xea>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7fe febd 	bl	80088ac <_free_r>
 8009b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	2000      	movs	r0, #0
 8009b38:	6360      	str	r0, [r4, #52]	; 0x34
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0c0      	beq.n	8009ac0 <__srefill_r+0x78>
 8009b3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b44:	2000      	movs	r0, #0
 8009b46:	e7fc      	b.n	8009b42 <__srefill_r+0xfa>
 8009b48:	08009f38 	.word	0x08009f38
 8009b4c:	08009f58 	.word	0x08009f58
 8009b50:	08009f18 	.word	0x08009f18
 8009b54:	08009f78 	.word	0x08009f78
 8009b58:	08009a35 	.word	0x08009a35

08009b5c <_init>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	bf00      	nop
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr

08009b68 <_fini>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr
